"""
ONEX SPI workflow event bus protocols for distributed orchestration.

These protocols extend the base event bus with workflow-specific
messaging patterns, event sourcing, and orchestration coordination.
"""

from typing import Any, Awaitable, Callable, Optional, Protocol, runtime_checkable
from uuid import UUID

from omnibase_spi.protocols.event_bus.protocol_event_bus import ProtocolEventBus
from omnibase_spi.protocols.types.protocol_workflow_orchestration_types import (
    LiteralWorkflowEventType,
    LiteralWorkflowState,
    ProtocolWorkflowEvent,
    ProtocolWorkflowSnapshot,
)


@runtime_checkable
class ProtocolWorkflowEventMessage(Protocol):
    """
    Protocol for workflow-specific event messages.

    Extends the base event message with workflow orchestration metadata
    for proper event sourcing and workflow coordination.
    """

    # Base event message properties
    topic: str
    key: Optional[bytes]
    value: bytes
    headers: dict[str, Any]
    offset: Optional[str]
    partition: Optional[int]

    # Workflow-specific properties
    workflow_type: str
    instance_id: UUID
    correlation_id: UUID
    sequence_number: int
    event_type: LiteralWorkflowEventType
    idempotency_key: str

    async def ack(self) -> None:
        """Acknowledge message processing."""
        ...

    async def get_workflow_event(self) -> ProtocolWorkflowEvent: ...
@runtime_checkable
class ProtocolWorkflowEventHandler(Protocol):
    """
    Protocol for workflow event handler functions.

    Event handlers process workflow events and update workflow state
    according to event sourcing patterns.
    """

    async def __call__(
        self, event: ProtocolWorkflowEvent, context: dict[str, Any]
    ) -> None:
        """
        Handle workflow event.

        Args:
            event: Workflow event to process
            context: Processing context and metadata
        """
        ...


@runtime_checkable
class ProtocolLiteralWorkflowStateProjection(Protocol):
    """
    Protocol for workflow state projection handlers.

    Projections maintain derived state from workflow events
    for query optimization and real-time monitoring.
    """

    projection_name: str

    async def apply_event(
        self, event: ProtocolWorkflowEvent, current_state: dict[str, Any]
    ) -> dict[str, Any]:
        """
        Apply event to projection state.

        Args:
            event: Workflow event to apply
            current_state: Current projection state

        Returns:
            Updated projection state
        """
        ...

    async def get_state(self, workflow_type: str, instance_id: UUID) -> dict[str, Any]:
        """
        Get current projection state.

        Args:
            workflow_type: Workflow type identifier
            instance_id: Workflow instance ID

        Returns:
            Current projection state
        """
        ...


@runtime_checkable
class ProtocolWorkflowEventBus(Protocol):
    """
    Protocol for workflow-specific event bus operations.

    Extends the base event bus with workflow orchestration patterns:
    - Event sourcing with sequence numbers
    - Workflow instance isolation
    - Task coordination messaging
    - State projection updates
    - Recovery and replay support

    """

    # Base event bus access
    @property
    def base_event_bus(self) -> ProtocolEventBus:
        """Get underlying event bus implementation."""
        ...

    ...
