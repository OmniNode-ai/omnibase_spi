"""
Protocol definitions for HTTP client abstraction.

Provides HTTP client protocols that can be implemented by different
HTTP backends (aiohttp, httpx, etc.) and injected via ONEXContainer.
"""

from typing import Optional, Protocol, runtime_checkable

from omnibase_spi.protocols.types.protocol_core_types import ContextValue


@runtime_checkable
class ProtocolHttpResponse(Protocol):
    """
    Protocol representing an HTTP response.

    Provides structured response data with status, headers, and body content.
    """

    status_code: int
    headers: dict[str, ContextValue]
    body: str | bytes | dict[str, str | int | float | bool]
    url: str


@runtime_checkable
class ProtocolHttpClient(Protocol):
    """
    Protocol for HTTP client operations.

    Generic HTTP client supporting standard HTTP methods with configurable
    timeouts, headers, and request/response handling. Implementations can
    use aiohttp, httpx, or other HTTP client backends.

    Example:
        ```python
        # GET request
        client: ProtocolHttpClient = get_http_client()
        response = await client.request("GET", "https://api.example.com/users")
        print(f"Status: {response.status_code}")
        print(f"Data: {response.body}")

        # POST with JSON payload
        payload = {"name": "John", "email": "john@example.com"}
        headers = {"Content-Type": "application/json"}
        response = await client.request(
            "POST",
            "https://api.example.com/users",
            json=payload,
            headers=headers,
            timeout=30
        )

        # Webhook delivery
        webhook_data = {"event": "user.created", "user_id": 123}
        response = await client.request(
            "POST",
            "https://webhook.example.com/events",
            json=webhook_data,
            headers={"X-Event-Type": "user.created"},
            timeout=10
        )
        ```
    """

    async def request(
        self,
        method: str,
        url: str,
        json: Optional[dict[str, str | int | float | bool]] = None,
        headers: Optional[dict[str, ContextValue]] = None,
        timeout: Optional[int] = None,
    ) -> "ProtocolHttpResponse":
        """
        Perform HTTP request with specified method and parameters.

        Args:
            method: HTTP method (GET, POST, PUT, DELETE, etc.)
            url: Target URL for the request
            json: Optional JSON payload to send in request body
            headers: Optional HTTP headers as key-value pairs
            timeout: Optional request timeout in seconds

        Returns:
            ProtocolHttpResponse containing status, headers, and body

        Raises:
            OnexError: For HTTP client errors, timeouts, or connection issues
        """
        ...

    async def get(
        self,
        url: str,
        headers: Optional[dict[str, ContextValue]] = None,
        timeout: Optional[int] = None,
    ) -> "ProtocolHttpResponse":
        """
        Perform HTTP GET request.

        Args:
            url: Target URL for the GET request
            headers: Optional HTTP headers as key-value pairs
            timeout: Optional request timeout in seconds

        Returns:
            ProtocolHttpResponse containing status, headers, and body
        """
        ...

    async def post(
        self,
        url: str,
        json: Optional[dict[str, str | int | float | bool]] = None,
        headers: Optional[dict[str, ContextValue]] = None,
        timeout: Optional[int] = None,
    ) -> "ProtocolHttpResponse":
        """
        Perform HTTP POST request.

        Args:
            url: Target URL for the POST request
            json: Optional JSON payload to send in request body
            headers: Optional HTTP headers as key-value pairs
            timeout: Optional request timeout in seconds

        Returns:
            ProtocolHttpResponse containing status, headers, and body
        """
        ...

    async def put(
        self,
        url: str,
        json: Optional[dict[str, str | int | float | bool]] = None,
        headers: Optional[dict[str, ContextValue]] = None,
        timeout: Optional[int] = None,
    ) -> "ProtocolHttpResponse":
        """
        Perform HTTP PUT request.

        Args:
            url: Target URL for the PUT request
            json: Optional JSON payload to send in request body
            headers: Optional HTTP headers as key-value pairs
            timeout: Optional request timeout in seconds

        Returns:
            ProtocolHttpResponse containing status, headers, and body
        """
        ...

    async def delete(
        self,
        url: str,
        headers: Optional[dict[str, ContextValue]] = None,
        timeout: Optional[int] = None,
    ) -> "ProtocolHttpResponse":
        """
        Perform HTTP DELETE request.

        Args:
            url: Target URL for the DELETE request
            headers: Optional HTTP headers as key-value pairs
            timeout: Optional request timeout in seconds

        Returns:
            ProtocolHttpResponse containing status, headers, and body
        """
        ...


@runtime_checkable
class ProtocolHttpClientProvider(Protocol):
    """Protocol for HTTP client provider."""

    async def create_http_client(self) -> ProtocolHttpClient:
        """
        Create HTTP client instance.

        Returns:
            ProtocolHttpClient implementation
        """
        ...

    def get_http_configuration(self) -> dict[str, str | int | float | bool]:
        """
        Get HTTP client configuration parameters.

        Returns:
            Dictionary with HTTP client configuration
        """
        ...
