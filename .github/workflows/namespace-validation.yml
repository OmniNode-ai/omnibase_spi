name: Namespace Isolation Validation

on:
  pull_request:
    branches: [ main, development ]

jobs:
  validate-namespace-isolation:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install Poetry
      uses: snok/install-poetry@v1.3.4
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-3.12-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install project
      run: poetry install --no-interaction

    - name: Run namespace isolation validation
      run: |
        chmod +x ./scripts/validate-namespace-isolation.sh
        ./scripts/validate-namespace-isolation.sh

    - name: Validate package can be built
      run: poetry build

    - name: Test package installation in isolation
      run: |
        # Create a clean virtual environment to test installation
        python -m venv /tmp/test-env
        source /tmp/test-env/bin/activate
        pip install dist/*.whl
        python -c "
        import sys
        print('Testing import isolation...')
        
        # Should be able to import omnibase.protocols without any external dependencies
        from omnibase.protocols import ProtocolSimpleSerializer
        from omnibase.protocols.types import LogLevel, ProtocolLogEntry
        
        # Verify no external omnibase modules are loaded
        external_modules = [name for name in sys.modules.keys() 
                          if name.startswith('omnibase.') and not name.startswith('omnibase.protocols')]
        
        if external_modules:
            print(f'FAILURE: External omnibase modules loaded: {external_modules}')
            sys.exit(1)
        else:
            print('SUCCESS: No external omnibase dependencies loaded!')
        "

  validate-documentation:
    runs-on: ubuntu-latest
    needs: validate-namespace-isolation
    
    steps:
    - uses: actions/checkout@v4

    - name: Validate README and documentation
      run: |
        # Ensure the README mentions the namespace isolation
        if ! grep -q "namespace.*isolat" README.md; then
          echo "WARNING: README should mention namespace isolation"
        fi
        
        # Check that version is consistent across files
        VERSION=$(grep '^version = ' pyproject.toml | cut -d'"' -f2)
        if ! grep -q "__version__ = \"$VERSION\"" src/omnibase/__init__.py; then
          echo "ERROR: Version mismatch between pyproject.toml and __init__.py"
          exit 1
        fi