{
  "summary": {
    "total_files": 83,
    "total_protocols": 420,
    "error_count": 299,
    "warning_count": 214,
    "info_count": 0,
    "execution_time": 0.10144901275634766,
    "validation_rules_applied": 16,
    "auto_fixes_applied": 0
  },
  "violations": [
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "line_number": 14,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "from omnibase_spi.protocols.types.protocol_core_types import ProtocolSemVer",
        "",
        "LiteralOnexStatus = Literal[\"ACTIVE\", \"INACTIVE\", \"ERROR\", \"UNKNOWN\"]",
        "LiteralContainerArtifactType = Literal[",
        "    \"nodes\", \"cli_tools\", \"runtimes\", \"adapters\", \"contracts\", \"packages\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "LiteralOnexStatus = Literal[\"ACTIVE\", \"INACTIVE\", \"ERROR\", \"UNKNOWN\"]",
        "LiteralContainerArtifactType = Literal[",
        "    \"nodes\", \"cli_tools\", \"runtimes\", \"adapters\", \"contracts\", \"packages\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolArtifactMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolArtifactMetadata(Protocol):",
        "    \"\"\"Protocol for artifact metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "line_number": 31,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolArtifactInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolArtifactInfo(Protocol):",
        "    \"\"\"Protocol for artifact information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 24,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "T = TypeVar(\"T\")",
        "TInterface = TypeVar(\"TInterface\")",
        "TImplementation = TypeVar(\"TImplementation\")",
        "LiteralServiceLifecycle = Literal["
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 25,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "T = TypeVar(\"T\")",
        "TInterface = TypeVar(\"TInterface\")",
        "TImplementation = TypeVar(\"TImplementation\")",
        "LiteralServiceLifecycle = Literal[",
        "    \"singleton\", \"transient\", \"scoped\", \"pooled\", \"lazy\", \"eager\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 26,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "TInterface = TypeVar(\"TInterface\")",
        "TImplementation = TypeVar(\"TImplementation\")",
        "LiteralServiceLifecycle = Literal[",
        "    \"singleton\", \"transient\", \"scoped\", \"pooled\", \"lazy\", \"eager\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"singleton\", \"transient\", \"scoped\", \"pooled\", \"lazy\", \"eager\"",
        "]",
        "ServiceLifecycle = LiteralServiceLifecycle",
        "LiteralServiceResolutionStatus = Literal[",
        "    \"resolved\", \"failed\", \"circular_dependency\", \"missing_dependency\", \"type_mismatch\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 30,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "ServiceLifecycle = LiteralServiceLifecycle",
        "LiteralServiceResolutionStatus = Literal[",
        "    \"resolved\", \"failed\", \"circular_dependency\", \"missing_dependency\", \"type_mismatch\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 33,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"resolved\", \"failed\", \"circular_dependency\", \"missing_dependency\", \"type_mismatch\"",
        "]",
        "ServiceResolutionStatus = LiteralServiceResolutionStatus",
        "LiteralInjectionScope = Literal[",
        "    \"request\", \"session\", \"thread\", \"process\", \"global\", \"custom\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 34,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "ServiceResolutionStatus = LiteralServiceResolutionStatus",
        "LiteralInjectionScope = Literal[",
        "    \"request\", \"session\", \"thread\", \"process\", \"global\", \"custom\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 37,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"request\", \"session\", \"thread\", \"process\", \"global\", \"custom\"",
        "]",
        "InjectionScope = LiteralInjectionScope",
        "ServiceHealthStatus = LiteralHealthStatus",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 38,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "InjectionScope = LiteralInjectionScope",
        "ServiceHealthStatus = LiteralHealthStatus",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 58,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceDependency' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceDependency(Protocol):",
        "    \"\"\"Protocol for service dependency information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 76,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceRegistration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceRegistration(Protocol):",
        "    \"\"\"Protocol for service registration information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 120,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolDependencyGraph' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolDependencyGraph(Protocol):",
        "    \"\"\"Protocol for dependency graph information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 133,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolInjectionContext' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolInjectionContext(Protocol):",
        "    \"\"\"Protocol for dependency injection context.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 148,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceRegistryStatus' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceRegistryStatus(Protocol):",
        "    \"\"\"Protocol for service registry status information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 167,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceValidator' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceValidator(Protocol):",
        "    \"\"\"Protocol for service validation operations.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 180,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceFactory' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceFactory(Protocol):",
        "    \"\"\"Protocol for service factory operations.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 191,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceRegistryConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceRegistryConfig(Protocol):",
        "    \"\"\"Protocol for service registry configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_cache_service.py",
      "line_number": 59,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCacheServiceProvider' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCacheServiceProvider(Protocol, Generic[T]):",
        "    \"\"\"Protocol for cache service provider.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 11,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "T = TypeVar(\"T\")",
        "LiteralProtocolCircuitBreakerState = Literal[\"closed\", \"open\", \"half_open\"]",
        "LiteralProtocolCircuitBreakerEvent = Literal[",
        "    \"success\", \"failure\", \"timeout\", \"state_change\", \"fallback_executed\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 12,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "T = TypeVar(\"T\")",
        "LiteralProtocolCircuitBreakerState = Literal[\"closed\", \"open\", \"half_open\"]",
        "LiteralProtocolCircuitBreakerEvent = Literal[",
        "    \"success\", \"failure\", \"timeout\", \"state_change\", \"fallback_executed\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 40,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCircuitBreakerMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCircuitBreakerMetrics(Protocol):",
        "    \"\"\"Real-time circuit breaker metrics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_configuration_manager.py",
      "line_number": 13,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "from omnibase_spi.protocols.types.protocol_core_types import ContextValue",
        "",
        "LiteralConfigurationEnvironment = Literal[",
        "    \"development\", \"staging\", \"production\", \"test\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_client.py",
      "line_number": 108,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHttpClientProvider' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHttpClientProvider(Protocol):",
        "    \"\"\"Protocol for HTTP client provider.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_client.py",
      "line_number": 50,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolKafkaClientProvider' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolKafkaClientProvider(Protocol):",
        "    \"\"\"Protocol for Kafka client provider.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "line_number": 24,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolNodeChangeCallback' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolNodeChangeCallback(Protocol):",
        "    \"\"\"Protocol for node change callback functions.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "line_number": 31,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWatchHandle' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWatchHandle(Protocol):",
        "    \"\"\"Protocol for watch handle objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "line_number": 39,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolNodeRegistryConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolNodeRegistryConfig(Protocol):",
        "    \"\"\"Protocol for node registry configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "line_number": 50,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolNodeInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolNodeInfo(Protocol):",
        "    \"\"\"Protocol for node information objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_reply.py",
      "line_number": 16,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "T = TypeVar(\"T\")",
        "R = TypeVar(\"R\")",
        "LiteralOnexReplyStatus = Literal[",
        "    \"success\", \"partial_success\", \"failure\", \"error\", \"timeout\", \"validation_error\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexContractData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexContractData(Protocol):",
        "    \"\"\"ONEX contract data structure protocol.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexSecurityContext' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexSecurityContext(Protocol):",
        "    \"\"\"ONEX security context data protocol.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 39,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexMetadata(Protocol):",
        "    \"\"\"ONEX metadata structure protocol.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexSchema' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexSchema(Protocol):",
        "    \"\"\"ONEX schema definition protocol.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 58,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexValidationReport' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexValidationReport(Protocol):",
        "    \"\"\"ONEX validation report protocol.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 68,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralOnexComplianceLevel = Literal[",
        "    \"fully_compliant\", \"partially_compliant\", \"non_compliant\", \"validation_error\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 71,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"fully_compliant\", \"partially_compliant\", \"non_compliant\", \"validation_error\"",
        "]",
        "LiteralValidationType = Literal[",
        "    \"envelope_structure\",",
        "    \"reply_structure\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 82,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexValidationResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexValidationResult(Protocol):",
        "    \"\"\"Result of Onex validation protocol.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/discovery/protocol_handler_discovery.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHandlerInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHandlerInfo(Protocol):",
        "    \"\"\"Protocol for node information objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_context_manager.py",
      "line_number": 13,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    from omnibase_spi.protocols.event_bus.protocol_event_bus import ProtocolEventBus",
        "",
        "TEventBus = TypeVar(\"TEventBus\", bound=\"ProtocolEventBus\", covariant=True)",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_types.py",
      "line_number": 6,
      "column_offset": 4,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    from omnibase_spi.protocols.types import ContextValue, ProtocolEvent",
        "else:",
        "    ContextValue = \"ContextValue\"",
        "    ProtocolEvent = \"ProtocolEvent\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_types.py",
      "line_number": 7,
      "column_offset": 4,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "else:",
        "    ContextValue = \"ContextValue\"",
        "    ProtocolEvent = \"ProtocolEvent\"",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_kafka_adapter.py",
      "line_number": 24,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "# Type aliases to avoid namespace violations",
        "EventBusHeaders = Any  # Generic headers type",
        "EventMessage = Any  # Generic event message type",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_kafka_adapter.py",
      "line_number": 25,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "# Type aliases to avoid namespace violations",
        "EventBusHeaders = Any  # Generic headers type",
        "EventMessage = Any  # Generic event message type",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_kafka_adapter.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolKafkaConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolKafkaConfig(Protocol):",
        "    \"\"\"Protocol for Kafka configuration parameters.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_redpanda_adapter.py",
      "line_number": 26,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "# Type aliases to avoid namespace violations",
        "EventBusHeaders = Any  # Generic headers type",
        "EventMessage = Any  # Generic event message type",
        "KafkaConfig = Any  # Generic Kafka configuration type"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_redpanda_adapter.py",
      "line_number": 27,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "# Type aliases to avoid namespace violations",
        "EventBusHeaders = Any  # Generic headers type",
        "EventMessage = Any  # Generic event message type",
        "KafkaConfig = Any  # Generic Kafka configuration type",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_redpanda_adapter.py",
      "line_number": 28,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "EventBusHeaders = Any  # Generic headers type",
        "EventMessage = Any  # Generic event message type",
        "KafkaConfig = Any  # Generic Kafka configuration type",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_type_handler.py",
      "line_number": 17,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStampOptions' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStampOptions(Protocol):",
        "    \"\"\"Protocol for stamping operation options.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_type_handler.py",
      "line_number": 25,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationOptions' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationOptions(Protocol):",
        "    \"\"\"Protocol for validation operation options.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_subsystem_client.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPSubsystemConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPSubsystemConfig(Protocol):",
        "    \"\"\"Protocol for MCP subsystem configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 23,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "if TYPE_CHECKING:",
        "    from datetime import datetime",
        "LiteralMemoryAccessLevel = Literal[",
        "    \"public\", \"private\", \"internal\", \"restricted\", \"confidential\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 26,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"public\", \"private\", \"internal\", \"restricted\", \"confidential\"",
        "]",
        "LiteralAnalysisType = Literal[",
        "    \"standard\", \"deep\", \"quick\", \"semantic\", \"pattern\", \"performance\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"standard\", \"deep\", \"quick\", \"semantic\", \"pattern\", \"performance\"",
        "]",
        "LiteralCompressionAlgorithm = Literal[\"gzip\", \"lz4\", \"zstd\", \"brotli\", \"deflate\"]",
        "LiteralErrorCategory = Literal[\"transient\", \"permanent\", \"validation\", \"authorization\"]",
        "LiteralAgentStatus = Literal["
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 30,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "LiteralCompressionAlgorithm = Literal[\"gzip\", \"lz4\", \"zstd\", \"brotli\", \"deflate\"]",
        "LiteralErrorCategory = Literal[\"transient\", \"permanent\", \"validation\", \"authorization\"]",
        "LiteralAgentStatus = Literal[",
        "    \"active\", \"inactive\", \"processing\", \"completed\", \"failed\", \"timeout\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 31,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralCompressionAlgorithm = Literal[\"gzip\", \"lz4\", \"zstd\", \"brotli\", \"deflate\"]",
        "LiteralErrorCategory = Literal[\"transient\", \"permanent\", \"validation\", \"authorization\"]",
        "LiteralAgentStatus = Literal[",
        "    \"active\", \"inactive\", \"processing\", \"completed\", \"failed\", \"timeout\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 34,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"active\", \"inactive\", \"processing\", \"completed\", \"failed\", \"timeout\"",
        "]",
        "LiteralWorkflowStatus = Literal[",
        "    \"pending\", \"running\", \"completed\", \"failed\", \"cancelled\", \"timeout\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 54,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryMetadata(ProtocolKeyValueStore, Protocol):",
        "    \"\"\"Protocol for memory metadata structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 66,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowConfiguration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowConfiguration(ProtocolKeyValueStore, Protocol):",
        "    \"\"\"Protocol for workflow configuration structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 78,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAnalysisParameters' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAnalysisParameters(ProtocolKeyValueStore, Protocol):",
        "    \"\"\"Protocol for analysis parameter structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 90,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAggregationCriteria' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAggregationCriteria(ProtocolKeyValueStore, Protocol):",
        "    \"\"\"Protocol for aggregation criteria structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 102,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCoordinationMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCoordinationMetadata(Protocol):",
        "    \"\"\"Protocol for coordination metadata structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 114,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAnalysisResults' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAnalysisResults(Protocol):",
        "    \"\"\"Protocol for analysis result structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 126,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAggregatedData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAggregatedData(Protocol):",
        "    \"\"\"Protocol for aggregated data structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 138,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryErrorContext' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryErrorContext(Protocol):",
        "    \"\"\"Protocol for error context structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 150,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPageInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPageInfo(Protocol):",
        "    \"\"\"Protocol for pagination information structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 162,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCustomMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCustomMetrics(Protocol):",
        "    \"\"\"Protocol for custom metrics structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 174,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAggregationSummary' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAggregationSummary(Protocol):",
        "    \"\"\"Protocol for aggregation summary structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 188,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryRecord' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryRecord(Protocol):",
        "    \"\"\"Protocol for memory record data structure.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 208,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSearchResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSearchResult(Protocol):",
        "    \"\"\"Protocol for search result data structure.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 220,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSearchFilters' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSearchFilters(Protocol):",
        "    \"\"\"Protocol for search filter specifications.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 234,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAgentStatusMap' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAgentStatusMap(Protocol):",
        "    \"\"\"Protocol for agent status mapping structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 253,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAgentResponseMap' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAgentResponseMap(Protocol):",
        "    \"\"\"Protocol for agent response mapping structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 267,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolErrorCategoryMap' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolErrorCategoryMap(Protocol):",
        "    \"\"\"Protocol for error category counting structures.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 15,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "if TYPE_CHECKING:",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "    from .protocol_memory_requests import (",
        "        ProtocolAgentCoordinationRequest,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 16,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_requests' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "if TYPE_CHECKING:",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "    from .protocol_memory_requests import (",
        "        ProtocolAgentCoordinationRequest,",
        "        ProtocolWorkflowExecutionRequest,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 16,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_requests' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "if TYPE_CHECKING:",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "    from .protocol_memory_requests import (",
        "        ProtocolAgentCoordinationRequest,",
        "        ProtocolWorkflowExecutionRequest,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 20,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_responses' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "        ProtocolWorkflowExecutionRequest,",
        "    )",
        "    from .protocol_memory_responses import (",
        "        ProtocolAgentCoordinationResponse,",
        "        ProtocolMemoryResponse,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 20,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_responses' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "        ProtocolWorkflowExecutionRequest,",
        "    )",
        "    from .protocol_memory_responses import (",
        "        ProtocolAgentCoordinationResponse,",
        "        ProtocolMemoryResponse,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 20,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_responses' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "        ProtocolWorkflowExecutionRequest,",
        "    )",
        "    from .protocol_memory_responses import (",
        "        ProtocolAgentCoordinationResponse,",
        "        ProtocolMemoryResponse,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 25,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_security' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "        ProtocolWorkflowExecutionResponse,",
        "    )",
        "    from .protocol_memory_security import ProtocolMemorySecurityContext",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 16,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 23,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "from uuid import UUID",
        "",
        "from .protocol_memory_base import LiteralErrorCategory",
        "",
        "if TYPE_CHECKING:"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 28,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolErrorCategoryMap,",
        "        ProtocolMemoryErrorContext,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 28,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolErrorCategoryMap,",
        "        ProtocolMemoryErrorContext,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 72,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryValidationError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryValidationError(ProtocolMemoryError, Protocol):",
        "    \"\"\"Protocol for memory validation errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 82,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryAuthorizationError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryAuthorizationError(ProtocolMemoryError, Protocol):",
        "    \"\"\"Protocol for memory authorization errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 93,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryNotFoundError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryNotFoundError(ProtocolMemoryError, Protocol):",
        "    \"\"\"Protocol for memory not found errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 103,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryTimeoutError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryTimeoutError(ProtocolMemoryError, Protocol):",
        "    \"\"\"Protocol for memory operation timeout errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 115,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryCapacityError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryCapacityError(ProtocolMemoryError, Protocol):",
        "    \"\"\"Protocol for memory capacity/resource errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 127,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryCorruptionError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryCorruptionError(ProtocolMemoryError, Protocol):",
        "    \"\"\"Protocol for memory corruption/integrity errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 138,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolErrorRecoveryStrategy' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolErrorRecoveryStrategy(Protocol):",
        "    \"\"\"Protocol for error recovery strategies.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 152,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryErrorRecoveryResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryErrorRecoveryResponse(Protocol):",
        "    \"\"\"Protocol for error recovery operation responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 170,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchErrorSummary' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchErrorSummary(Protocol):",
        "    \"\"\"Protocol for batch operation error summaries.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "line_number": 185,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchErrorResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchErrorResponse(Protocol):",
        "    \"\"\"Protocol for batch operation error responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 27,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        LiteralAnalysisType,",
        "        ProtocolAggregatedData,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 39,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryRequest(Protocol):",
        "    \"\"\"Base protocol for all memory operation requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryStoreRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryStoreRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for memory storage requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 61,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryRetrieveRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryRetrieveRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for memory retrieval requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 72,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryListRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryListRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for paginated memory list requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 83,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchMemoryStoreRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchMemoryStoreRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for batch memory storage requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 98,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchMemoryRetrieveRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchMemoryRetrieveRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for batch memory retrieval requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 110,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSemanticSearchRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSemanticSearchRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for semantic search requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 123,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPatternAnalysisRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPatternAnalysisRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for pattern analysis requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 134,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEmbeddingRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEmbeddingRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for embedding generation requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 142,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolConsolidationRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolConsolidationRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for memory consolidation requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 150,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAggregationRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAggregationRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for memory aggregation requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 159,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowExecutionRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowExecutionRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for workflow execution requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 169,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAgentCoordinationRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAgentCoordinationRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for agent coordination requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 179,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPaginationRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPaginationRequest(Protocol):",
        "    \"\"\"Protocol for paginated request parameters.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 193,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryMetricsRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryMetricsRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for metrics collection requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 206,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStreamingMemoryRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStreamingMemoryRequest(ProtocolMemoryRequest, Protocol):",
        "    \"\"\"Protocol for streaming memory operations.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 217,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStreamingRetrieveRequest' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStreamingRetrieveRequest(ProtocolStreamingMemoryRequest, Protocol):",
        "    \"\"\"Protocol for streaming memory retrieval requests.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 25,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_errors' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "from uuid import UUID",
        "",
        "from .protocol_memory_errors import ProtocolMemoryError",
        "",
        "if TYPE_CHECKING:"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 30,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import (",
        "        ProtocolAgentResponseMap,",
        "        ProtocolAgentStatusMap,"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 45,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryResponse(Protocol):",
        "    \"\"\"Base protocol for all memory operation responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 57,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryStoreResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryStoreResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for memory storage responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 65,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryRetrieveResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryRetrieveResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for memory retrieval responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 75,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryListResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryListResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for paginated memory list responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 83,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchOperationResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchOperationResult(Protocol):",
        "    \"\"\"Protocol for individual batch operation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 96,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchMemoryStoreResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchMemoryStoreResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for batch memory storage responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 110,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBatchMemoryRetrieveResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBatchMemoryRetrieveResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for batch memory retrieval responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 120,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSemanticSearchResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSemanticSearchResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for semantic search responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 131,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPatternAnalysisResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPatternAnalysisResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for pattern analysis responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 142,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEmbeddingResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEmbeddingResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for embedding generation responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 151,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolConsolidationResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolConsolidationResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for memory consolidation responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 159,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAggregationResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAggregationResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for memory aggregation responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 167,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowExecutionResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowExecutionResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for workflow execution responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 178,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAgentCoordinationResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAgentCoordinationResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for agent coordination responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 188,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPaginationResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPaginationResponse(Protocol):",
        "    \"\"\"Protocol for paginated response metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 202,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryMetrics(Protocol):",
        "    \"\"\"Protocol for memory system performance metrics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "line_number": 220,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMemoryMetricsResponse' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMemoryMetricsResponse(ProtocolMemoryResponse, Protocol):",
        "    \"\"\"Protocol for metrics collection responses.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 16,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "    from datetime import datetime",
        "",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "",
        "@runtime_checkable"
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 14,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_base' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "if TYPE_CHECKING:",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "    from .protocol_memory_security import ProtocolMemorySecurityContext",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 15,
      "column_offset": 4,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_memory_security' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "if TYPE_CHECKING:",
        "    from .protocol_memory_base import ProtocolMemoryMetadata",
        "    from .protocol_memory_security import ProtocolMemorySecurityContext",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 14,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        ")",
        "",
        "LiteralContainerStatus = Literal[\"initializing\", \"ready\", \"error\", \"disposed\"]",
        "LiteralServiceLifecycle = Literal[\"singleton\", \"transient\", \"scoped\", \"factory\"]",
        "LiteralDependencyScope = Literal[\"required\", \"optional\", \"lazy\", \"eager\"]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "LiteralContainerStatus = Literal[\"initializing\", \"ready\", \"error\", \"disposed\"]",
        "LiteralServiceLifecycle = Literal[\"singleton\", \"transient\", \"scoped\", \"factory\"]",
        "LiteralDependencyScope = Literal[\"required\", \"optional\", \"lazy\", \"eager\"]",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 16,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralContainerStatus = Literal[\"initializing\", \"ready\", \"error\", \"disposed\"]",
        "LiteralServiceLifecycle = Literal[\"singleton\", \"transient\", \"scoped\", \"factory\"]",
        "LiteralDependencyScope = Literal[\"required\", \"optional\", \"lazy\", \"eager\"]",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolContainer' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolContainer(Protocol):",
        "    \"\"\"Protocol for dependency injection containers.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 35,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolDependencySpec' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolDependencySpec(Protocol):",
        "    \"\"\"Protocol for dependency specification objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 59,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRegistryWrapper' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRegistryWrapper(Protocol):",
        "    \"\"\"Protocol for registry wrapper objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 68,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolContainerResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolContainerResult(Protocol):",
        "    \"\"\"Protocol for container creation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 92,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolContainerFactory' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolContainerFactory(Protocol):",
        "    \"\"\"Protocol for container factory objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 116,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolContainerConfiguration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolContainerConfiguration(Protocol):",
        "    \"\"\"Protocol for container configuration objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 44,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "ProtocolDateTime = datetime",
        "LiteralLogLevel = Literal[",
        "    \"TRACE\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\", \"FATAL\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 45,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "ProtocolDateTime = datetime",
        "LiteralLogLevel = Literal[",
        "    \"TRACE\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\", \"FATAL\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 48,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"TRACE\", \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\", \"CRITICAL\", \"FATAL\"",
        "]",
        "LiteralNodeType = Literal[\"COMPUTE\", \"EFFECT\", \"REDUCER\", \"ORCHESTRATOR\"]",
        "LiteralHealthStatus = Literal[",
        "    \"healthy\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "LiteralNodeType = Literal[\"COMPUTE\", \"EFFECT\", \"REDUCER\", \"ORCHESTRATOR\"]",
        "LiteralHealthStatus = Literal[",
        "    \"healthy\",",
        "    \"degraded\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 111,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "ContextValue = ProtocolContextValue",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 341,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralBaseStatus = Literal[",
        "    \"pending\", \"processing\", \"completed\", \"failed\", \"cancelled\", \"skipped\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 344,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"pending\", \"processing\", \"completed\", \"failed\", \"cancelled\", \"skipped\"",
        "]",
        "LiteralNodeStatus = Literal[\"active\", \"inactive\", \"error\", \"pending\"]",
        "LiteralExecutionMode = Literal[\"direct\", \"inmemory\", \"kafka\"]",
        "LiteralOperationStatus = Literal["
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 345,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "LiteralNodeStatus = Literal[\"active\", \"inactive\", \"error\", \"pending\"]",
        "LiteralExecutionMode = Literal[\"direct\", \"inmemory\", \"kafka\"]",
        "LiteralOperationStatus = Literal[",
        "    \"success\", \"failed\", \"in_progress\", \"cancelled\", \"pending\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 346,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralNodeStatus = Literal[\"active\", \"inactive\", \"error\", \"pending\"]",
        "LiteralExecutionMode = Literal[\"direct\", \"inmemory\", \"kafka\"]",
        "LiteralOperationStatus = Literal[",
        "    \"success\", \"failed\", \"in_progress\", \"cancelled\", \"pending\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 349,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"success\", \"failed\", \"in_progress\", \"cancelled\", \"pending\"",
        "]",
        "LiteralValidationLevel = Literal[\"BASIC\", \"STANDARD\", \"COMPREHENSIVE\", \"PARANOID\"]",
        "LiteralValidationMode = Literal[",
        "    \"strict\", \"lenient\", \"smoke\", \"regression\", \"integration\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 350,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "LiteralValidationLevel = Literal[\"BASIC\", \"STANDARD\", \"COMPREHENSIVE\", \"PARANOID\"]",
        "LiteralValidationMode = Literal[",
        "    \"strict\", \"lenient\", \"smoke\", \"regression\", \"integration\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 383,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolActionPayload' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolActionPayload(Protocol):",
        "    \"\"\"Protocol for action payload with specific data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 396,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAction' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAction(Protocol):",
        "    \"\"\"Protocol for reducer actions.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 409,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolState' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolState(Protocol):",
        "    \"\"\"Protocol for reducer state.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 422,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolNodeMetadataBlock' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolNodeMetadataBlock(Protocol):",
        "    \"\"\"Protocol for node metadata block objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 442,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSchemaObject' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSchemaObject(Protocol):",
        "    \"\"\"Protocol for schema data objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 498,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSystemEvent' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSystemEvent(Protocol):",
        "    \"\"\"Protocol for system events.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 562,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceMetadata(Protocol):",
        "    \"\"\"Protocol for service metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 576,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceInstance' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceInstance(Protocol):",
        "    \"\"\"Protocol for service instance information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 593,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolServiceHealthStatus' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolServiceHealthStatus(Protocol):",
        "    \"\"\"Protocol for service health status.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 607,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCheckpointData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCheckpointData(Protocol):",
        "    \"\"\"Protocol for checkpoint data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 622,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStorageCredentials' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStorageCredentials(Protocol):",
        "    \"\"\"Protocol for storage credentials.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 634,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStorageConfiguration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStorageConfiguration(Protocol):",
        "    \"\"\"Protocol for storage configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 648,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStorageResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStorageResult(Protocol):",
        "    \"\"\"Protocol for storage operation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 662,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStorageListResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStorageListResult(Protocol):",
        "    \"\"\"Protocol for storage list operation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 677,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolStorageHealthStatus' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolStorageHealthStatus(Protocol):",
        "    \"\"\"Protocol for storage health status.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 690,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralErrorRecoveryStrategy = Literal[",
        "    \"retry\", \"fallback\", \"abort\", \"circuit_breaker\", \"compensation\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 693,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"retry\", \"fallback\", \"abort\", \"circuit_breaker\", \"compensation\"",
        "]",
        "LiteralErrorSeverity = Literal[\"low\", \"medium\", \"high\", \"critical\"]",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 697,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolErrorContext' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolErrorContext(Protocol):",
        "    \"\"\"Protocol for error context information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 712,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRecoveryAction' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRecoveryAction(Protocol):",
        "    \"\"\"Protocol for error recovery action information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 727,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolErrorResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolErrorResult(Protocol):",
        "    \"\"\"Protocol for standardized error results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 744,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolVersionInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolVersionInfo(Protocol):",
        "    \"\"\"Protocol for version metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 759,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCompatibilityCheck' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCompatibilityCheck(Protocol):",
        "    \"\"\"Protocol for compatibility checking results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 771,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralHealthCheckLevel = Literal[",
        "    \"quick\", \"basic\", \"standard\", \"thorough\", \"comprehensive\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 774,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"quick\", \"basic\", \"standard\", \"thorough\", \"comprehensive\"",
        "]",
        "LiteralHealthDimension = Literal[",
        "    \"availability\", \"performance\", \"functionality\", \"data_integrity\", \"security\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 839,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHealthMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHealthMetrics(Protocol):",
        "    \"\"\"Protocol for health check metrics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 856,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHealthCheck' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHealthCheck(Protocol):",
        "    \"\"\"Protocol for standardized health checks.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 875,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHealthMonitoring' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHealthMonitoring(Protocol):",
        "    \"\"\"Protocol for health monitoring configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 891,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMetricsPoint' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMetricsPoint(Protocol):",
        "    \"\"\"Protocol for individual metrics points.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 907,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTraceSpan' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTraceSpan(Protocol):",
        "    \"\"\"Protocol for distributed tracing spans.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 926,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAuditEvent' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAuditEvent(Protocol):",
        "    \"\"\"Protocol for audit events.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 988,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolIdentifiable' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolIdentifiable(Protocol):",
        "    \"\"\"Protocol for objects that have an ID.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 998,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolNameable' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolNameable(Protocol):",
        "    \"\"\"Protocol for objects that have a name.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1008,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolConfigurable' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolConfigurable(Protocol):",
        "    \"\"\"Protocol for objects that can be configured.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1017,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolExecutable' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolExecutable(Protocol):",
        "    \"\"\"Protocol for objects that can be executed.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1026,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMetadataProvider' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMetadataProvider(Protocol):",
        "    \"\"\"Protocol for objects that provide metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1034,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralRetryBackoffStrategy = Literal[",
        "    \"fixed\", \"linear\", \"exponential\", \"fibonacci\", \"jitter\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1037,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"fixed\", \"linear\", \"exponential\", \"fibonacci\", \"jitter\"",
        "]",
        "LiteralRetryCondition = Literal[",
        "    \"always\", \"never\", \"on_error\", \"on_timeout\", \"on_network\", \"on_transient\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1043,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRetryConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRetryConfig(Protocol):",
        "    \"\"\"Protocol for retry configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1059,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRetryPolicy' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRetryPolicy(Protocol):",
        "    \"\"\"Protocol for retry policy configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1074,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRetryAttempt' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRetryAttempt(Protocol):",
        "    \"\"\"Protocol for retry attempt records.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1090,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRetryResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRetryResult(Protocol):",
        "    \"\"\"Protocol for retry operation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1105,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralTimeBasedType = Literal[\"duration\", \"timeout\", \"interval\", \"deadline\"]",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1125,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTimeout' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTimeout(Protocol):",
        "    \"\"\"Protocol for timeout configuration and tracking.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1140,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolDuration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolDuration(Protocol):",
        "    \"\"\"Protocol for duration measurement and tracking.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1154,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralAnalyticsTimeWindow = Literal[",
        "    \"real_time\", \"hourly\", \"daily\", \"weekly\", \"monthly\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1157,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"real_time\", \"hourly\", \"daily\", \"weekly\", \"monthly\"",
        "]",
        "LiteralAnalyticsMetricType = Literal[\"counter\", \"gauge\", \"histogram\", \"summary\"]",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1161,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAnalyticsMetric' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAnalyticsMetric(Protocol):",
        "    \"\"\"Protocol for individual analytics metrics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1178,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAnalyticsProvider' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAnalyticsProvider(Protocol):",
        "    \"\"\"Protocol for analytics data providers.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1194,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolAnalyticsSummary' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolAnalyticsSummary(Protocol):",
        "    \"\"\"Protocol for analytics summary reports.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1210,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralPerformanceCategory = Literal[",
        "    \"latency\", \"throughput\", \"resource\", \"error\", \"availability\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1216,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPerformanceMetric' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPerformanceMetric(Protocol):",
        "    \"\"\"Protocol for performance metric data points.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1234,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolPerformanceMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolPerformanceMetrics(Protocol):",
        "    \"\"\"Protocol for performance metrics collection.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1249,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralConnectionState = Literal[",
        "    \"disconnected\", \"connecting\", \"connected\", \"reconnecting\", \"failed\", \"closing\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1255,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolConnectionConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolConnectionConfig(Protocol):",
        "    \"\"\"Protocol for connection configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1272,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolConnectionStatus' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolConnectionStatus(Protocol):",
        "    \"\"\"Protocol for connection status tracking.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1287,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralValidationSeverity = Literal[\"error\", \"warning\", \"info\"]",
        "LiteralValidationCategory = Literal[",
        "    \"syntax\", \"semantic\", \"style\", \"security\", \"performance\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1288,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "LiteralValidationSeverity = Literal[\"error\", \"warning\", \"info\"]",
        "LiteralValidationCategory = Literal[",
        "    \"syntax\", \"semantic\", \"style\", \"security\", \"performance\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        ")",
        "",
        "LiteralDiscoveryStatus = Literal[\"found\", \"not_found\", \"error\", \"timeout\"]",
        "LiteralHandlerStatus = Literal[\"available\", \"busy\", \"offline\", \"error\"]",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 16,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "LiteralDiscoveryStatus = Literal[\"found\", \"not_found\", \"error\", \"timeout\"]",
        "LiteralHandlerStatus = Literal[\"available\", \"busy\", \"offline\", \"error\"]",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 56,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "CapabilityValue = ProtocolCapabilityValue",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 60,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHandlerCapability' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHandlerCapability(Protocol):",
        "    \"\"\"Protocol for node capability objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 82,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolDiscoveryQuery' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolDiscoveryQuery(Protocol):",
        "    \"\"\"Protocol for discovery query objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 93,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolDiscoveryResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolDiscoveryResult(Protocol):",
        "    \"\"\"Protocol for discovery result objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 104,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHandlerRegistration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHandlerRegistration(Protocol):",
        "    \"\"\"Protocol for node registration objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 28,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventStringData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventStringData(ProtocolEventData, Protocol):",
        "    \"\"\"Protocol for string-based event data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 35,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventStringListData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventStringListData(ProtocolEventData, Protocol):",
        "    \"\"\"Protocol for string list event data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 42,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventStringDictData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventStringDictData(ProtocolEventData, Protocol):",
        "    \"\"\"Protocol for string dictionary event data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 48,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "EventStatus = LiteralBaseStatus",
        "LiteralAuthStatus = Literal[\"authenticated\", \"unauthenticated\", \"expired\", \"invalid\"]",
        "LiteralEventPriority = Literal[\"low\", \"normal\", \"high\", \"critical\"]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "EventStatus = LiteralBaseStatus",
        "LiteralAuthStatus = Literal[\"authenticated\", \"unauthenticated\", \"expired\", \"invalid\"]",
        "LiteralEventPriority = Literal[\"low\", \"normal\", \"high\", \"critical\"]",
        "MessageKey = bytes | None"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 50,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "EventStatus = LiteralBaseStatus",
        "LiteralAuthStatus = Literal[\"authenticated\", \"unauthenticated\", \"expired\", \"invalid\"]",
        "LiteralEventPriority = Literal[\"low\", \"normal\", \"high\", \"critical\"]",
        "MessageKey = bytes | None",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 51,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralAuthStatus = Literal[\"authenticated\", \"unauthenticated\", \"expired\", \"invalid\"]",
        "LiteralEventPriority = Literal[\"low\", \"normal\", \"high\", \"critical\"]",
        "MessageKey = bytes | None",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 55,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEvent' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEvent(Protocol):",
        "    \"\"\"Protocol for event objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 68,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventResult(Protocol):",
        "    \"\"\"Protocol for event processing results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 80,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSecurityContext' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSecurityContext(Protocol):",
        "    \"\"\"Protocol for security context objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 92,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventSubscription' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventSubscription(Protocol):",
        "    \"\"\"Protocol for event subscriptions.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 104,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexEvent' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexEvent(Protocol):",
        "    \"\"\"Protocol for ONEX system events.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 162,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "EventMessage = \"ProtocolEventMessage\"",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 16,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        ")",
        "",
        "LiteralFileOperation = Literal[\"read\", \"write\", \"append\", \"delete\", \"move\", \"copy\"]",
        "LiteralFileStatus = Literal[\"exists\", \"missing\", \"locked\", \"corrupted\", \"accessible\"]",
        "ProcessingStatus = LiteralBaseStatus"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 17,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "LiteralFileOperation = Literal[\"read\", \"write\", \"append\", \"delete\", \"move\", \"copy\"]",
        "LiteralFileStatus = Literal[\"exists\", \"missing\", \"locked\", \"corrupted\", \"accessible\"]",
        "ProcessingStatus = LiteralBaseStatus",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralFileOperation = Literal[\"read\", \"write\", \"append\", \"delete\", \"move\", \"copy\"]",
        "LiteralFileStatus = Literal[\"exists\", \"missing\", \"locked\", \"corrupted\", \"accessible\"]",
        "ProcessingStatus = LiteralBaseStatus",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 38,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolBinaryFileContent' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolBinaryFileContent(ProtocolFileContent, Protocol):",
        "    \"\"\"Protocol for binary file content (binary files).\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 44,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "FileContent = ProtocolFileContent",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 59,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolFileInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolFileInfo(Protocol):",
        "    \"\"\"Protocol for file information objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 71,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolFileContentObject' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolFileContentObject(Protocol):",
        "    \"\"\"Protocol for file content objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 82,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolProcessingResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolProcessingResult(Protocol):",
        "    \"\"\"Protocol for file processing results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 94,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolFileFilter' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolFileFilter(Protocol):",
        "    \"\"\"Protocol for file filtering criteria.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 106,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolFileTypeResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolFileTypeResult(Protocol):",
        "    \"\"\"Protocol for file type detection results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 118,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHandlerMatch' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHandlerMatch(Protocol):",
        "    \"\"\"Protocol for node matching results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 129,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCanHandleResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCanHandleResult(Protocol):",
        "    \"\"\"Protocol for can handle determination results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 139,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolHandlerMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolHandlerMetadata(Protocol):",
        "    \"\"\"Protocol for node metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 153,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolExtractedBlock' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolExtractedBlock(Protocol):",
        "    \"\"\"Protocol for extracted block data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 165,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolSerializedBlock' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolSerializedBlock(Protocol):",
        "    \"\"\"Protocol for serialized block data.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 185,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolOnexResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolOnexResult(Protocol):",
        "    \"\"\"Protocol for ONEX operation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "if TYPE_CHECKING:",
        "    pass",
        "LiteralMCPToolType = Literal[\"function\", \"resource\", \"prompt\", \"sampling\", \"completion\"]",
        "LiteralMCPParameterType = Literal[",
        "    \"string\", \"number\", \"integer\", \"boolean\", \"array\", \"object\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    pass",
        "LiteralMCPToolType = Literal[\"function\", \"resource\", \"prompt\", \"sampling\", \"completion\"]",
        "LiteralMCPParameterType = Literal[",
        "    \"string\", \"number\", \"integer\", \"boolean\", \"array\", \"object\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 24,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"string\", \"number\", \"integer\", \"boolean\", \"array\", \"object\"",
        "]",
        "LiteralMCPExecutionStatus = Literal[",
        "    \"pending\", \"running\", \"completed\", \"failed\", \"timeout\", \"cancelled\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 27,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"pending\", \"running\", \"completed\", \"failed\", \"timeout\", \"cancelled\"",
        "]",
        "LiteralMCPSubsystemType = Literal[",
        "    \"compute\", \"storage\", \"analytics\", \"integration\", \"workflow\", \"ui\", \"api\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 30,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"compute\", \"storage\", \"analytics\", \"integration\", \"workflow\", \"ui\", \"api\"",
        "]",
        "LiteralMCPLifecycleState = Literal[",
        "    \"initializing\", \"active\", \"idle\", \"busy\", \"degraded\", \"shutting_down\", \"terminated\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 33,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"initializing\", \"active\", \"idle\", \"busy\", \"degraded\", \"shutting_down\", \"terminated\"",
        "]",
        "LiteralMCPConnectionStatus = Literal[\"connected\", \"disconnected\", \"connecting\", \"error\"]",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 37,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPToolParameter' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPToolParameter(Protocol):",
        "    \"\"\"Protocol for MCP tool parameter definition.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 55,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPToolDefinition' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPToolDefinition(Protocol):",
        "    \"\"\"Protocol for MCP tool definition.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 75,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPSubsystemMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPSubsystemMetadata(Protocol):",
        "    \"\"\"Protocol for MCP subsystem metadata.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 121,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPToolExecution' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPToolExecution(Protocol):",
        "    \"\"\"Protocol for MCP tool execution tracking.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 142,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPRegistryMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPRegistryMetrics(Protocol):",
        "    \"\"\"Protocol for MCP registry metrics and statistics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 166,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPRegistryStatus' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPRegistryStatus(Protocol):",
        "    \"\"\"Protocol for overall MCP registry status.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 185,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPRegistryConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPRegistryConfig(Protocol):",
        "    \"\"\"Protocol for MCP registry configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 208,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPHealthCheck' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPHealthCheck(Protocol):",
        "    \"\"\"Protocol for MCP subsystem health check result.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 224,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPDiscoveryInfo' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPDiscoveryInfo(Protocol):",
        "    \"\"\"Protocol for MCP service discovery information.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 239,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPValidationError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPValidationError(Protocol):",
        "    \"\"\"Protocol for MCP validation errors.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 253,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolMCPValidationResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolMCPValidationResult(Protocol):",
        "    \"\"\"Protocol for MCP validation results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "line_number": 266,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolToolClass' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolToolClass(Protocol):",
        "    \"\"\"Protocol for tool class objects in MCP systems.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 33,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowStringValue' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowStringValue(ProtocolWorkflowValue, Protocol):",
        "    \"\"\"Protocol for string-based workflow values.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 44,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowStringListValue' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowStringListValue(ProtocolWorkflowValue, Protocol):",
        "    \"\"\"Protocol for string list workflow values.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 55,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowStringDictValue' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowStringDictValue(ProtocolWorkflowValue, Protocol):",
        "    \"\"\"Protocol for string dictionary workflow values.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 87,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "T_WorkflowValue = TypeVar(\"T_WorkflowValue\", str, int, float, bool)",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 91,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTypedWorkflowData' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTypedWorkflowData(Generic[T_WorkflowValue], Protocol):",
        "    \"\"\"Protocol for strongly typed workflow data values.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 101,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "",
        "LiteralWorkflowState = Literal[",
        "    \"pending\",",
        "    \"initializing\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 115,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"compensated\",",
        "]",
        "LiteralTaskState = Literal[",
        "    \"pending\",",
        "    \"scheduled\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 128,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"blocked\",",
        "]",
        "LiteralTaskType = Literal[\"compute\", \"effect\", \"orchestrator\", \"reducer\"]",
        "LiteralExecutionSemantics = Literal[\"await\", \"fire_and_forget\", \"async_await\"]",
        "LiteralRetryPolicy = Literal[\"none\", \"fixed\", \"exponential\", \"linear\", \"custom\"]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 129,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "LiteralTaskType = Literal[\"compute\", \"effect\", \"orchestrator\", \"reducer\"]",
        "LiteralExecutionSemantics = Literal[\"await\", \"fire_and_forget\", \"async_await\"]",
        "LiteralRetryPolicy = Literal[\"none\", \"fixed\", \"exponential\", \"linear\", \"custom\"]",
        "LiteralWorkflowEventType = Literal["
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 130,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralTaskType = Literal[\"compute\", \"effect\", \"orchestrator\", \"reducer\"]",
        "LiteralExecutionSemantics = Literal[\"await\", \"fire_and_forget\", \"async_await\"]",
        "LiteralRetryPolicy = Literal[\"none\", \"fixed\", \"exponential\", \"linear\", \"custom\"]",
        "LiteralWorkflowEventType = Literal[",
        "    \"workflow.created\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 131,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralExecutionSemantics = Literal[\"await\", \"fire_and_forget\", \"async_await\"]",
        "LiteralRetryPolicy = Literal[\"none\", \"fixed\", \"exponential\", \"linear\", \"custom\"]",
        "LiteralWorkflowEventType = Literal[",
        "    \"workflow.created\",",
        "    \"workflow.started\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 151,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    \"compensation.completed\",",
        "]",
        "LiteralTimeoutType = Literal[\"execution\", \"idle\", \"total\", \"heartbeat\"]",
        "LiteralTaskPriority = Literal[\"low\", \"normal\", \"high\", \"critical\", \"urgent\"]",
        "LiteralIsolationLevel = Literal["
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 152,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "]",
        "LiteralTimeoutType = Literal[\"execution\", \"idle\", \"total\", \"heartbeat\"]",
        "LiteralTaskPriority = Literal[\"low\", \"normal\", \"high\", \"critical\", \"urgent\"]",
        "LiteralIsolationLevel = Literal[",
        "    \"read_uncommitted\", \"read_committed\", \"repeatable_read\", \"serializable\""
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 153,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "LiteralTimeoutType = Literal[\"execution\", \"idle\", \"total\", \"heartbeat\"]",
        "LiteralTaskPriority = Literal[\"low\", \"normal\", \"high\", \"critical\", \"urgent\"]",
        "LiteralIsolationLevel = Literal[",
        "    \"read_uncommitted\", \"read_committed\", \"repeatable_read\", \"serializable\"",
        "]"
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 159,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowMetadata' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowMetadata(Protocol):",
        "    \"\"\"Protocol for workflow metadata objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 178,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRetryConfiguration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRetryConfiguration(Protocol):",
        "    \"\"\"Protocol for retry configuration objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 196,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTimeoutConfiguration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTimeoutConfiguration(Protocol):",
        "    \"\"\"Protocol for timeout configuration objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 211,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTaskDependency' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTaskDependency(Protocol):",
        "    \"\"\"Protocol for task dependency objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 243,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTaskConfiguration' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTaskConfiguration(Protocol):",
        "    \"\"\"Protocol for task configuration objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 287,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowSnapshot' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowSnapshot(Protocol):",
        "    \"\"\"Protocol for workflow snapshot objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 305,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolTaskResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolTaskResult(Protocol):",
        "    \"\"\"Protocol for task execution results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 326,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolCompensationAction' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolCompensationAction(Protocol):",
        "    \"\"\"Protocol for compensation action objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 342,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolWorkflowDefinition' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolWorkflowDefinition(Protocol):",
        "    \"\"\"Protocol for workflow definition objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 362,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolNodeCapability' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolNodeCapability(Protocol):",
        "    \"\"\"Protocol for node capability objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 395,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolRecoveryPoint' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolRecoveryPoint(Protocol):",
        "    \"\"\"Protocol for recovery point objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 413,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolReplayStrategy' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolReplayStrategy(Protocol):",
        "    \"\"\"Protocol for replay strategy objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 429,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventStream' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventStream(Protocol):",
        "    \"\"\"Protocol for event stream objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 447,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolEventProjection' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolEventProjection(Protocol):",
        "    \"\"\"Protocol for event projection objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "line_number": 11,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_validation' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "from typing import List, Protocol, runtime_checkable",
        "",
        "from .protocol_validation import ProtocolValidationResult",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolComplianceRule' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolComplianceRule(Protocol):",
        "    \"\"\"Protocol for compliance rule definition.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "line_number": 32,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolComplianceViolation' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolComplianceViolation(Protocol):",
        "    \"\"\"Protocol for compliance violation representation.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolONEXStandards' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolONEXStandards(Protocol):",
        "    \"\"\"Protocol for ONEX ecosystem standards.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "line_number": 69,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolArchitectureCompliance' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolArchitectureCompliance(Protocol):",
        "    \"\"\"Protocol for architectural compliance checking.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "line_number": 85,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolComplianceReport' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolComplianceReport(Protocol):",
        "    \"\"\"Protocol for comprehensive compliance report.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_import_validator.py",
      "line_number": 11,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_validation' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "from typing import Any, Protocol, runtime_checkable",
        "",
        "from .protocol_validation import ProtocolValidationResult",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_import_validator.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolImportValidationConfig' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolImportValidationConfig(Protocol):",
        "    \"\"\"Protocol for import validation configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_import_validator.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolImportAnalysis' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolImportAnalysis(Protocol):",
        "    \"\"\"Protocol for import analysis results.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "line_number": 11,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_validation' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "from typing import Protocol, runtime_checkable",
        "",
        "from .protocol_validation import ProtocolValidationResult",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolQualityMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolQualityMetrics(Protocol):",
        "    \"\"\"Protocol for code quality metrics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolQualityIssue' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolQualityIssue(Protocol):",
        "    \"\"\"Protocol for quality issue representation.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "line_number": 45,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolQualityStandards' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolQualityStandards(Protocol):",
        "    \"\"\"Protocol for quality standards configuration.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationError' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationError(Protocol):",
        "    \"\"\"Protocol for validation error objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "line_number": 30,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationResult' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationResult(Protocol):",
        "    \"\"\"Protocol for validation result objects.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "line_number": 58,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidator' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidator(Protocol):",
        "    \"\"\"Protocol for protocol validation functionality.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "line_number": 69,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationDecorator' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationDecorator(Protocol):",
        "    \"\"\"Protocol for validation decorator functionality.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "line_number": 11,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'protocol_validation' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "from typing import List, Protocol, runtime_checkable",
        "",
        "from .protocol_validation import ProtocolValidationResult",
        "",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationScope' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationScope(Protocol):",
        "    \"\"\"Protocol for defining validation scope.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "line_number": 30,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationWorkflow' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationWorkflow(Protocol):",
        "    \"\"\"Protocol for validation workflow definition.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "line_number": 44,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationMetrics' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationMetrics(Protocol):",
        "    \"\"\"Protocol for validation execution metrics.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "line_number": 57,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationSummary' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationSummary(Protocol):",
        "    \"\"\"Protocol for validation result summary.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "line_number": 71,
      "column_offset": 0,
      "rule_id": "SPI014",
      "violation_type": "Protocol Documentation",
      "message": "Protocol 'ProtocolValidationReport' needs comprehensive docstring with examples",
      "severity": "warning",
      "suggestion": "Add detailed docstring explaining protocol purpose and usage examples",
      "auto_fix_available": false,
      "context_lines": [
        "",
        "@runtime_checkable",
        "class ProtocolValidationReport(Protocol):",
        "    \"\"\"Protocol for comprehensive validation reports.\"\"\"",
        ""
      ],
      "related_violations": [],
      "tags": [
        "documentation",
        "examples"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_work_queue.py",
      "line_number": 9,
      "column_offset": 0,
      "rule_id": "SPI012",
      "violation_type": "Namespace Isolation",
      "message": "Import from 'collections.abc' violates namespace isolation",
      "severity": "error",
      "suggestion": "Use omnibase_spi.protocols imports or typing imports only",
      "auto_fix_available": false,
      "context_lines": [
        "\"\"\"",
        "",
        "from collections.abc import AsyncIterator",
        "from typing import TYPE_CHECKING, Any, Literal, Protocol, Union, runtime_checkable",
        ""
      ],
      "related_violations": [],
      "tags": [
        "namespace",
        "isolation"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_work_queue.py",
      "line_number": 16,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "if TYPE_CHECKING:",
        "    pass",
        "LiteralWorkQueuePriority = Literal[\"urgent\", \"high\", \"normal\", \"low\", \"deferred\"]",
        "LiteralAssignmentStrategy = Literal[",
        "    \"round_robin\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_work_queue.py",
      "line_number": 17,
      "column_offset": 0,
      "rule_id": "SPI016",
      "violation_type": "SPI Implementation Purity",
      "message": "SPI files must not contain assignment logic - use type annotations only",
      "severity": "error",
      "suggestion": "Remove assignment logic or move to implementation package",
      "auto_fix_available": false,
      "context_lines": [
        "    pass",
        "LiteralWorkQueuePriority = Literal[\"urgent\", \"high\", \"normal\", \"low\", \"deferred\"]",
        "LiteralAssignmentStrategy = Literal[",
        "    \"round_robin\",",
        "    \"least_loaded\","
      ],
      "related_violations": [],
      "tags": [
        "spi",
        "purity",
        "assignment"
      ],
      "performance_impact": "none"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_container_service.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContainerService' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 167,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolServiceValidator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 180,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolServiceFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "line_number": 206,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolServiceRegistry' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_analytics_provider.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAnalyticsDataProvider' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_cache_service.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCacheService' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_cache_service.py",
      "line_number": 59,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCacheServiceProvider' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_canonical_serializer.py",
      "line_number": 7,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCanonicalSerializer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCircuitBreakerConfig' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 40,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCircuitBreakerMetrics' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 96,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCircuitBreaker' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "line_number": 146,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCircuitBreakerFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "line_number": 162,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolClientConfigProvider' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_configuration_manager.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolConfigurationManager' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_configuration_manager.py",
      "line_number": 140,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolConfigurationManagerFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_contract_service.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContractService' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_error_handler.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolErrorHandler' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_error_sanitizer.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolErrorSanitizer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_error_sanitizer.py",
      "line_number": 50,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolErrorSanitizerFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_health_details.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHealthDetails' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_health_monitor.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHealthMonitor' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_client.py",
      "line_number": 28,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHttpClient' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_client.py",
      "line_number": 108,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHttpClientProvider' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_extended.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHttpRequestBuilder' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_extended.py",
      "line_number": 102,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHttpExtendedClient' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_input_validator.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolInputValidator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_client.py",
      "line_number": 12,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaClient' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_client.py",
      "line_number": 50,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaClientProvider' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "line_number": 32,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaConsumer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "line_number": 83,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaBatchProducer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "line_number": 132,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaTransactionalProducer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "line_number": 174,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaExtendedClient' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_logger.py",
      "line_number": 12,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolLogger' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration.py",
      "line_number": 13,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolNodeConfiguration' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration.py",
      "line_number": 81,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolNodeConfigurationProvider' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration_utils.py",
      "line_number": 16,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolUtilsNodeConfiguration' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "line_number": 24,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolNodeChangeCallback' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "line_number": 67,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolNodeRegistry' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_observability.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMetricsCollector' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_observability.py",
      "line_number": 81,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolDistributedTracing' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_observability.py",
      "line_number": 149,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAuditLogger' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_envelope.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolOnexEnvelope' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_node.py",
      "line_number": 9,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolOnexNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_reply.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolOnexReply' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "line_number": 94,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolOnexValidation' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_performance_metrics.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolPerformanceMetricsCollector' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_retryable.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolRetryable' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_schema_loader.py",
      "line_number": 15,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolSchemaLoader' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_service_discovery.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolServiceDiscovery' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_storage_backend.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolStorageBackend' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_storage_backend.py",
      "line_number": 75,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolStorageBackendFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_time_based.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolTimeBasedOperations' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_version_manager.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolVersionManager' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_workflow_manageable.py",
      "line_number": 66,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowManageable' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_workflow_reducer.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflow' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/core/protocol_workflow_reducer.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowReducer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/discovery/protocol_handler_discovery.py",
      "line_number": 31,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHandlerDiscovery' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/discovery/protocol_handler_discovery.py",
      "line_number": 105,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolNodeDiscoveryRegistry' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus.py",
      "line_number": 13,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventBusHeaders' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus.py",
      "line_number": 83,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaEventBusAdapter' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus.py",
      "line_number": 162,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventBus' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_context_manager.py",
      "line_number": 17,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventBusContextManager' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_in_memory.py",
      "line_number": 17,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventBusInMemory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventBusBase' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "line_number": 36,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolSyncEventBus' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "line_number": 54,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAsyncEventBus' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "line_number": 93,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolLogEmitter' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_service.py",
      "line_number": 17,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventBusService' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_service.py",
      "line_number": 43,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolHttpEventBusAdapter' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_types.py",
      "line_number": 31,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventPubSub' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_kafka_adapter.py",
      "line_number": 44,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKafkaAdapter' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_redpanda_adapter.py",
      "line_number": 32,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolRedpandaAdapter' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_reader.py",
      "line_number": 14,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolFileReader' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_type_handler.py",
      "line_number": 33,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolFileTypeHandler' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_discovery.py",
      "line_number": 24,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPServiceDiscovery' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_discovery.py",
      "line_number": 54,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPDiscovery' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_monitor.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPHealthMonitor' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_monitor.py",
      "line_number": 55,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPMonitor' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_registry.py",
      "line_number": 36,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPRegistry' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_registry.py",
      "line_number": 151,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPRegistryAdmin' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_registry.py",
      "line_number": 177,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPRegistryMetricsOperations' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_subsystem_client.py",
      "line_number": 45,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPSubsystemClient' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_tool_proxy.py",
      "line_number": 23,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPToolRouter' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_tool_proxy.py",
      "line_number": 51,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPToolExecutor' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_tool_proxy.py",
      "line_number": 87,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPToolProxy' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_validator.py",
      "line_number": 25,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPToolValidator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_validator.py",
      "line_number": 51,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMCPValidator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_tool_discovery_service.py",
      "line_number": 18,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolToolDiscoveryService' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 40,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolKeyValueStore' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 54,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryMetadata' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 66,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowConfiguration' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 78,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAnalysisParameters' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 90,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAggregationCriteria' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 102,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCoordinationMetadata' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 114,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAnalysisResults' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 126,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAggregatedData' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 138,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryErrorContext' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 150,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolPageInfo' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 162,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCustomMetrics' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 174,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAggregationSummary' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 234,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAgentStatusMap' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 253,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAgentResponseMap' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "line_number": 267,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolErrorCategoryMap' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowManager' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 74,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAgentCoordinator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 121,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolClusterCoordinator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 165,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolLifecycleManager' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "line_number": 234,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolComputeNodeComposite' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolErrorCategory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 46,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryRetryPolicy' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 77,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryCompensationAction' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 105,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolOperationContext' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 144,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryErrorHandler' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "line_number": 195,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryHealthMonitor' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "line_number": 59,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryEffectNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "line_number": 123,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryComputeNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "line_number": 167,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryReducerNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "line_number": 216,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryOrchestratorNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "line_number": 262,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryHealthNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemorySecurityContext' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolAuditTrail' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 84,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolRateLimitConfig' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 111,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolInputValidation' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 138,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemorySecurityNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "line_number": 198,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryComplianceNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 19,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolStreamingChunk' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 58,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolStreamingConfig' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 95,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCursorPagination' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 122,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolStreamingMemoryNode' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 199,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMemoryCache' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "line_number": 238,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolPerformanceOptimization' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContainer' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 59,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolRegistryWrapper' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 92,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContainerFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "line_number": 103,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContainerServiceFactory' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 66,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContextValue' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 176,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolLogContext' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 370,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolMetadataOperations' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 945,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolSerializable' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 1294,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolValidatable' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 20,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCapabilityValue' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 21,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventData' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolFileContent' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 196,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolFileMetadataOperations' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 209,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolResultOperations' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 22,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowValue' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "line_number": 69,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolValidationDecorator' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_work_queue.py",
      "line_number": 27,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkQueue' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_event_bus.py",
      "line_number": 49,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowEventHandler' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_event_bus.py",
      "line_number": 83,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowEventBus' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_node_registry.py",
      "line_number": 114,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowNodeRegistry' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "line_number": 79,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventStore' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "line_number": 128,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolSnapshotStore' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "line_number": 163,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolLiteralWorkflowStateStore' is identical to 'ProtocolArtifactContainer' in src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/container/protocol_artifact_container.py:56",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 84,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContextNumericValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 91,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContextBooleanValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 98,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContextStringListValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "line_number": 105,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolContextStringDictValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 29,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCapabilityStringValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 36,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCapabilityNumericValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 43,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCapabilityBooleanValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "line_number": 50,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolCapabilityStringListValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 28,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventStringData' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 35,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventStringListData' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "line_number": 42,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolEventStringDictData' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 31,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolStringFileContent' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "line_number": 38,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolBinaryFileContent' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 33,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowStringValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 44,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowStringListValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 55,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowStringDictValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 66,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowNumericValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 77,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolWorkflowStructuredValue' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "line_number": 91,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Exact Duplicate Protocol",
      "message": "Protocol 'ProtocolTypedWorkflowData' is identical to 'ProtocolContextStringValue' in src/omnibase_spi/protocols/types/protocol_core_types.py",
      "severity": "error",
      "suggestion": "Remove duplicate or merge with src/omnibase_spi/protocols/types/protocol_core_types.py:77",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "exact",
        "signature"
      ],
      "performance_impact": "medium"
    },
    {
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "line_number": 98,
      "column_offset": 0,
      "rule_id": "SPI010",
      "violation_type": "Semantic Duplicate Protocol",
      "message": "Protocol 'ProtocolBatchMemoryRetrieveRequest' is very similar to 'ProtocolMemoryRetrieveRequest' (similarity: 100.0%)",
      "severity": "warning",
      "suggestion": "Consider merging similar protocols or making differences more explicit",
      "auto_fix_available": false,
      "context_lines": [],
      "related_violations": [],
      "tags": [
        "duplicate",
        "semantic",
        "similarity"
      ],
      "performance_impact": "low"
    }
  ],
  "protocols": [
    {
      "name": "ProtocolArtifactMetadata",
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "module_path": "omnibase_spi.protocols.container.protocol_artifact_container",
      "line_number": 21,
      "methods": [],
      "properties": [
        "description",
        "author",
        "created_at",
        "last_modified_at"
      ],
      "signature_hash": "9a46cad3a3d7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolArtifactInfo",
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "module_path": "omnibase_spi.protocols.container.protocol_artifact_container",
      "line_number": 31,
      "methods": [],
      "properties": [
        "name",
        "version",
        "artifact_type",
        "path",
        "metadata",
        "is_wip"
      ],
      "signature_hash": "e0344d01981b",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolArtifactContainerStatus",
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "module_path": "omnibase_spi.protocols.container.protocol_artifact_container",
      "line_number": 43,
      "methods": [],
      "properties": [
        "status",
        "message",
        "artifact_count",
        "valid_artifact_count",
        "invalid_artifact_count",
        "wip_artifact_count",
        "artifact_types_found"
      ],
      "signature_hash": "fc7febb11b7d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolArtifactContainer",
      "file_path": "src/omnibase_spi/protocols/container/protocol_artifact_container.py",
      "module_path": "omnibase_spi.protocols.container.protocol_artifact_container",
      "line_number": 56,
      "methods": [
        "async get_status() -> ProtocolArtifactContainerStatus",
        "async get_artifacts() -> list['ProtocolArtifactInfo']",
        "async get_artifacts_by_type(artifact_type: LiteralContainerArtifactType) -> list['ProtocolArtifactInfo']",
        "async get_artifact_by_name(name: str, artifact_type: 'LiteralContainerArtifactType | None') -> ProtocolArtifactInfo",
        "has_artifact(name: str, artifact_type: 'LiteralContainerArtifactType | None') -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_status",
        "get_artifacts",
        "get_artifacts_by_type",
        "get_artifact_by_name"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 17,
      "line_count": 24
    },
    {
      "name": "ProtocolContainerService",
      "file_path": "src/omnibase_spi/protocols/container/protocol_container_service.py",
      "module_path": "omnibase_spi.protocols.container.protocol_container_service",
      "line_number": 21,
      "methods": [
        "async create_container_from_contract(contract_metadata: ProtocolMetadata, node_id: str, node_ref: object | None) -> ProtocolContainerResult",
        "async create_service_from_dependency(dependency_spec: ProtocolDependencySpec) -> ProtocolContainerServiceInstance | None",
        "async validate_container_dependencies(container: ProtocolContainer) -> bool",
        "async get_registry_wrapper(container: ProtocolContainer, node_ref: object | None) -> ProtocolRegistryWrapper",
        "async update_container_lifecycle(registry: ProtocolRegistryWrapper, node_ref: object) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_container_from_contract",
        "create_service_from_dependency",
        "validate_container_dependencies",
        "get_registry_wrapper",
        "update_container_lifecycle"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 19,
      "line_count": 56
    },
    {
      "name": "ProtocolServiceRegistrationMetadata",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 42,
      "methods": [],
      "properties": [
        "service_id",
        "service_name",
        "service_interface",
        "service_implementation",
        "version",
        "description",
        "tags",
        "configuration",
        "created_at",
        "last_modified_at"
      ],
      "signature_hash": "c6f98fcc0b54",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolServiceDependency",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 58,
      "methods": [
        "async validate_dependency() -> bool",
        "is_satisfied() -> bool"
      ],
      "properties": [
        "dependency_name",
        "dependency_interface",
        "dependency_version",
        "is_required",
        "is_circular",
        "injection_point",
        "default_value",
        "metadata"
      ],
      "signature_hash": "dfa48114b585",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_dependency"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolServiceRegistration",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 76,
      "methods": [
        "async validate_registration() -> bool",
        "is_active() -> bool"
      ],
      "properties": [
        "registration_id",
        "service_metadata",
        "lifecycle",
        "scope",
        "dependencies",
        "registration_status",
        "health_status",
        "registration_time",
        "last_access_time",
        "access_count",
        "instance_count",
        "max_instances"
      ],
      "signature_hash": "8369dcee7bde",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_registration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 16,
      "line_count": 21
    },
    {
      "name": "ProtocolRegistryServiceInstance",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 100,
      "methods": [
        "async validate_instance() -> bool",
        "is_active() -> bool"
      ],
      "properties": [
        "instance_id",
        "service_registration_id",
        "instance",
        "lifecycle",
        "scope",
        "created_at",
        "last_accessed",
        "access_count",
        "is_disposed",
        "metadata"
      ],
      "signature_hash": "21736adc62ed",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_instance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 14,
      "line_count": 17
    },
    {
      "name": "ProtocolDependencyGraph",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 120,
      "methods": [],
      "properties": [
        "service_id",
        "dependencies",
        "dependents",
        "depth_level",
        "circular_references",
        "resolution_order",
        "metadata"
      ],
      "signature_hash": "82ce36f2f461",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolInjectionContext",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 133,
      "methods": [],
      "properties": [
        "context_id",
        "target_service_id",
        "scope",
        "resolved_dependencies",
        "injection_time",
        "resolution_status",
        "error_details",
        "resolution_path",
        "metadata"
      ],
      "signature_hash": "f50b68d9e3c7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolServiceRegistryStatus",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 148,
      "methods": [],
      "properties": [
        "registry_id",
        "status",
        "message",
        "total_registrations",
        "active_instances",
        "failed_registrations",
        "circular_dependencies",
        "lifecycle_distribution",
        "scope_distribution",
        "health_summary",
        "memory_usage_bytes",
        "average_resolution_time_ms",
        "last_updated"
      ],
      "signature_hash": "133877e9b9af",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 13,
      "line_count": 16
    },
    {
      "name": "ProtocolServiceValidator",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 167,
      "methods": [
        "async validate_service(service: Any, interface: Type[Any]) -> ProtocolValidationResult",
        "async validate_dependencies(dependencies: list['ProtocolServiceDependency']) -> ProtocolValidationResult"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_service",
        "validate_dependencies"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolServiceFactory",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 180,
      "methods": [
        "async create_instance(interface: Type[T], context: dict[str, 'ContextValue']) -> T",
        "async dispose_instance(instance: Any) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_instance",
        "dispose_instance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 7,
      "line_count": 8
    },
    {
      "name": "ProtocolServiceRegistryConfig",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 191,
      "methods": [],
      "properties": [
        "registry_name",
        "auto_wire_enabled",
        "lazy_loading_enabled",
        "circular_dependency_detection",
        "max_resolution_depth",
        "instance_pooling_enabled",
        "health_monitoring_enabled",
        "performance_monitoring_enabled",
        "configuration"
      ],
      "signature_hash": "5e437d9ce6d1",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolServiceRegistry",
      "file_path": "src/omnibase_spi/protocols/container/protocol_service_registry.py",
      "module_path": "omnibase_spi.protocols.container.protocol_service_registry",
      "line_number": 206,
      "methods": [
        "config() -> ProtocolServiceRegistryConfig",
        "validator() -> ProtocolServiceValidator | None",
        "factory() -> ProtocolServiceFactory | None",
        "async register_service(interface: Type[TInterface], implementation: Type[TImplementation], lifecycle: LiteralServiceLifecycle, scope: LiteralInjectionScope, configuration: dict[str, 'ContextValue'] | None) -> str",
        "async register_instance(interface: Type[TInterface], instance: TInterface, scope: 'LiteralInjectionScope', metadata: dict[str, 'ContextValue'] | None) -> str",
        "async register_factory(interface: Type[TInterface], factory: 'ProtocolServiceFactory', lifecycle: 'LiteralServiceLifecycle', scope: 'LiteralInjectionScope') -> str",
        "async unregister_service(registration_id: str) -> bool",
        "async resolve_service(interface: Type[TInterface], scope: 'LiteralInjectionScope | None', context: dict[str, 'ContextValue'] | None) -> TInterface",
        "async resolve_named_service(interface: Type[TInterface], name: str, scope: 'LiteralInjectionScope | None') -> TInterface",
        "async resolve_all_services(interface: Type[TInterface], scope: 'LiteralInjectionScope | None') -> list[TInterface]",
        "async try_resolve_service(interface: Type[TInterface], scope: 'LiteralInjectionScope | None') -> TInterface | None",
        "async get_registration(registration_id: str) -> ProtocolServiceRegistration | None",
        "async get_registrations_by_interface(interface: Type[T]) -> list['ProtocolServiceRegistration']",
        "async get_all_registrations() -> list['ProtocolServiceRegistration']",
        "async get_active_instances(registration_id: str | None) -> list['ProtocolRegistryServiceInstance']",
        "async dispose_instances(registration_id: str, scope: 'LiteralInjectionScope | None') -> int",
        "async validate_registration(registration: 'ProtocolServiceRegistration') -> bool",
        "async detect_circular_dependencies(registration: 'ProtocolServiceRegistration') -> list[str]",
        "async get_dependency_graph(service_id: str) -> ProtocolDependencyGraph | None",
        "async get_registry_status() -> ProtocolServiceRegistryStatus",
        "async validate_service_health(registration_id: str) -> ProtocolValidationResult",
        "async update_service_configuration(registration_id: str, configuration: dict[str, 'ContextValue']) -> bool",
        "async create_injection_scope(scope_name: str, parent_scope: str | None) -> str",
        "async dispose_injection_scope(scope_id: str) -> int",
        "async get_injection_context(context_id: str) -> ProtocolInjectionContext | None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "register_service",
        "register_instance",
        "register_factory",
        "unregister_service",
        "resolve_service",
        "resolve_named_service",
        "resolve_all_services",
        "try_resolve_service",
        "get_registration",
        "get_registrations_by_interface",
        "get_all_registrations",
        "get_active_instances",
        "dispose_instances",
        "validate_registration",
        "detect_circular_dependencies",
        "get_dependency_graph",
        "get_registry_status",
        "validate_service_health",
        "update_service_configuration",
        "create_injection_scope",
        "dispose_injection_scope",
        "get_injection_context"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "container",
      "complexity_score": 94,
      "line_count": 132
    },
    {
      "name": "ProtocolAnalyticsDataProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_analytics_provider.py",
      "module_path": "omnibase_spi.protocols.core.protocol_analytics_provider",
      "line_number": 22,
      "methods": [
        "async configure_analytics_provider(provider_config: 'ProtocolAnalyticsProvider') -> bool",
        "async get_analytics_provider_info() -> 'ProtocolAnalyticsProvider'",
        "async collect_metric(metric: 'ProtocolAnalyticsMetric') -> bool",
        "async collect_metrics_batch(metrics: list['ProtocolAnalyticsMetric']) -> int",
        "async query_metrics(metric_names: list[str], time_window: 'LiteralAnalyticsTimeWindow', start_time: 'ProtocolDateTime', end_time: 'ProtocolDateTime') -> list['ProtocolAnalyticsMetric']",
        "async generate_analytics_summary(time_window: 'LiteralAnalyticsTimeWindow', data_sources: list[str] | None, metric_types: list['LiteralAnalyticsMetricType'] | None) -> 'ProtocolAnalyticsSummary'",
        "async get_supported_metrics() -> list[str]",
        "async get_supported_time_windows() -> list['LiteralAnalyticsTimeWindow']",
        "async add_data_source(source_name: str, source_config: dict[str, str | int | bool]) -> bool",
        "async remove_data_source(source_name: str) -> bool",
        "async get_analytics_health() -> dict[str, 'ContextValue']",
        "async create_custom_metric(metric_name: str, metric_type: 'LiteralAnalyticsMetricType', unit: str, description: str) -> bool",
        "async delete_custom_metric(metric_name: str) -> bool",
        "async set_metric_threshold(metric_name: str, warning_threshold: float, critical_threshold: float) -> bool",
        "async get_metric_thresholds(metric_name: str) -> dict[str, float] | None",
        "async generate_insights(summary: 'ProtocolAnalyticsSummary') -> list[str]",
        "async generate_recommendations(summary: 'ProtocolAnalyticsSummary') -> list[str]",
        "async export_analytics_data(format_type: str, time_range: tuple['ProtocolDateTime', 'ProtocolDateTime'], metric_filter: list[str] | None) -> bytes | str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "configure_analytics_provider",
        "get_analytics_provider_info",
        "collect_metric",
        "collect_metrics_batch",
        "query_metrics",
        "generate_analytics_summary",
        "get_supported_metrics",
        "get_supported_time_windows",
        "add_data_source",
        "remove_data_source",
        "get_analytics_health",
        "create_custom_metric",
        "delete_custom_metric",
        "set_metric_threshold",
        "get_metric_thresholds",
        "generate_insights",
        "generate_recommendations",
        "export_analytics_data"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 70,
      "line_count": 114
    },
    {
      "name": "ProtocolCacheService",
      "file_path": "src/omnibase_spi/protocols/core/protocol_cache_service.py",
      "module_path": "omnibase_spi.protocols.core.protocol_cache_service",
      "line_number": 19,
      "methods": [
        "async get(key: str) -> T | None",
        "async set(key: str, value: T, ttl_seconds: int | None) -> bool",
        "async delete(key: str) -> bool",
        "async clear(pattern: str | None) -> int",
        "async exists(key: str) -> bool",
        "async get_stats() -> 'ProtocolCacheStatistics'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get",
        "set",
        "delete",
        "clear",
        "exists",
        "get_stats"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 19,
      "line_count": 37
    },
    {
      "name": "ProtocolCacheServiceProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_cache_service.py",
      "module_path": "omnibase_spi.protocols.core.protocol_cache_service",
      "line_number": 59,
      "methods": [
        "async create_cache_service() -> ProtocolCacheService[T]",
        "async get_cache_configuration() -> dict[str, 'ContextValue']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_cache_service",
        "get_cache_configuration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 6,
      "line_count": 6
    },
    {
      "name": "ProtocolCanonicalSerializer",
      "file_path": "src/omnibase_spi/protocols/core/protocol_canonical_serializer.py",
      "module_path": "omnibase_spi.protocols.core.protocol_canonical_serializer",
      "line_number": 7,
      "methods": [
        "canonicalize_metadata_block(metadata_block: dict[str, object] | object) -> str",
        "normalize_body(body: str) -> str",
        "canonicalize_for_hash(block: 'ProtocolNodeMetadata', body: str, volatile_fields: tuple[str, ...], placeholder: str) -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 12,
      "line_count": 24
    },
    {
      "name": "ProtocolCircuitBreakerConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "module_path": "omnibase_spi.protocols.core.protocol_circuit_breaker",
      "line_number": 18,
      "methods": [
        "failure_threshold() -> int",
        "recovery_timeout_seconds() -> float",
        "async half_open_max_calls() -> int",
        "success_threshold() -> int",
        "metrics_window_seconds() -> float",
        "request_timeout_seconds() -> float"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "half_open_max_calls"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 12,
      "line_count": 19
    },
    {
      "name": "ProtocolCircuitBreakerMetrics",
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "module_path": "omnibase_spi.protocols.core.protocol_circuit_breaker",
      "line_number": 40,
      "methods": [
        "total_requests() -> int",
        "successful_requests() -> int",
        "failed_requests() -> int",
        "timeout_requests() -> int",
        "current_state() -> 'LiteralProtocolCircuitBreakerState'",
        "state_changes() -> int",
        "last_state_change() -> float | None",
        "last_success_time() -> float | None",
        "last_failure_time() -> float | None",
        "average_response_time_ms() -> float",
        "requests_in_window() -> int",
        "failures_in_window() -> int",
        "successes_in_window() -> int",
        "async half_open_requests() -> int",
        "async half_open_successes() -> int",
        "async half_open_failures() -> int",
        "async get_failure_rate() -> float",
        "async get_success_rate() -> float",
        "async reset_window() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "half_open_requests",
        "half_open_successes",
        "half_open_failures",
        "get_failure_rate",
        "get_success_rate",
        "reset_window"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 38,
      "line_count": 53
    },
    {
      "name": "ProtocolCircuitBreaker",
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "module_path": "omnibase_spi.protocols.core.protocol_circuit_breaker",
      "line_number": 96,
      "methods": [
        "service_name() -> str",
        "async get_state() -> 'LiteralProtocolCircuitBreakerState'",
        "async get_metrics() -> ProtocolCircuitBreakerMetrics",
        "async call(func: Callable[[], Awaitable[T]], fallback: Callable[[], Awaitable[T]] | None, timeout: float | None) -> T",
        "async record_success(execution_time_ms: float | None) -> None",
        "async record_failure(exception: Exception | None) -> None",
        "async record_timeout() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_state",
        "get_metrics",
        "call",
        "record_success",
        "record_failure",
        "record_timeout"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 19,
      "line_count": 47
    },
    {
      "name": "ProtocolCircuitBreakerFactory",
      "file_path": "src/omnibase_spi/protocols/core/protocol_circuit_breaker.py",
      "module_path": "omnibase_spi.protocols.core.protocol_circuit_breaker",
      "line_number": 146,
      "methods": [
        "async get_circuit_breaker(service_name: str, config: 'ProtocolCircuitBreakerConfig | None') -> ProtocolCircuitBreaker | None",
        "async register_circuit_breaker(service_name: str, circuit_breaker: 'ProtocolCircuitBreaker') -> None",
        "remove_circuit_breaker(service_name: str) -> bool",
        "async get_all_circuit_breakers() -> dict[str, 'ProtocolCircuitBreaker']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_circuit_breaker",
        "register_circuit_breaker",
        "get_all_circuit_breakers"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 14,
      "line_count": 23
    },
    {
      "name": "ProtocolHttpClientConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "module_path": "omnibase_spi.protocols.core.protocol_client_config",
      "line_number": 14,
      "methods": [],
      "properties": [
        "base_url",
        "timeout_seconds",
        "connect_timeout_seconds",
        "read_timeout_seconds",
        "max_retries",
        "retry_delay_seconds",
        "connection_pool_size",
        "max_connections_per_host",
        "ssl_verify",
        "ssl_cert_path",
        "ssl_key_path",
        "user_agent",
        "default_headers",
        "proxy_url",
        "proxy_auth",
        "follow_redirects",
        "max_redirects",
        "cookie_jar_enabled",
        "compression_enabled"
      ],
      "signature_hash": "67b26650ca70",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 19,
      "line_count": 37
    },
    {
      "name": "ProtocolHttpAuthConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "module_path": "omnibase_spi.protocols.core.protocol_client_config",
      "line_number": 54,
      "methods": [],
      "properties": [
        "auth_type",
        "bearer_token",
        "basic_username",
        "basic_password",
        "api_key_header",
        "api_key_value",
        "oauth2_client_id",
        "oauth2_client_secret",
        "oauth2_token_url",
        "oauth2_scope",
        "refresh_token_automatically",
        "token_expiry_buffer_seconds"
      ],
      "signature_hash": "08818a787584",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 12,
      "line_count": 20
    },
    {
      "name": "ProtocolKafkaClientConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "module_path": "omnibase_spi.protocols.core.protocol_client_config",
      "line_number": 77,
      "methods": [],
      "properties": [
        "bootstrap_servers",
        "client_id",
        "security_protocol",
        "ssl_ca_location",
        "ssl_certificate_location",
        "ssl_key_location",
        "ssl_key_password",
        "sasl_mechanism",
        "sasl_username",
        "sasl_password",
        "request_timeout_ms",
        "retry_backoff_ms",
        "max_retry_attempts",
        "session_timeout_ms",
        "heartbeat_interval_ms",
        "max_poll_interval_ms"
      ],
      "signature_hash": "28b81ba249fc",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 16,
      "line_count": 34
    },
    {
      "name": "ProtocolKafkaProducerConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "module_path": "omnibase_spi.protocols.core.protocol_client_config",
      "line_number": 114,
      "methods": [],
      "properties": [
        "acks",
        "batch_size",
        "linger_ms",
        "buffer_memory",
        "compression_type",
        "max_in_flight_requests_per_connection",
        "retries",
        "delivery_timeout_ms",
        "enable_idempotence",
        "transactional_id",
        "max_request_size",
        "send_buffer_bytes",
        "receive_buffer_bytes"
      ],
      "signature_hash": "2006ebd7d9fd",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 13,
      "line_count": 21
    },
    {
      "name": "ProtocolKafkaConsumerConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "module_path": "omnibase_spi.protocols.core.protocol_client_config",
      "line_number": 138,
      "methods": [],
      "properties": [
        "group_id",
        "auto_offset_reset",
        "enable_auto_commit",
        "auto_commit_interval_ms",
        "max_poll_records",
        "fetch_min_bytes",
        "fetch_max_wait_ms",
        "max_partition_fetch_bytes",
        "check_crcs",
        "isolation_level",
        "exclude_internal_topics",
        "partition_assignment_strategy",
        "allow_auto_create_topics"
      ],
      "signature_hash": "4f16f8b4a71c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 13,
      "line_count": 21
    },
    {
      "name": "ProtocolClientConfigProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_client_config.py",
      "module_path": "omnibase_spi.protocols.core.protocol_client_config",
      "line_number": 162,
      "methods": [
        "async get_http_client_config(client_name: str) -> ProtocolHttpClientConfig",
        "async get_http_auth_config(auth_name: str) -> ProtocolHttpAuthConfig",
        "async get_kafka_client_config(client_name: str) -> ProtocolKafkaClientConfig",
        "async get_kafka_producer_config(producer_name: str) -> ProtocolKafkaProducerConfig",
        "async get_kafka_consumer_config(consumer_name: str) -> ProtocolKafkaConsumerConfig",
        "async validate_configurations() -> list[str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_http_client_config",
        "get_http_auth_config",
        "get_kafka_client_config",
        "get_kafka_producer_config",
        "get_kafka_consumer_config",
        "validate_configurations"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 18,
      "line_count": 38
    },
    {
      "name": "ProtocolConfigurationManager",
      "file_path": "src/omnibase_spi/protocols/core/protocol_configuration_manager.py",
      "module_path": "omnibase_spi.protocols.core.protocol_configuration_manager",
      "line_number": 19,
      "methods": [
        "async load_configuration(config_name: str) -> dict[str, ContextValue]",
        "async validate_configuration(config_data: dict[str, ContextValue]) -> bool",
        "async get_configuration_value(config_name: str, key: str, default: object | None, environment: str | None) -> object",
        "async set_configuration_value(config_name: str, key: str, value: object) -> bool",
        "async update_configuration_runtime(config_name: str, updates: dict[str, ContextValue]) -> bool",
        "async reload_configuration(config_name: str) -> bool",
        "async backup_configuration(config_name: str) -> str | None",
        "async restore_configuration(config_name: str, backup_path: str) -> bool",
        "async get_configuration_sources(config_name: str) -> list[dict[str, ContextValue]]",
        "add_configuration_source(config_name: str, source_type: str, source_path: str | None) -> bool",
        "remove_configuration_source(config_name: str, source_type: str, source_path: str | None) -> bool",
        "is_configuration_valid(config_name: str) -> bool",
        "async get_configuration_health(config_name: str) -> dict[str, ContextValue]",
        "list_configurations() -> list[str]",
        "async get_sensitive_keys(config_name: str) -> list[str]",
        "mask_sensitive_values(config_data: dict[str, object], config_name: str) -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "load_configuration",
        "validate_configuration",
        "get_configuration_value",
        "set_configuration_value",
        "update_configuration_runtime",
        "reload_configuration",
        "backup_configuration",
        "restore_configuration",
        "get_configuration_sources",
        "get_configuration_health",
        "get_sensitive_keys"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 66,
      "line_count": 118
    },
    {
      "name": "ProtocolConfigurationManagerFactory",
      "file_path": "src/omnibase_spi/protocols/core/protocol_configuration_manager.py",
      "module_path": "omnibase_spi.protocols.core.protocol_configuration_manager",
      "line_number": 140,
      "methods": [
        "async create_default() -> ProtocolConfigurationManager"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_default"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 2,
      "line_count": 9
    },
    {
      "name": "ProtocolConnectionManageable",
      "file_path": "src/omnibase_spi/protocols/core/protocol_connection_manageable.py",
      "module_path": "omnibase_spi.protocols.core.protocol_connection_manageable",
      "line_number": 21,
      "methods": [
        "async establish_connection() -> bool",
        "async close_connection() -> bool",
        "async disconnect() -> bool",
        "async reconnect_immediate() -> bool",
        "async reconnect_with_strategy(retry_config: 'ProtocolRetryConfig') -> bool",
        "async recover_connection() -> bool",
        "async perform_health_check() -> bool",
        "async perform_deep_health_check() -> dict[str, 'ContextValue']",
        "async get_connection_state() -> 'LiteralConnectionState'",
        "async get_connection_status() -> 'ProtocolConnectionStatus'",
        "async get_connection_metrics() -> dict[str, 'ContextValue']",
        "async update_connection_config(new_config: 'ProtocolConnectionConfig') -> bool",
        "async enable_auto_reconnect() -> bool",
        "async disable_auto_reconnect() -> bool",
        "async is_connected() -> bool",
        "async is_connecting() -> bool",
        "can_recover() -> bool",
        "async get_last_error() -> str | None",
        "async get_connection_uptime() -> int",
        "async get_idle_time() -> int",
        "async reset_error_count() -> bool",
        "async set_connection_timeout(timeout_ms: int) -> bool",
        "async get_connection_pool_stats() -> dict[str, 'ContextValue'] | None",
        "async validate_connection_config(config: 'ProtocolConnectionConfig') -> bool",
        "async test_connection_config(config: 'ProtocolConnectionConfig') -> dict[str, 'ContextValue']",
        "async get_supported_features() -> list[str]",
        "is_feature_available(feature_name: str) -> bool"
      ],
      "properties": [
        "connection_id",
        "config",
        "status",
        "can_reconnect",
        "auto_reconnect_enabled"
      ],
      "signature_hash": "7a6e5c42dbda",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "establish_connection",
        "close_connection",
        "disconnect",
        "reconnect_immediate",
        "reconnect_with_strategy",
        "recover_connection",
        "perform_health_check",
        "perform_deep_health_check",
        "get_connection_state",
        "get_connection_status",
        "get_connection_metrics",
        "update_connection_config",
        "enable_auto_reconnect",
        "disable_auto_reconnect",
        "is_connected",
        "is_connecting",
        "get_last_error",
        "get_connection_uptime",
        "get_idle_time",
        "reset_error_count",
        "set_connection_timeout",
        "get_connection_pool_stats",
        "validate_connection_config",
        "test_connection_config",
        "get_supported_features"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 70,
      "line_count": 132
    },
    {
      "name": "ProtocolContractService",
      "file_path": "src/omnibase_spi/protocols/core/protocol_contract_service.py",
      "module_path": "omnibase_spi.protocols.core.protocol_contract_service",
      "line_number": 21,
      "methods": [
        "async load_contract(contract_path: str) -> 'ProtocolMetadata'",
        "async validate_contract(contract_data: 'ProtocolMetadata') -> 'ProtocolValidationResult'",
        "async get_cached_contract(contract_path: str) -> 'ProtocolMetadata | None'",
        "cache_contract(contract_path: str, contract_data: 'ProtocolMetadata') -> bool",
        "clear_cache(contract_path: str | None) -> int",
        "extract_node_id(contract_data: 'ProtocolMetadata') -> str",
        "extract_version(contract_data: 'ProtocolMetadata') -> 'ProtocolSemVer'",
        "extract_dependencies(contract_data: 'ProtocolMetadata') -> list[dict[str, 'ContextValue']]",
        "extract_tool_class_name(contract_data: 'ProtocolMetadata') -> str",
        "extract_event_patterns(contract_data: 'ProtocolMetadata') -> list[str]",
        "async get_cache_statistics() -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "load_contract",
        "validate_contract",
        "get_cached_contract",
        "get_cache_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 37,
      "line_count": 65
    },
    {
      "name": "ProtocolErrorHandler",
      "file_path": "src/omnibase_spi/protocols/core/protocol_error_handler.py",
      "module_path": "omnibase_spi.protocols.core.protocol_error_handler",
      "line_number": 19,
      "methods": [
        "async handle_error(error: Exception, context: 'ProtocolErrorContext') -> 'ProtocolErrorResult'",
        "async get_error_recovery_strategy(error_result: 'ProtocolErrorResult') -> 'ProtocolRecoveryAction'",
        "classify_error_severity(error: Exception, context: 'ProtocolErrorContext') -> 'LiteralErrorSeverity'",
        "should_retry_error(error_result: 'ProtocolErrorResult', attempt_count: int) -> bool",
        "async get_backoff_delay_seconds(error_result: 'ProtocolErrorResult', attempt_count: int) -> float",
        "record_error_metrics(error_result: 'ProtocolErrorResult', recovery_outcome: str) -> None",
        "activate_circuit_breaker(service_name: str, error_threshold: int) -> bool",
        "async get_circuit_breaker_status(service_name: str) -> str",
        "async reset_circuit_breaker(service_name: str) -> bool",
        "async get_error_statistics(time_window_minutes: int) -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "handle_error",
        "get_error_recovery_strategy",
        "get_backoff_delay_seconds",
        "get_circuit_breaker_status",
        "reset_circuit_breaker",
        "get_error_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 37,
      "line_count": 68
    },
    {
      "name": "ProtocolErrorSanitizer",
      "file_path": "src/omnibase_spi/protocols/core/protocol_error_sanitizer.py",
      "module_path": "omnibase_spi.protocols.core.protocol_error_sanitizer",
      "line_number": 15,
      "methods": [
        "sanitize_message(message: str) -> str",
        "sanitize_exception(exception: Exception) -> Exception",
        "sanitize_dict(data: dict[str, ContextValue]) -> dict[str, ContextValue]",
        "sanitize_list(data: list[Any]) -> list[Any]",
        "sanitize_file_path(path: str) -> str",
        "async get_cache_info() -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_cache_info"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 20,
      "line_count": 32
    },
    {
      "name": "ProtocolErrorSanitizerFactory",
      "file_path": "src/omnibase_spi/protocols/core/protocol_error_sanitizer.py",
      "module_path": "omnibase_spi.protocols.core.protocol_error_sanitizer",
      "line_number": 50,
      "methods": [
        "async create_default() -> ProtocolErrorSanitizer"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_default"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 2,
      "line_count": 9
    },
    {
      "name": "ProtocolHealthDetails",
      "file_path": "src/omnibase_spi/protocols/core/protocol_health_details.py",
      "module_path": "omnibase_spi.protocols.core.protocol_health_details",
      "line_number": 15,
      "methods": [
        "async get_health_status() -> 'LiteralHealthStatus'",
        "async is_healthy() -> bool",
        "async get_health_summary() -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_health_status",
        "is_healthy",
        "get_health_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 6,
      "line_count": 49
    },
    {
      "name": "ProtocolHealthMonitor",
      "file_path": "src/omnibase_spi/protocols/core/protocol_health_monitor.py",
      "module_path": "omnibase_spi.protocols.core.protocol_health_monitor",
      "line_number": 21,
      "methods": [
        "async perform_health_check(level: 'LiteralHealthCheckLevel', dimensions: list['LiteralHealthDimension']) -> 'ProtocolHealthCheck'",
        "async get_current_health_status() -> 'LiteralHealthStatus'",
        "async get_health_metrics() -> 'ProtocolHealthMetrics'",
        "configure_monitoring(config: 'ProtocolHealthMonitoring') -> bool",
        "async get_monitoring_configuration() -> 'ProtocolHealthMonitoring'",
        "async start_monitoring() -> bool",
        "async stop_monitoring() -> bool",
        "is_monitoring_active() -> bool",
        "async get_health_history(hours_back: int) -> list['ProtocolHealthCheck']",
        "async register_health_dependency(dependency_name: str, dependency_monitor: 'ProtocolHealthMonitor') -> bool",
        "async unregister_health_dependency(dependency_name: str) -> bool",
        "async get_dependency_health_status(dependency_name: str) -> 'LiteralHealthStatus'",
        "async set_health_alert_callback(callback: Callable[[str, 'LiteralHealthStatus', 'LiteralHealthStatus'], None]) -> bool",
        "async get_aggregated_health_status() -> dict[str, 'LiteralHealthStatus']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "perform_health_check",
        "get_current_health_status",
        "get_health_metrics",
        "get_monitoring_configuration",
        "start_monitoring",
        "stop_monitoring",
        "get_health_history",
        "register_health_dependency",
        "unregister_health_dependency",
        "get_dependency_health_status",
        "set_health_alert_callback",
        "get_aggregated_health_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 39,
      "line_count": 75
    },
    {
      "name": "ProtocolHttpResponse",
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_client.py",
      "module_path": "omnibase_spi.protocols.core.protocol_http_client",
      "line_number": 14,
      "methods": [],
      "properties": [
        "status_code",
        "headers",
        "body",
        "url"
      ],
      "signature_hash": "b8e6c050a3b9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 4,
      "line_count": 11
    },
    {
      "name": "ProtocolHttpClient",
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_client.py",
      "module_path": "omnibase_spi.protocols.core.protocol_http_client",
      "line_number": 28,
      "methods": [
        "async request(method: str, url: str, json: dict[str, str | int | float | bool] | None, headers: dict[str, 'ContextValue'] | None, timeout: int | None) -> 'ProtocolHttpResponse'",
        "async get(url: str, headers: dict[str, 'ContextValue'] | None, timeout: int | None) -> 'ProtocolHttpResponse'",
        "async post(url: str, json: dict[str, str | int | float | bool] | None, headers: dict[str, 'ContextValue'] | None, timeout: int | None) -> 'ProtocolHttpResponse'",
        "async put(url: str, json: dict[str, str | int | float | bool] | None, headers: dict[str, 'ContextValue'] | None, timeout: int | None) -> 'ProtocolHttpResponse'",
        "async delete(url: str, headers: dict[str, 'ContextValue'] | None, timeout: int | None) -> 'ProtocolHttpResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "request",
        "get",
        "post",
        "put",
        "delete"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 29,
      "line_count": 77
    },
    {
      "name": "ProtocolHttpClientProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_client.py",
      "module_path": "omnibase_spi.protocols.core.protocol_http_client",
      "line_number": 108,
      "methods": [
        "async create_http_client() -> ProtocolHttpClient"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_http_client"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 2,
      "line_count": 4
    },
    {
      "name": "ProtocolHttpRequestBuilder",
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_http_extended",
      "line_number": 15,
      "methods": [
        "url(url: str) -> 'ProtocolHttpRequestBuilder'",
        "async with_query_params(params: dict[str, 'ContextValue']) -> 'ProtocolHttpRequestBuilder'",
        "with_form_data(data: dict[str, 'ContextValue']) -> 'ProtocolHttpRequestBuilder'",
        "async with_file_upload(files: dict[str, bytes]) -> 'ProtocolHttpRequestBuilder'",
        "with_json(data: dict[str, str | int | float | bool]) -> 'ProtocolHttpRequestBuilder'",
        "with_bearer_token(token: str) -> 'ProtocolHttpRequestBuilder'",
        "with_basic_auth(username: str, password: str) -> 'ProtocolHttpRequestBuilder'",
        "with_header(name: str, value: str) -> 'ProtocolHttpRequestBuilder'",
        "with_timeout(timeout_seconds: int) -> 'ProtocolHttpRequestBuilder'",
        "async get() -> 'ProtocolHttpResponse'",
        "async post() -> 'ProtocolHttpResponse'",
        "async put() -> 'ProtocolHttpResponse'",
        "async delete() -> 'ProtocolHttpResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "with_query_params",
        "with_file_upload",
        "get",
        "post",
        "put",
        "delete"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 37,
      "line_count": 49
    },
    {
      "name": "ProtocolHttpStreamingResponse",
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_http_extended",
      "line_number": 67,
      "methods": [
        "async stream_content(chunk_size: int) -> bytes",
        "async stream_json_lines() -> dict[str, str | int | float | bool]",
        "async stream_text_lines(encoding: str) -> str",
        "async get_full_content() -> bytes"
      ],
      "properties": [
        "status_code",
        "headers",
        "url"
      ],
      "signature_hash": "05bf779a0026",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "stream_content",
        "stream_json_lines",
        "stream_text_lines",
        "get_full_content"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 14,
      "line_count": 32
    },
    {
      "name": "ProtocolHttpExtendedClient",
      "file_path": "src/omnibase_spi/protocols/core/protocol_http_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_http_extended",
      "line_number": 102,
      "methods": [
        "async create_request_builder() -> ProtocolHttpRequestBuilder",
        "async stream_request(method: str, url: str, headers: dict[str, 'ContextValue'] | None) -> ProtocolHttpStreamingResponse",
        "async health_check() -> bool",
        "async close() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_request_builder",
        "stream_request",
        "health_check",
        "close"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 11,
      "line_count": 31
    },
    {
      "name": "ProtocolInputValidator",
      "file_path": "src/omnibase_spi/protocols/core/protocol_input_validator.py",
      "module_path": "omnibase_spi.protocols.core.protocol_input_validator",
      "line_number": 21,
      "methods": [
        "async validate_input(value: 'ContextValue', rules: list[str], validation_level: 'LiteralValidationLevel') -> 'ProtocolValidationResult'",
        "async validate_string(value: str, min_length: int | None, max_length: int | None, pattern: str | None, allow_empty: bool) -> 'ProtocolValidationResult'",
        "async validate_numeric(value: float | int, min_value: float | None, max_value: float | None, allow_negative: bool, precision: int | None) -> 'ProtocolValidationResult'",
        "async validate_collection(value: list[object] | dict[str, object], max_size: int | None, item_rules: list[str] | None, unique_items: bool) -> 'ProtocolValidationResult'",
        "async validate_email(email: str, check_mx: bool, allow_international: bool) -> 'ProtocolValidationResult'",
        "async validate_url(url: str, allowed_schemes: list[str] | None, allow_private_ips: bool, max_length: int) -> 'ProtocolValidationResult'",
        "async sanitize_input(value: str, remove_html: bool, escape_special_chars: bool, normalize_whitespace: bool) -> str",
        "async validate_batch(inputs: list[dict[str, object]], validation_mode: 'LiteralValidationMode') -> list['ProtocolValidationResult']",
        "add_custom_rule(rule_name: str, validator_function: Callable[..., bool], error_message: str) -> bool",
        "async check_security_patterns(value: str, check_sql_injection: bool, check_xss: bool, check_path_traversal: bool, check_command_injection: bool) -> 'ProtocolValidationResult'",
        "async get_validation_statistics(time_window_hours: int) -> dict[str, object]",
        "async validate_with_rate_limit(value: str, caller_id: str, max_requests_per_minute: int, validation_type: str) -> 'ProtocolValidationResult'",
        "async get_rate_limit_status(caller_id: str, validation_type: str) -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_input",
        "validate_string",
        "validate_numeric",
        "validate_collection",
        "validate_email",
        "validate_url",
        "sanitize_input",
        "validate_batch",
        "check_security_patterns",
        "get_validation_statistics",
        "validate_with_rate_limit",
        "get_rate_limit_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 74,
      "line_count": 133
    },
    {
      "name": "ProtocolKafkaClient",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_client.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_client",
      "line_number": 12,
      "methods": [
        "async start() -> None",
        "async stop() -> None",
        "async send_and_wait(topic: str, value: bytes, key: bytes | None) -> None",
        "bootstrap_servers() -> list[str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "start",
        "stop",
        "send_and_wait"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 12,
      "line_count": 35
    },
    {
      "name": "ProtocolKafkaClientProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_client.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_client",
      "line_number": 50,
      "methods": [
        "async create_kafka_client() -> ProtocolKafkaClient",
        "async get_kafka_configuration() -> dict[str, str | int | float | bool]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_kafka_client",
        "get_kafka_configuration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 5,
      "line_count": 6
    },
    {
      "name": "ProtocolKafkaMessage",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_extended",
      "line_number": 14,
      "methods": [],
      "properties": [
        "key",
        "value",
        "topic",
        "partition",
        "offset",
        "timestamp",
        "headers"
      ],
      "signature_hash": "87ec394c9399",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 7,
      "line_count": 15
    },
    {
      "name": "ProtocolKafkaConsumer",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_extended",
      "line_number": 32,
      "methods": [
        "async subscribe_to_topics(topics: list[str], group_id: str) -> None",
        "async unsubscribe_from_topics(topics: list[str]) -> None",
        "async consume_messages(timeout_ms: int, max_messages: int) -> list['ProtocolKafkaMessage']",
        "async consume_messages_stream(batch_timeout_ms: int) -> list['ProtocolKafkaMessage']",
        "async commit_offsets() -> None",
        "async seek_to_beginning(topic: str, partition: int) -> None",
        "async seek_to_end(topic: str, partition: int) -> None",
        "async seek_to_offset(topic: str, partition: int, offset: int) -> None",
        "async get_current_offsets() -> dict[str, dict[int, int]]",
        "async close_consumer() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "subscribe_to_topics",
        "unsubscribe_from_topics",
        "consume_messages",
        "consume_messages_stream",
        "commit_offsets",
        "seek_to_beginning",
        "seek_to_end",
        "seek_to_offset",
        "get_current_offsets",
        "close_consumer"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 37,
      "line_count": 48
    },
    {
      "name": "ProtocolKafkaBatchProducer",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_extended",
      "line_number": 83,
      "methods": [
        "async send_batch(messages: list['ProtocolKafkaMessage']) -> None",
        "async send_to_partition(topic: str, partition: int, key: bytes | None, value: bytes, headers: dict[str, bytes] | None) -> None",
        "async send_with_custom_partitioner(topic: str, key: bytes | None, value: bytes, partition_strategy: str, headers: dict[str, bytes] | None) -> None",
        "async flush_pending(timeout_ms: int) -> None",
        "async get_batch_metrics() -> dict[str, int]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "send_batch",
        "send_to_partition",
        "send_with_custom_partitioner",
        "flush_pending",
        "get_batch_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 23,
      "line_count": 46
    },
    {
      "name": "ProtocolKafkaTransactionalProducer",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_extended",
      "line_number": 132,
      "methods": [
        "async init_transactions(transaction_id: str) -> None",
        "async begin_transaction() -> None",
        "async send_transactional(topic: str, value: bytes, key: bytes | None, headers: dict[str, bytes] | None) -> None",
        "async commit_transaction() -> None",
        "async abort_transaction() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "init_transactions",
        "begin_transaction",
        "send_transactional",
        "commit_transaction",
        "abort_transaction"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 15,
      "line_count": 39
    },
    {
      "name": "ProtocolKafkaExtendedClient",
      "file_path": "src/omnibase_spi/protocols/core/protocol_kafka_extended.py",
      "module_path": "omnibase_spi.protocols.core.protocol_kafka_extended",
      "line_number": 174,
      "methods": [
        "async create_consumer() -> ProtocolKafkaConsumer",
        "async create_batch_producer() -> ProtocolKafkaBatchProducer",
        "async create_transactional_producer() -> ProtocolKafkaTransactionalProducer",
        "async create_topic(topic_name: str, partitions: int, replication_factor: int, config: dict[str, 'ContextValue'] | None) -> None",
        "async delete_topic(topic_name: str) -> None",
        "async list_topics() -> list[str]",
        "async get_topic_metadata(topic_name: str) -> dict[str, str | int]",
        "async health_check() -> bool",
        "async close_client() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_consumer",
        "create_batch_producer",
        "create_transactional_producer",
        "create_topic",
        "delete_topic",
        "list_topics",
        "get_topic_metadata",
        "health_check",
        "close_client"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 26,
      "line_count": 46
    },
    {
      "name": "ProtocolLogger",
      "file_path": "src/omnibase_spi/protocols/core/protocol_logger.py",
      "module_path": "omnibase_spi.protocols.core.protocol_logger",
      "line_number": 12,
      "methods": [
        "emit(level: LiteralLogLevel, message: str, correlation_id: UUID, context: Optional[ProtocolLogContext]) -> None",
        "log(entry: 'ProtocolLogEntry') -> None",
        "is_level_enabled(level: LiteralLogLevel) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 12,
      "line_count": 25
    },
    {
      "name": "ProtocolNodeConfiguration",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_configuration",
      "line_number": 13,
      "methods": [
        "async get_config_value(key: str, default: ContextValue | None) -> ContextValue",
        "async get_timeout_ms(timeout_type: str, default_ms: int | None) -> int",
        "async get_security_config(key: str, default: ContextValue | None) -> ContextValue",
        "async get_business_logic_config(key: str, default: ContextValue | None) -> ContextValue",
        "async get_performance_config(key: str, default: ContextValue | None) -> ContextValue",
        "has_config(key: str) -> bool",
        "async get_all_config() -> dict[str, 'ContextValue']",
        "async validate_config(config_key: str) -> bool",
        "async validate_required_configs(required_keys: list[str]) -> dict[str, bool]",
        "async get_config_schema() -> dict[str, 'ContextValue']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_config_value",
        "get_timeout_ms",
        "get_security_config",
        "get_business_logic_config",
        "get_performance_config",
        "get_all_config",
        "validate_config",
        "validate_required_configs",
        "get_config_schema"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 36,
      "line_count": 65
    },
    {
      "name": "ProtocolNodeConfigurationProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_configuration",
      "line_number": 81,
      "methods": [
        "async load_configuration(node_type: str, node_id: str) -> ProtocolNodeConfiguration",
        "async reload_configuration() -> None",
        "async validate_configuration() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "load_configuration",
        "reload_configuration",
        "validate_configuration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 8,
      "line_count": 15
    },
    {
      "name": "ProtocolConfigurationError",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_configuration",
      "line_number": 99,
      "methods": [
        "__str__() -> str",
        "is_key_error(config_key: str) -> bool",
        "async get_error_context() -> dict[str, str | None]"
      ],
      "properties": [
        "message",
        "key",
        "source"
      ],
      "signature_hash": "3443f0716d52",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_error_context"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 11,
      "line_count": 33
    },
    {
      "name": "ProtocolUtilsNodeConfiguration",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_configuration_utils.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_configuration_utils",
      "line_number": 16,
      "methods": [
        "async get_configuration() -> ProtocolNodeConfiguration",
        "async get_timeout_ms(timeout_type: str, default_ms: int | None) -> int",
        "async get_security_config(key: str, default: ContextValue | None) -> ContextValue",
        "async get_performance_config(key: str, default: ContextValue | None) -> ContextValue",
        "async get_business_logic_config(key: str, default: ContextValue | None) -> ContextValue",
        "async validate_correlation_id(correlation_id: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_configuration",
        "get_timeout_ms",
        "get_security_config",
        "get_performance_config",
        "get_business_logic_config",
        "validate_correlation_id"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 21,
      "line_count": 27
    },
    {
      "name": "ProtocolNodeChangeCallback",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_registry",
      "line_number": 24,
      "methods": [
        "__call__(node_info: 'ProtocolNodeInfo', change_type: str) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 4,
      "line_count": 4
    },
    {
      "name": "ProtocolWatchHandle",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_registry",
      "line_number": 31,
      "methods": [],
      "properties": [
        "watch_id",
        "is_active"
      ],
      "signature_hash": "a55e7eb65506",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 2,
      "line_count": 5
    },
    {
      "name": "ProtocolNodeRegistryConfig",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_registry",
      "line_number": 39,
      "methods": [],
      "properties": [
        "consul_host",
        "consul_port",
        "consul_token",
        "health_check_interval",
        "retry_attempts"
      ],
      "signature_hash": "933a32688ca9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolNodeInfo",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_registry",
      "line_number": 50,
      "methods": [],
      "properties": [
        "node_id",
        "node_type",
        "node_name",
        "environment",
        "group",
        "version",
        "health_status",
        "endpoint",
        "metadata",
        "registered_at",
        "last_heartbeat"
      ],
      "signature_hash": "e826af241689",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolNodeRegistry",
      "file_path": "src/omnibase_spi/protocols/core/protocol_node_registry.py",
      "module_path": "omnibase_spi.protocols.core.protocol_node_registry",
      "line_number": 67,
      "methods": [
        "environment() -> str",
        "consul_endpoint() -> str | None",
        "config() -> ProtocolNodeRegistryConfig | None",
        "async register_node(node_info: 'ProtocolNodeInfo', ttl_seconds: int) -> bool",
        "async unregister_node(node_id: str) -> bool",
        "async update_node_health(node_id: str, health_status: 'LiteralHealthStatus', metadata: dict[str, 'ContextValue']) -> bool",
        "async heartbeat(node_id: str) -> bool",
        "async discover_nodes(node_type: 'LiteralNodeType | None', environment: str | None, group: str | None, health_filter: 'LiteralHealthStatus | None') -> list['ProtocolNodeInfo']",
        "async get_node(node_id: str) -> ProtocolNodeInfo | None",
        "async get_nodes_by_group(group: str) -> list['ProtocolNodeInfo']",
        "async get_gateway_for_group(group: str) -> ProtocolNodeInfo | None",
        "async watch_node_changes(callback: 'ProtocolNodeChangeCallback', node_type: 'LiteralNodeType | None', group: str | None) -> ProtocolWatchHandle",
        "async stop_watch(watch_handle: 'ProtocolWatchHandle') -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "register_node",
        "unregister_node",
        "update_node_health",
        "heartbeat",
        "discover_nodes",
        "get_node",
        "get_nodes_by_group",
        "get_gateway_for_group",
        "watch_node_changes",
        "stop_watch"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 46,
      "line_count": 122
    },
    {
      "name": "ProtocolMetricsCollector",
      "file_path": "src/omnibase_spi/protocols/core/protocol_observability.py",
      "module_path": "omnibase_spi.protocols.core.protocol_observability",
      "line_number": 22,
      "methods": [
        "async record_counter(name: str, value: float, tags: dict[str, 'ContextValue'] | None) -> None",
        "async record_gauge(name: str, value: float, tags: dict[str, 'ContextValue'] | None) -> None",
        "async record_histogram(name: str, value: float, tags: dict[str, 'ContextValue'] | None) -> None",
        "async record_timer(name: str, duration_seconds: float, tags: dict[str, 'ContextValue'] | None) -> None",
        "async record_metrics_batch(metrics: list['ProtocolMetricsPoint']) -> None",
        "async create_metrics_context(default_tags: dict[str, 'ContextValue']) -> 'ProtocolMetricsCollector'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "record_counter",
        "record_gauge",
        "record_histogram",
        "record_timer",
        "record_metrics_batch",
        "create_metrics_context"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 26,
      "line_count": 56
    },
    {
      "name": "ProtocolDistributedTracing",
      "file_path": "src/omnibase_spi/protocols/core/protocol_observability.py",
      "module_path": "omnibase_spi.protocols.core.protocol_observability",
      "line_number": 81,
      "methods": [
        "async start_span(operation_name: str, parent_span_id: 'UUID | None', trace_id: 'UUID | None') -> 'ProtocolTraceSpan'",
        "async finish_span(span_id: 'UUID', status: 'LiteralOperationStatus') -> None",
        "async add_span_tag(span_id: 'UUID', key: str, value: str) -> None",
        "async add_span_log(span_id: 'UUID', message: str, fields: dict[str, object] | None) -> None",
        "extract_trace_context(headers: dict[str, 'ContextValue']) -> tuple['UUID', 'UUID']",
        "inject_trace_context(trace_id: 'UUID', span_id: 'UUID', headers: dict[str, 'ContextValue']) -> None",
        "async get_current_span() -> 'ProtocolTraceSpan | None'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "start_span",
        "finish_span",
        "add_span_tag",
        "add_span_log",
        "get_current_span"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 30,
      "line_count": 65
    },
    {
      "name": "ProtocolAuditLogger",
      "file_path": "src/omnibase_spi/protocols/core/protocol_observability.py",
      "module_path": "omnibase_spi.protocols.core.protocol_observability",
      "line_number": 149,
      "methods": [
        "async log_audit_event(event_type: str, actor: str, resource: str, action: str, outcome: 'LiteralOperationStatus', metadata: dict[str, object] | None, sensitivity_level: str) -> 'ProtocolAuditEvent'",
        "async query_audit_events(start_time: 'ProtocolDateTime', end_time: 'ProtocolDateTime', filters: dict[str, 'ContextValue'] | None) -> list['ProtocolAuditEvent']",
        "async get_audit_statistics(time_window_hours: int) -> dict[str, object]",
        "async archive_audit_events(before_date: 'ProtocolDateTime', archive_location: str) -> int"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "log_audit_event",
        "query_audit_events",
        "get_audit_statistics",
        "archive_audit_events"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 23,
      "line_count": 62
    },
    {
      "name": "ProtocolOnexEnvelope",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_envelope.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_envelope",
      "line_number": 22,
      "methods": [
        "async create_envelope(payload: T, correlation_id: UUID | None, security_context: 'ProtocolOnexSecurityContext | None', metadata: 'ProtocolOnexMetadata | None') -> E",
        "async extract_payload(envelope: E) -> T",
        "async get_correlation_id(envelope: E) -> UUID | None",
        "async get_security_context(envelope: E) -> 'ProtocolOnexSecurityContext | None'",
        "async get_metadata(envelope: E) -> 'ProtocolOnexMetadata | None'",
        "async validate_envelope(envelope: E) -> bool",
        "async get_timestamp(envelope: E) -> datetime",
        "async get_source_tool(envelope: E) -> str | None",
        "async get_target_tool(envelope: E) -> str | None",
        "with_metadata(envelope: E, metadata: 'ProtocolOnexMetadata') -> E",
        "is_onex_compliant(envelope: E) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_envelope",
        "extract_payload",
        "get_correlation_id",
        "get_security_context",
        "get_metadata",
        "validate_envelope",
        "get_timestamp",
        "get_source_tool",
        "get_target_tool"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 37,
      "line_count": 37
    },
    {
      "name": "ProtocolOnexNode",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_node.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_node",
      "line_number": 9,
      "methods": [
        "run() -> Any",
        "async get_node_config() -> 'ProtocolNodeConfiguration'",
        "async get_input_model() -> type[Any]",
        "async get_output_model() -> type[Any]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_node_config",
        "get_input_model",
        "get_output_model"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 10,
      "line_count": 42
    },
    {
      "name": "ProtocolOnexReply",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_reply.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_reply",
      "line_number": 22,
      "methods": [
        "async create_success_reply(data: T, correlation_id: UUID | None, metadata: 'ProtocolOnexMetadata | None') -> R",
        "async create_error_reply(error_message: str, error_code: str | None, error_details: str | None, correlation_id: UUID | None, metadata: 'ProtocolOnexMetadata | None') -> R",
        "async create_validation_error_reply(validation_errors: list[str], correlation_id: UUID | None, metadata: 'ProtocolOnexMetadata | None') -> R",
        "extract_data(reply: R) -> T | None",
        "async get_status(reply: R) -> 'LiteralOnexReplyStatus'",
        "async get_error_message(reply: R) -> str | None",
        "async get_error_code(reply: R) -> str | None",
        "async get_error_details(reply: R) -> str | None",
        "async get_correlation_id(reply: R) -> UUID | None",
        "async get_metadata(reply: R) -> ProtocolOnexMetadata | None",
        "is_success(reply: R) -> bool",
        "is_error(reply: R) -> bool",
        "async get_timestamp(reply: R) -> ProtocolDateTime",
        "async get_processing_time(reply: R) -> float | None",
        "with_metadata(reply: R, metadata: 'ProtocolOnexMetadata') -> R",
        "is_onex_compliant(reply: R) -> bool",
        "async validate_reply(reply: R) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_success_reply",
        "create_error_reply",
        "create_validation_error_reply",
        "get_status",
        "get_error_message",
        "get_error_code",
        "get_error_details",
        "get_correlation_id",
        "get_metadata",
        "get_timestamp",
        "get_processing_time",
        "validate_reply"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 60,
      "line_count": 58
    },
    {
      "name": "ProtocolOnexContractData",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 18,
      "methods": [],
      "properties": [
        "contract_version",
        "node_name",
        "node_type",
        "input_model",
        "output_model"
      ],
      "signature_hash": "4f28af099b20",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolOnexSecurityContext",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 29,
      "methods": [],
      "properties": [
        "user_id",
        "session_id",
        "authentication_token",
        "security_profile"
      ],
      "signature_hash": "b13516a851ce",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolOnexMetadata",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 39,
      "methods": [],
      "properties": [
        "tool_name",
        "tool_version",
        "timestamp",
        "environment"
      ],
      "signature_hash": "30fe29f4b3f6",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolOnexSchema",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 49,
      "methods": [],
      "properties": [
        "schema_type",
        "version",
        "properties"
      ],
      "signature_hash": "354cd421619d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolOnexValidationReport",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 58,
      "methods": [],
      "properties": [
        "total_validations",
        "passed_validations",
        "failed_validations",
        "overall_status",
        "summary"
      ],
      "signature_hash": "5f81c2ba9986",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolOnexValidationResult",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 82,
      "methods": [],
      "properties": [
        "is_valid",
        "compliance_level",
        "validation_type",
        "errors",
        "warnings",
        "metadata"
      ],
      "signature_hash": "bddc0ee11792",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolOnexValidation",
      "file_path": "src/omnibase_spi/protocols/core/protocol_onex_validation.py",
      "module_path": "omnibase_spi.protocols.core.protocol_onex_validation",
      "line_number": 94,
      "methods": [
        "async validate_envelope(envelope: 'ProtocolOnexContractData') -> ProtocolOnexValidationResult",
        "async validate_reply(reply: 'ProtocolOnexContractData') -> ProtocolOnexValidationResult",
        "async validate_contract_compliance(contract_data: 'ProtocolOnexContractData') -> ProtocolOnexValidationResult",
        "async validate_security_context(security_context: 'ProtocolOnexSecurityContext') -> ProtocolOnexValidationResult",
        "async validate_metadata(metadata: 'ProtocolOnexMetadata') -> ProtocolOnexValidationResult",
        "async validate_full_onex_pattern(envelope: 'ProtocolOnexContractData', reply: 'ProtocolOnexContractData') -> ProtocolOnexValidationResult",
        "async check_required_fields(data: 'ProtocolOnexContractData', required_fields: list[str]) -> list[str]",
        "async validate_semantic_versioning(version: str) -> bool",
        "async validate_correlation_id_consistency(envelope: 'ProtocolOnexContractData', reply: 'ProtocolOnexContractData') -> bool",
        "async validate_timestamp_sequence(envelope: 'ProtocolOnexContractData', reply: 'ProtocolOnexContractData') -> bool",
        "async get_validation_schema(validation_type: str) -> 'ProtocolOnexSchema'",
        "async validate_against_schema(data: 'ProtocolOnexContractData', schema: 'ProtocolOnexSchema') -> ProtocolOnexValidationResult",
        "async generate_validation_report(results: list[ProtocolOnexValidationResult]) -> ProtocolOnexValidationReport",
        "async is_production_ready(validation_results: list[ProtocolOnexValidationResult]) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_envelope",
        "validate_reply",
        "validate_contract_compliance",
        "validate_security_context",
        "validate_metadata",
        "validate_full_onex_pattern",
        "check_required_fields",
        "validate_semantic_versioning",
        "validate_correlation_id_consistency",
        "validate_timestamp_sequence",
        "get_validation_schema",
        "validate_against_schema",
        "generate_validation_report",
        "is_production_ready"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 48,
      "line_count": 61
    },
    {
      "name": "ProtocolPerformanceMetricsCollector",
      "file_path": "src/omnibase_spi/protocols/core/protocol_performance_metrics.py",
      "module_path": "omnibase_spi.protocols.core.protocol_performance_metrics",
      "line_number": 21,
      "methods": [
        "async collect_performance_metrics(service_name: str) -> 'ProtocolPerformanceMetrics'",
        "async collect_category_metrics(service_name: str, categories: list['LiteralPerformanceCategory']) -> list['ProtocolPerformanceMetric']",
        "async record_performance_metric(metric: 'ProtocolPerformanceMetric') -> bool",
        "async record_performance_metrics_batch(metrics: list['ProtocolPerformanceMetric']) -> int",
        "async set_performance_threshold(metric_name: str, warning_threshold: float | None, critical_threshold: float | None) -> bool",
        "async get_performance_thresholds(metric_name: str) -> dict[str, float | None]",
        "async check_performance_thresholds(metrics: 'ProtocolPerformanceMetrics') -> list[dict[str, 'ProtocolContextValue']]",
        "async analyze_performance_trends(service_name: str, hours_back: int, categories: list['LiteralPerformanceCategory'] | None) -> dict[str, dict[str, float]]",
        "async get_performance_baseline(service_name: str, metric_name: str) -> dict[str, float]",
        "async establish_performance_baseline(service_name: str, metric_name: str, baseline_period_hours: int) -> bool",
        "async compare_to_baseline(current_metrics: 'ProtocolPerformanceMetrics', baseline_deviation_threshold: float) -> dict[str, dict[str, 'ProtocolContextValue']]",
        "async get_performance_recommendations(service_name: str, performance_issues: list[dict[str, 'ProtocolContextValue']]) -> list[str]",
        "async export_performance_report(service_name: str, start_time: 'ProtocolDateTime', end_time: 'ProtocolDateTime', categories: list['LiteralPerformanceCategory'] | None) -> dict[str, 'ProtocolContextValue']",
        "async start_real_time_monitoring(service_name: str, collection_interval_seconds: int, alert_callback: Callable[..., Any] | None) -> str",
        "async stop_real_time_monitoring(monitoring_session_id: str) -> bool",
        "async get_monitoring_sessions() -> list[dict[str, 'ProtocolContextValue']]",
        "async correlate_cross_service_performance(service_names: list[str], correlation_window_minutes: int) -> dict[str, dict[str, float]]",
        "async identify_performance_bottlenecks(service_name: str, analysis_period_hours: int) -> list[dict[str, 'ProtocolContextValue']]",
        "async predict_performance_issues(service_name: str, prediction_horizon_hours: int) -> list[dict[str, 'ProtocolContextValue']]",
        "async get_performance_summary(service_names: list[str], summary_period_hours: int) -> dict[str, 'ProtocolContextValue']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "collect_performance_metrics",
        "collect_category_metrics",
        "record_performance_metric",
        "record_performance_metrics_batch",
        "set_performance_threshold",
        "get_performance_thresholds",
        "check_performance_thresholds",
        "analyze_performance_trends",
        "get_performance_baseline",
        "establish_performance_baseline",
        "compare_to_baseline",
        "get_performance_recommendations",
        "export_performance_report",
        "start_real_time_monitoring",
        "stop_real_time_monitoring",
        "get_monitoring_sessions",
        "correlate_cross_service_performance",
        "identify_performance_bottlenecks",
        "predict_performance_issues",
        "get_performance_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 98,
      "line_count": 119
    },
    {
      "name": "ProtocolRetryable",
      "file_path": "src/omnibase_spi/protocols/core/protocol_retryable.py",
      "module_path": "omnibase_spi.protocols.core.protocol_retryable",
      "line_number": 22,
      "methods": [
        "async execute_with_retry(operation: Callable[..., Any], config: 'ProtocolRetryConfig') -> 'ProtocolRetryResult'",
        "configure_retry_policy(policy: 'ProtocolRetryPolicy') -> bool",
        "async get_retry_policy() -> 'ProtocolRetryPolicy'",
        "should_retry(error: Exception, attempt_number: int, config: 'ProtocolRetryConfig') -> bool",
        "calculate_backoff_delay(attempt_number: int, strategy: 'LiteralRetryBackoffStrategy', base_delay_ms: int, max_delay_ms: int) -> int",
        "record_retry_attempt(attempt: 'ProtocolRetryAttempt') -> None",
        "async get_retry_metrics() -> dict[str, 'ContextValue']",
        "async reset_retry_budget() -> None",
        "async get_retry_budget_status() -> dict[str, int]",
        "add_retry_condition(condition: 'LiteralRetryCondition', error_types: list[type[BaseException]]) -> bool",
        "remove_retry_condition(condition: 'LiteralRetryCondition') -> bool",
        "async get_retry_conditions() -> list['LiteralRetryCondition']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute_with_retry",
        "get_retry_policy",
        "get_retry_metrics",
        "reset_retry_budget",
        "get_retry_budget_status",
        "get_retry_conditions"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 41,
      "line_count": 75
    },
    {
      "name": "ProtocolSchemaLoader",
      "file_path": "src/omnibase_spi/protocols/core/protocol_schema_loader.py",
      "module_path": "omnibase_spi.protocols.core.protocol_schema_loader",
      "line_number": 15,
      "methods": [
        "async load_onex_yaml(path: str) -> 'ProtocolNodeMetadataBlock'",
        "async load_json_schema(path: str) -> ProtocolSchemaObject",
        "async load_schema_for_node(node: 'ProtocolNodeMetadataBlock') -> ProtocolSchemaObject"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "load_onex_yaml",
        "load_json_schema",
        "load_schema_for_node"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 9,
      "line_count": 13
    },
    {
      "name": "ProtocolServiceDiscovery",
      "file_path": "src/omnibase_spi/protocols/core/protocol_service_discovery.py",
      "module_path": "omnibase_spi.protocols.core.protocol_service_discovery",
      "line_number": 18,
      "methods": [
        "async register_service(service_name: str, service_id: str, host: str, port: int, metadata: 'ProtocolServiceMetadata', health_check_url: str | None, tags: list[str] | None) -> bool",
        "async deregister_service(service_id: str) -> bool",
        "async discover_services(service_name: str, healthy_only: bool, tags: list[str] | None, limit: int | None, offset: int | None) -> tuple[list['ProtocolServiceInstance'], bool]",
        "async get_service_health(service_id: str) -> 'ProtocolServiceHealthStatus'",
        "async set_key_value(key: str, value: str) -> bool",
        "async get_key_value(key: str) -> str | None",
        "async delete_key(key: str) -> bool",
        "async list_keys(prefix: str) -> list[str]",
        "async health_check() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "register_service",
        "deregister_service",
        "discover_services",
        "get_service_health",
        "set_key_value",
        "get_key_value",
        "delete_key",
        "list_keys",
        "health_check"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 40,
      "line_count": 50
    },
    {
      "name": "ProtocolStorageBackend",
      "file_path": "src/omnibase_spi/protocols/core/protocol_storage_backend.py",
      "module_path": "omnibase_spi.protocols.core.protocol_storage_backend",
      "line_number": 19,
      "methods": [
        "async store_checkpoint(checkpoint_data: 'ProtocolCheckpointData') -> 'ProtocolStorageResult'",
        "async retrieve_checkpoint(checkpoint_id: str) -> 'ProtocolStorageResult'",
        "async list_checkpoints(workflow_id: str | None, limit: int | None, offset: int | None) -> 'ProtocolStorageListResult'",
        "async delete_checkpoint(checkpoint_id: str) -> 'ProtocolStorageResult'",
        "async cleanup_expired_checkpoints(retention_hours: int) -> 'ProtocolStorageResult'",
        "async get_storage_status() -> 'ProtocolStorageHealthStatus'",
        "async test_connection() -> 'ProtocolStorageResult'",
        "async initialize_storage() -> 'ProtocolStorageResult'",
        "backend_id() -> str",
        "backend_type() -> str",
        "is_healthy() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "store_checkpoint",
        "retrieve_checkpoint",
        "list_checkpoints",
        "delete_checkpoint",
        "cleanup_expired_checkpoints",
        "get_storage_status",
        "test_connection",
        "initialize_storage"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 29,
      "line_count": 53
    },
    {
      "name": "ProtocolStorageBackendFactory",
      "file_path": "src/omnibase_spi/protocols/core/protocol_storage_backend.py",
      "module_path": "omnibase_spi.protocols.core.protocol_storage_backend",
      "line_number": 75,
      "methods": [
        "async get_storage_backend(backend_type: str, storage_config: 'ProtocolStorageConfiguration', credentials: 'ProtocolStorageCredentials | None') -> 'ProtocolStorageBackend'",
        "async list_available_backends() -> list[str]",
        "async validate_backend_config(backend_type: str, storage_config: 'ProtocolStorageConfiguration') -> 'ProtocolStorageResult'",
        "async get_default_config(backend_type: str) -> 'ProtocolStorageConfiguration'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_storage_backend",
        "list_available_backends",
        "validate_backend_config",
        "get_default_config"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 15,
      "line_count": 25
    },
    {
      "name": "ProtocolTimeBasedOperations",
      "file_path": "src/omnibase_spi/protocols/core/protocol_time_based.py",
      "module_path": "omnibase_spi.protocols.core.protocol_time_based",
      "line_number": 20,
      "methods": [
        "async start_duration_tracking(operation_id: str) -> 'ProtocolDuration'",
        "complete_duration_tracking(operation_id: str) -> 'ProtocolDuration'",
        "async get_operation_duration(operation_id: str) -> 'ProtocolDuration'",
        "async set_timeout(operation_id: str, timeout_ms: int, warning_threshold_ms: int | None) -> 'ProtocolTimeout'",
        "is_timeout_expired(operation_id: str) -> bool",
        "is_timeout_warning(operation_id: str) -> bool",
        "async get_timeout_remaining(operation_id: str) -> int",
        "clear_timeout(operation_id: str) -> bool",
        "async create_time_based_operation(operation_type: 'LiteralTimeBasedType', duration_ms: int) -> 'ProtocolTimeBased'",
        "is_operation_active(operation_id: str) -> bool",
        "has_operation_expired(operation_id: str) -> bool",
        "async get_active_operations() -> list[str]",
        "cleanup_expired_operations() -> int",
        "async get_time_based_metrics() -> dict[str, int | float]",
        "async reset_time_tracking() -> None",
        "schedule_interval_operation(operation_id: str, interval_ms: int) -> 'ProtocolTimeBased'",
        "async set_deadline(operation_id: str, deadline: 'ProtocolDateTime') -> 'ProtocolTimeBased'",
        "async get_deadline_remaining(operation_id: str) -> int"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "start_duration_tracking",
        "get_operation_duration",
        "set_timeout",
        "get_timeout_remaining",
        "create_time_based_operation",
        "get_active_operations",
        "get_time_based_metrics",
        "reset_time_tracking",
        "set_deadline",
        "get_deadline_remaining"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 57,
      "line_count": 87
    },
    {
      "name": "ProtocolValidationRule",
      "file_path": "src/omnibase_spi/protocols/core/protocol_validation_provider.py",
      "module_path": "omnibase_spi.protocols.core.protocol_validation_provider",
      "line_number": 33,
      "methods": [
        "is_applicable(target: ValidationTarget, context: dict[str, 'ContextValue']) -> bool",
        "async validate(target: ValidationTarget, context: dict[str, 'ContextValue']) -> 'ProtocolValidationResult'",
        "async get_dependencies() -> list[str]"
      ],
      "properties": [
        "rule_id",
        "rule_name",
        "rule_description",
        "rule_version",
        "severity",
        "category"
      ],
      "signature_hash": "a238f0e5ee5a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate",
        "get_dependencies"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 17,
      "line_count": 40
    },
    {
      "name": "ProtocolValidationRuleSet",
      "file_path": "src/omnibase_spi/protocols/core/protocol_validation_provider.py",
      "module_path": "omnibase_spi.protocols.core.protocol_validation_provider",
      "line_number": 76,
      "methods": [
        "async get_applicable_rules(target: ValidationTarget, context: dict[str, 'ContextValue']) -> list['ProtocolValidationRule']",
        "resolve_dependencies(rules: list['ProtocolValidationRule']) -> list['ProtocolValidationRule']",
        "async validate_rule_set(context: dict[str, 'ContextValue']) -> bool"
      ],
      "properties": [
        "rule_set_id",
        "rule_set_name",
        "rule_set_version",
        "rules"
      ],
      "signature_hash": "31531cec9bff",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_applicable_rules",
        "validate_rule_set"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 16,
      "line_count": 40
    },
    {
      "name": "ProtocolValidationSession",
      "file_path": "src/omnibase_spi/protocols/core/protocol_validation_provider.py",
      "module_path": "omnibase_spi.protocols.core.protocol_validation_provider",
      "line_number": 119,
      "methods": [
        "async start_validation(validation_name: str, targets: list[ValidationTarget], metadata: 'ProtocolMetadata | None') -> None",
        "async execute_validation_rules(rule_set: 'ProtocolValidationRuleSet', level: 'LiteralValidationLevel', mode: 'LiteralValidationMode', context: dict[str, 'ContextValue'] | None) -> list['ProtocolValidationResult']",
        "async get_session_progress() -> dict[str, 'ContextValue']",
        "async get_session_summary() -> dict[str, 'ContextValue']",
        "cancel_validation() -> bool",
        "end_validation() -> None"
      ],
      "properties": [
        "session_id",
        "session_name",
        "start_time",
        "end_time",
        "is_active"
      ],
      "signature_hash": "dc2a70ff9a4a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "start_validation",
        "execute_validation_rules",
        "get_session_progress",
        "get_session_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 27,
      "line_count": 56
    },
    {
      "name": "ProtocolValidationProvider",
      "file_path": "src/omnibase_spi/protocols/core/protocol_validation_provider.py",
      "module_path": "omnibase_spi.protocols.core.protocol_validation_provider",
      "line_number": 178,
      "methods": [
        "async register_validation_rule(rule: 'ProtocolValidationRule') -> bool",
        "async unregister_validation_rule(rule_id: str) -> bool",
        "async get_validation_rule(rule_id: str) -> 'ProtocolValidationRule | None'",
        "async list_validation_rules(category_filter: 'LiteralValidationCategory | None', severity_filter: 'LiteralValidationSeverity | None') -> list['ProtocolValidationRule']",
        "async create_rule_set(rule_set_name: str, rule_ids: list[str], rule_set_metadata: dict[str, 'ContextValue'] | None) -> 'ProtocolValidationRuleSet'",
        "async create_validation_session(session_name: str, session_metadata: dict[str, 'ContextValue'] | None) -> 'ProtocolValidationSession'",
        "async get_active_sessions() -> list['ProtocolValidationSession']",
        "cleanup_completed_sessions(older_than_hours: int) -> int",
        "async validate(targets: list[ValidationTarget], rule_sets: list['ProtocolValidationRuleSet'], level: 'LiteralValidationLevel', mode: 'LiteralValidationMode', context: dict[str, 'ContextValue'] | None) -> list['ProtocolValidationResult']",
        "async validate_with_session(session: 'ProtocolValidationSession', targets: list[ValidationTarget], rule_sets: list['ProtocolValidationRuleSet'], level: 'LiteralValidationLevel', mode: 'LiteralValidationMode', context: dict[str, 'ContextValue'] | None) -> list['ProtocolValidationResult']",
        "async validate_single(target: ValidationTarget, rule_set: 'ProtocolValidationRuleSet', level: 'LiteralValidationLevel', mode: 'LiteralValidationMode', context: dict[str, 'ContextValue'] | None) -> 'ProtocolValidationResult'",
        "is_validation_successful(results: list['ProtocolValidationResult']) -> bool",
        "async get_critical_issues(results: list['ProtocolValidationResult']) -> list['ProtocolValidationResult']",
        "async get_validation_summary(results: list['ProtocolValidationResult']) -> dict[str, 'ContextValue']",
        "async generate_quality_report(session: 'ProtocolValidationSession', results: list['ProtocolValidationResult'], report_format: str) -> str",
        "async get_provider_metrics() -> dict[str, 'ContextValue']",
        "optimize_rule_execution(rule_sets: list['ProtocolValidationRuleSet']) -> list['ProtocolValidationRuleSet']",
        "clear_validation_cache() -> bool",
        "configure_provider(configuration: dict[str, 'ContextValue']) -> bool",
        "async get_provider_health() -> dict[str, 'ContextValue']",
        "async reset_provider_state() -> bool"
      ],
      "properties": [
        "provider_id",
        "provider_name",
        "provider_version",
        "supported_levels",
        "supported_modes"
      ],
      "signature_hash": "f789fbc8c23e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "register_validation_rule",
        "unregister_validation_rule",
        "get_validation_rule",
        "list_validation_rules",
        "create_rule_set",
        "create_validation_session",
        "get_active_sessions",
        "validate",
        "validate_with_session",
        "validate_single",
        "get_critical_issues",
        "get_validation_summary",
        "generate_quality_report",
        "get_provider_metrics",
        "get_provider_health",
        "reset_provider_state"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 91,
      "line_count": 172
    },
    {
      "name": "ProtocolVersionManager",
      "file_path": "src/omnibase_spi/protocols/core/protocol_version_manager.py",
      "module_path": "omnibase_spi.protocols.core.protocol_version_manager",
      "line_number": 19,
      "methods": [
        "async get_protocol_version_info(protocol_name: str) -> 'ProtocolVersionInfo'",
        "async register_protocol_version(protocol_name: str, version: 'ProtocolSemVer', compatibility_version: 'ProtocolSemVer', migration_guide_url: str | None) -> bool",
        "async check_compatibility(protocol_name: str, required_version: 'ProtocolSemVer', current_version: 'ProtocolSemVer') -> 'ProtocolCompatibilityCheck'",
        "async get_breaking_changes(protocol_name: str, from_version: 'ProtocolSemVer', to_version: 'ProtocolSemVer') -> list[str]",
        "schedule_retirement(protocol_name: str, version: 'ProtocolSemVer', retirement_date: 'ProtocolDateTime', replacement_version: 'ProtocolSemVer | None') -> bool",
        "async get_retired_versions(protocol_name: str) -> list['ProtocolVersionInfo']",
        "is_version_retired(protocol_name: str, version: 'ProtocolSemVer') -> bool",
        "async get_recommended_version(protocol_name: str, current_version: 'ProtocolSemVer') -> 'ProtocolSemVer'",
        "async generate_migration_plan(protocol_name: str, from_version: 'ProtocolSemVer', to_version: 'ProtocolSemVer') -> dict[str, object]",
        "async validate_version_usage(protocol_name: str, version: 'ProtocolSemVer') -> list[str]",
        "async get_version_statistics(time_window_days: int) -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_protocol_version_info",
        "register_protocol_version",
        "check_compatibility",
        "get_breaking_changes",
        "get_retired_versions",
        "get_recommended_version",
        "generate_migration_plan",
        "validate_version_usage",
        "get_version_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 53,
      "line_count": 101
    },
    {
      "name": "ProtocolWorkflowManageable",
      "file_path": "src/omnibase_spi/protocols/core/protocol_workflow_manageable.py",
      "module_path": "omnibase_spi.protocols.core.protocol_workflow_manageable",
      "line_number": 66,
      "methods": [
        "async create_workflow_instance(workflow_type: str, instance_id: UUID, initial_context: dict[str, 'ContextValue'], correlation_metadata: 'ProtocolMetadata', configuration: dict[str, 'ContextValue'] | None) -> 'ProtocolWorkflowSnapshot'",
        "async start_workflow_execution(workflow_type: str, instance_id: UUID, execution_context: dict[str, 'ContextValue']) -> bool",
        "async pause_workflow_execution(workflow_type: str, instance_id: UUID, reason: str | None) -> bool",
        "async resume_workflow_execution(workflow_type: str, instance_id: UUID) -> bool",
        "async terminate_workflow_execution(workflow_type: str, instance_id: UUID, termination_reason: str, force: bool) -> bool",
        "async transition_workflow_state(workflow_type: str, instance_id: UUID, target_state: 'LiteralWorkflowState', event_metadata: dict[str, 'ContextValue'] | None, causation_id: UUID | None) -> bool",
        "async get_workflow_state(workflow_type: str, instance_id: UUID) -> 'LiteralWorkflowState'",
        "async get_workflow_snapshot(workflow_type: str, instance_id: UUID, include_task_details: bool) -> 'ProtocolWorkflowSnapshot'",
        "async schedule_workflow_task(workflow_type: str, instance_id: UUID, task_definition: dict[str, 'ContextValue'], dependencies: list[UUID] | None) -> UUID",
        "async update_task_state(workflow_type: str, instance_id: UUID, task_id: UUID, new_state: 'LiteralTaskState', result_data: dict[str, 'ContextValue'] | None) -> bool",
        "async get_task_dependencies_status(workflow_type: str, instance_id: UUID, task_id: UUID) -> dict[UUID, 'LiteralTaskState']",
        "async handle_workflow_event(workflow_event: 'ProtocolWorkflowEvent') -> bool",
        "async publish_workflow_event(workflow_type: str, instance_id: UUID, event_type: 'LiteralWorkflowEventType', event_data: dict[str, 'ContextValue'], causation_id: UUID | None, correlation_chain: list[UUID] | None) -> UUID",
        "async get_workflow_execution_metrics(workflow_type: str, instance_id: UUID) -> dict[str, 'ContextValue']",
        "async get_workflow_performance_summary(workflow_type: str, instance_id: UUID) -> dict[str, 'ContextValue']",
        "async initiate_compensation(workflow_type: str, instance_id: UUID, compensation_reason: str, failed_task_id: UUID | None) -> bool",
        "async check_compensation_status(workflow_type: str, instance_id: UUID) -> dict[str, 'ContextValue']",
        "async validate_workflow_consistency(workflow_type: str, instance_id: UUID) -> dict[str, 'ContextValue']",
        "async get_workflow_health_status(workflow_type: str, instance_id: UUID) -> dict[str, 'ContextValue']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_workflow_instance",
        "start_workflow_execution",
        "pause_workflow_execution",
        "resume_workflow_execution",
        "terminate_workflow_execution",
        "transition_workflow_state",
        "get_workflow_state",
        "get_workflow_snapshot",
        "schedule_workflow_task",
        "update_task_state",
        "get_task_dependencies_status",
        "handle_workflow_event",
        "publish_workflow_event",
        "get_workflow_execution_metrics",
        "get_workflow_performance_summary",
        "initiate_compensation",
        "check_compensation_status",
        "validate_workflow_consistency",
        "get_workflow_health_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 104,
      "line_count": 128
    },
    {
      "name": "ProtocolWorkflow",
      "file_path": "src/omnibase_spi/protocols/core/protocol_workflow_reducer.py",
      "module_path": "omnibase_spi.protocols.core.protocol_workflow_reducer",
      "line_number": 22,
      "methods": [
        "async run() -> Any"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "run"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 2,
      "line_count": 4
    },
    {
      "name": "ProtocolWorkflowReducer",
      "file_path": "src/omnibase_spi/protocols/core/protocol_workflow_reducer.py",
      "module_path": "omnibase_spi.protocols.core.protocol_workflow_reducer",
      "line_number": 29,
      "methods": [
        "initial_state() -> ProtocolState",
        "dispatch(state: 'ProtocolState', action: 'ProtocolAction') -> ProtocolState",
        "async dispatch_async(state: 'ProtocolState', action: 'ProtocolAction') -> ProtocolNodeResult",
        "async create_workflow() -> ProtocolWorkflow | None",
        "async validate_state_transition(from_state: 'ProtocolState', action: 'ProtocolAction', to_state: 'ProtocolState') -> bool",
        "async get_state_schema() -> dict[str, ContextValue] | None",
        "async get_action_schema() -> dict[str, ContextValue] | None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "dispatch_async",
        "create_workflow",
        "validate_state_transition",
        "get_state_schema",
        "get_action_schema"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "core",
      "complexity_score": 23,
      "line_count": 70
    },
    {
      "name": "ProtocolHandlerInfo",
      "file_path": "src/omnibase_spi/protocols/discovery/protocol_handler_discovery.py",
      "module_path": "omnibase_spi.protocols.discovery.protocol_handler_discovery",
      "line_number": 18,
      "methods": [],
      "properties": [
        "node_class",
        "name",
        "source",
        "priority",
        "extensions",
        "special_files",
        "metadata"
      ],
      "signature_hash": "b5bced57cddb",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "discovery",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolHandlerDiscovery",
      "file_path": "src/omnibase_spi/protocols/discovery/protocol_handler_discovery.py",
      "module_path": "omnibase_spi.protocols.discovery.protocol_handler_discovery",
      "line_number": 31,
      "methods": [
        "async discover_nodes() -> list['ProtocolHandlerInfo']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "discover_nodes"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "discovery",
      "complexity_score": 3,
      "line_count": 71
    },
    {
      "name": "ProtocolNodeDiscoveryRegistry",
      "file_path": "src/omnibase_spi/protocols/discovery/protocol_handler_discovery.py",
      "module_path": "omnibase_spi.protocols.discovery.protocol_handler_discovery",
      "line_number": 105,
      "methods": [
        "async register_discovery_source(discovery: 'ProtocolHandlerDiscovery') -> None",
        "async discover_and_register_nodes() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "register_discovery_source",
        "discover_and_register_nodes"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "discovery",
      "complexity_score": 5,
      "line_count": 13
    },
    {
      "name": "ProtocolEventBusHeaders",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus",
      "line_number": 13,
      "methods": [
        "content_type() -> str",
        "correlation_id() -> UUID",
        "message_id() -> UUID",
        "timestamp() -> ProtocolDateTime",
        "source() -> str",
        "event_type() -> str",
        "schema_version() -> ProtocolSemVer",
        "destination() -> str | None",
        "trace_id() -> str | None",
        "span_id() -> str | None",
        "parent_span_id() -> str | None",
        "operation_name() -> str | None",
        "priority() -> Literal['low', 'normal', 'high', 'critical'] | None",
        "routing_key() -> str | None",
        "partition_key() -> str | None",
        "retry_count() -> int | None",
        "max_retries() -> int | None",
        "ttl_seconds() -> int | None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 37,
      "line_count": 67
    },
    {
      "name": "ProtocolKafkaEventBusAdapter",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus",
      "line_number": 83,
      "methods": [
        "async publish(topic: str, key: bytes | None, value: bytes, headers: 'ProtocolEventBusHeaders') -> None",
        "async subscribe(topic: str, group_id: str, on_message: Callable[[ProtocolEventMessage], Awaitable[None]]) -> Callable[[], Awaitable[None]]",
        "async close() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish",
        "subscribe",
        "close"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 15,
      "line_count": 76
    },
    {
      "name": "ProtocolEventBus",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus",
      "line_number": 162,
      "methods": [
        "adapter() -> ProtocolKafkaEventBusAdapter",
        "environment() -> str",
        "group() -> str",
        "async publish(topic: str, key: bytes | None, value: bytes, headers: 'ProtocolEventBusHeaders | None') -> None",
        "async subscribe(topic: str, group_id: str, on_message: Callable[[ProtocolEventMessage], Awaitable[None]]) -> Callable[[], Awaitable[None]]",
        "async broadcast_to_environment(command: str, payload: dict[str, ContextValue], target_environment: str | None) -> None",
        "async send_to_group(command: str, payload: dict[str, ContextValue], target_group: str) -> None",
        "async close() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish",
        "subscribe",
        "broadcast_to_environment",
        "send_to_group",
        "close"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 31,
      "line_count": 47
    },
    {
      "name": "ProtocolEventBusContextManager",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_context_manager.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_context_manager",
      "line_number": 17,
      "methods": [
        "async __aenter__() -> 'ProtocolEventBus'",
        "async __aexit__(exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: object) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "__aenter__",
        "__aexit__"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 7,
      "line_count": 37
    },
    {
      "name": "ProtocolEventBusInMemory",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_in_memory.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_in_memory",
      "line_number": 17,
      "methods": [
        "async get_event_history() -> list[ProtocolEventMessage]",
        "clear_event_history() -> None",
        "async get_subscriber_count() -> int"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_event_history",
        "get_subscriber_count"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 7,
      "line_count": 40
    },
    {
      "name": "ProtocolEventBusBase",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_mixin",
      "line_number": 18,
      "methods": [
        "async publish(event: ProtocolEventMessage) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 3,
      "line_count": 15
    },
    {
      "name": "ProtocolSyncEventBus",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_mixin",
      "line_number": 36,
      "methods": [
        "async publish_sync(event: ProtocolEventMessage) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish_sync"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 3,
      "line_count": 15
    },
    {
      "name": "ProtocolAsyncEventBus",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_mixin",
      "line_number": 54,
      "methods": [
        "async publish_async(event: ProtocolEventMessage) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish_async"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 3,
      "line_count": 15
    },
    {
      "name": "ProtocolRegistryWithBus",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_mixin",
      "line_number": 72,
      "methods": [
        "async validate_registry_bus() -> bool",
        "has_bus_access() -> bool"
      ],
      "properties": [
        "event_bus"
      ],
      "signature_hash": "d665468625a4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_registry_bus"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 5,
      "line_count": 18
    },
    {
      "name": "ProtocolLogEmitter",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_mixin.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_mixin",
      "line_number": 93,
      "methods": [
        "emit_log_event(level: LiteralLogLevel, message: str, data: dict[str, str | int | float | bool]) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 5,
      "line_count": 19
    },
    {
      "name": "ProtocolEventBusService",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_service.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_service",
      "line_number": 17,
      "methods": [
        "async get_event_bus() -> 'ProtocolEventBus'",
        "shutdown() -> None",
        "is_running() -> bool",
        "async get_node_count() -> int",
        "async list_nodes() -> list[str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_event_bus",
        "get_node_count",
        "list_nodes"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 11,
      "line_count": 23
    },
    {
      "name": "ProtocolHttpEventBusAdapter",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_service.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_service",
      "line_number": 43,
      "methods": [
        "async publish(event: 'ProtocolEventMessage') -> bool",
        "async subscribe(handler: Callable[['ProtocolEventMessage'], Awaitable[bool]]) -> bool",
        "async unsubscribe(handler: Callable[['ProtocolEventMessage'], Awaitable[bool]]) -> bool",
        "is_healthy() -> bool",
        "async close() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish",
        "subscribe",
        "unsubscribe",
        "close"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 13,
      "line_count": 21
    },
    {
      "name": "ProtocolEventBusCredentials",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_types",
      "line_number": 11,
      "methods": [
        "async validate_credentials() -> bool",
        "is_secure() -> bool"
      ],
      "properties": [
        "token",
        "username",
        "password",
        "cert",
        "key",
        "ca",
        "extra"
      ],
      "signature_hash": "2e38930034a8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_credentials"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 11,
      "line_count": 17
    },
    {
      "name": "ProtocolEventPubSub",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_event_bus_types",
      "line_number": 31,
      "methods": [
        "credentials() -> ProtocolEventBusCredentials | None",
        "async publish(event: 'ProtocolEvent') -> None",
        "async publish_async(event: 'ProtocolEvent') -> None",
        "async subscribe(callback: Callable[[ProtocolEvent], None]) -> None",
        "async subscribe_async(callback: Callable[[ProtocolEvent], None]) -> None",
        "async unsubscribe(callback: Callable[[ProtocolEvent], None]) -> None",
        "async unsubscribe_async(callback: Callable[[ProtocolEvent], None]) -> None",
        "clear() -> None",
        "bus_id() -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish",
        "publish_async",
        "subscribe",
        "subscribe_async",
        "unsubscribe",
        "unsubscribe_async"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 24,
      "line_count": 34
    },
    {
      "name": "ProtocolKafkaConfig",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_kafka_adapter.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_kafka_adapter",
      "line_number": 29,
      "methods": [],
      "properties": [
        "security_protocol",
        "sasl_mechanism",
        "sasl_username",
        "sasl_password",
        "ssl_cafile",
        "auto_offset_reset",
        "enable_auto_commit",
        "session_timeout_ms",
        "request_timeout_ms"
      ],
      "signature_hash": "aac428303acc",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolKafkaAdapter",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_kafka_adapter.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_kafka_adapter",
      "line_number": 44,
      "methods": [
        "bootstrap_servers() -> str",
        "environment() -> str",
        "group() -> str",
        "config() -> ProtocolKafkaConfig | None",
        "kafka_config() -> ProtocolKafkaConfig",
        "async build_topic_name(topic: str) -> str",
        "async publish(topic: str, key: bytes | None, value: bytes, headers: EventBusHeaders) -> None",
        "async subscribe(topic: str, group_id: str, on_message: Callable[['ProtocolEventMessage'], Awaitable[None]]) -> Callable[[], Awaitable[None]]",
        "async close() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "build_topic_name",
        "publish",
        "subscribe",
        "close"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 28,
      "line_count": 42
    },
    {
      "name": "ProtocolRedpandaAdapter",
      "file_path": "src/omnibase_spi/protocols/event_bus/protocol_redpanda_adapter.py",
      "module_path": "omnibase_spi.protocols.event_bus.protocol_redpanda_adapter",
      "line_number": 32,
      "methods": [
        "redpanda_optimized_defaults() -> dict[str, 'ContextValue']",
        "bootstrap_servers() -> str",
        "environment() -> str",
        "group() -> str",
        "config() -> Optional[KafkaConfig]",
        "kafka_config() -> KafkaConfig",
        "async build_topic_name(topic: str) -> str",
        "async publish(topic: str, key: bytes | None, value: bytes, headers: EventBusHeaders) -> None",
        "async subscribe(topic: str, group_id: str, on_message: Callable[['ProtocolEventMessage'], Awaitable[None]]) -> Callable[[], Awaitable[None]]",
        "async close() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "build_topic_name",
        "publish",
        "subscribe",
        "close"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "events",
      "complexity_score": 32,
      "line_count": 46
    },
    {
      "name": "ProtocolFileReader",
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_reader.py",
      "module_path": "omnibase_spi.protocols.file_handling.protocol_file_reader",
      "line_number": 14,
      "methods": [
        "async read_text(path: str) -> str",
        "async read_yaml(path: str, data_class: type[T]) -> T",
        "async exists(path: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "read_text",
        "read_yaml",
        "exists"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "files",
      "complexity_score": 10,
      "line_count": 15
    },
    {
      "name": "ProtocolStampOptions",
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_type_handler.py",
      "module_path": "omnibase_spi.protocols.file_handling.protocol_file_type_handler",
      "line_number": 17,
      "methods": [],
      "properties": [
        "force",
        "backup",
        "dry_run"
      ],
      "signature_hash": "7c9ccaad620c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "files",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolValidationOptions",
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_type_handler.py",
      "module_path": "omnibase_spi.protocols.file_handling.protocol_file_type_handler",
      "line_number": 25,
      "methods": [],
      "properties": [
        "strict",
        "verbose",
        "check_syntax"
      ],
      "signature_hash": "d4945ac076b8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "files",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolFileTypeHandler",
      "file_path": "src/omnibase_spi/protocols/file_handling/protocol_file_type_handler.py",
      "module_path": "omnibase_spi.protocols.file_handling.protocol_file_type_handler",
      "line_number": 33,
      "methods": [
        "async metadata() -> ProtocolNodeMetadata",
        "node_name() -> str",
        "node_version() -> ProtocolSemVer",
        "node_author() -> str",
        "node_description() -> str",
        "supported_extensions() -> list[str]",
        "supported_filenames() -> list[str]",
        "node_priority() -> int",
        "requires_content_analysis() -> bool",
        "async can_handle(path: str, content: str) -> ProtocolCanHandleResult",
        "async extract_block(path: str, content: str) -> ProtocolExtractedBlock",
        "serialize_block(meta: ProtocolExtractedBlock) -> ProtocolSerializedBlock",
        "normalize_rest(rest: str) -> str",
        "async stamp(path: str, content: str, options: ProtocolStampOptions) -> ProtocolOnexResult",
        "async pre_validate(path: str, content: str, options: ProtocolValidationOptions) -> ProtocolOnexResult | None",
        "async post_validate(path: str, content: str, options: ProtocolValidationOptions) -> ProtocolOnexResult | None",
        "async validate(path: str, content: str, options: ProtocolValidationOptions) -> ProtocolOnexResult"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "metadata",
        "can_handle",
        "extract_block",
        "stamp",
        "pre_validate",
        "post_validate",
        "validate"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "files",
      "complexity_score": 54,
      "line_count": 83
    },
    {
      "name": "ProtocolMCPServiceDiscovery",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_discovery.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_discovery",
      "line_number": 24,
      "methods": [
        "async discover_mcp_services(service_type: LiteralMCPSubsystemType | None, timeout_seconds: int) -> list[ProtocolMCPDiscoveryInfo]",
        "async discover_registries(timeout_seconds: int) -> list[ProtocolMCPDiscoveryInfo]",
        "async register_service_for_discovery(service_info: ProtocolMCPDiscoveryInfo, ttl_seconds: int) -> bool",
        "async unregister_service_from_discovery(service_name: str) -> bool",
        "async monitor_service_changes(callback: Callable[[ProtocolMCPDiscoveryInfo], None], service_type: LiteralMCPSubsystemType | None) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "discover_mcp_services",
        "discover_registries",
        "register_service_for_discovery",
        "unregister_service_from_discovery",
        "monitor_service_changes"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 20,
      "line_count": 27
    },
    {
      "name": "ProtocolMCPDiscovery",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_discovery.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_discovery",
      "line_number": 54,
      "methods": [
        "service_discovery() -> ProtocolMCPServiceDiscovery",
        "async discover_available_subsystems(service_type: LiteralMCPSubsystemType | None, health_check: bool, timeout_seconds: int) -> list[ProtocolMCPSubsystemRegistration]",
        "async discover_available_tools(service_type: LiteralMCPSubsystemType | None, tool_tags: list[str] | None, health_check: bool) -> dict[str, list[str]]",
        "async find_optimal_registry(criteria: dict[str, str | int | float | bool] | None, timeout_seconds: int) -> ProtocolMCPDiscoveryInfo | None",
        "async coordinate_multi_registry(registries: list[ProtocolMCPDiscoveryInfo], coordination_strategy: str) -> dict[str, str | int | float | bool]",
        "async monitor_network_changes(callback: Callable[[ProtocolMCPDiscoveryInfo], None], service_types: list[LiteralMCPSubsystemType] | None, change_types: list[str] | None) -> bool",
        "async get_network_topology(include_health: bool) -> dict[str, str | int | float | bool | list[str]]",
        "async test_service_connectivity(service_info: ProtocolMCPDiscoveryInfo, test_tools: bool) -> dict[str, str | int | float | bool]",
        "async get_service_health_status(service_name: str) -> LiteralHealthStatus | None",
        "async update_service_cache(force_refresh: bool, service_type: LiteralMCPSubsystemType | None) -> int",
        "async configure_discovery_backend(backend_type: str, configuration: dict[str, ContextValue]) -> bool",
        "async get_discovery_statistics() -> dict[str, str | int | float | bool]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "discover_available_subsystems",
        "discover_available_tools",
        "find_optimal_registry",
        "coordinate_multi_registry",
        "monitor_network_changes",
        "get_network_topology",
        "test_service_connectivity",
        "get_service_health_status",
        "update_service_cache",
        "configure_discovery_backend",
        "get_discovery_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 53,
      "line_count": 70
    },
    {
      "name": "ProtocolMCPHealthMonitor",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_monitor.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_monitor",
      "line_number": 20,
      "methods": [
        "async perform_health_check(subsystem: ProtocolMCPSubsystemRegistration, check_tools: bool) -> ProtocolMCPHealthCheck",
        "async monitor_subsystem_health(subsystem_id: str, interval_seconds: int, callback: Callable[[Any], Any] | None) -> bool",
        "async stop_health_monitoring(subsystem_id: str) -> bool",
        "async get_health_status(subsystem_id: str) -> ProtocolMCPHealthCheck | None",
        "async get_health_history(subsystem_id: str, hours: int, limit: int) -> list[ProtocolMCPHealthCheck]",
        "async detect_health_anomalies(subsystem_id: str | None, time_window_hours: int) -> list[dict[str, ContextValue]]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "perform_health_check",
        "monitor_subsystem_health",
        "stop_health_monitoring",
        "get_health_status",
        "get_health_history",
        "detect_health_anomalies"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 27,
      "line_count": 32
    },
    {
      "name": "ProtocolMCPMonitor",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_monitor.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_monitor",
      "line_number": 55,
      "methods": [
        "health_monitor() -> ProtocolMCPHealthMonitor",
        "async start_comprehensive_monitoring(registry_config: dict[str, ContextValue], monitoring_config: dict[str, ContextValue] | None) -> bool",
        "async stop_all_monitoring() -> bool",
        "async collect_system_metrics(time_range_minutes: int) -> dict[str, ContextValue]",
        "async generate_alerts(alert_config: dict[str, ContextValue] | None) -> list[dict[str, ContextValue]]",
        "async monitor_subsystem_performance(subsystem_id: str, interval_seconds: int, callback: Callable[[Any], Any] | None) -> bool",
        "async analyze_performance_trends(subsystem_id: str | None, time_range_hours: int, metrics: list[str] | None) -> dict[str, ContextValue]",
        "async generate_health_report(time_range_hours: int, include_recommendations: bool) -> dict[str, ContextValue]",
        "async configure_alerting(alert_handlers: list[Callable[[Any], Any]], thresholds: dict[str, ContextValue], escalation_rules: dict[str, ContextValue] | None) -> bool",
        "async get_monitoring_status() -> dict[str, ContextValue]",
        "async generate_dashboard_data(dashboard_config: dict[str, ContextValue] | None) -> dict[str, ContextValue]",
        "async export_monitoring_data(format_type: str, time_range_hours: int, include_raw_data: bool) -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "start_comprehensive_monitoring",
        "stop_all_monitoring",
        "collect_system_metrics",
        "generate_alerts",
        "monitor_subsystem_performance",
        "analyze_performance_trends",
        "generate_health_report",
        "configure_alerting",
        "get_monitoring_status",
        "generate_dashboard_data",
        "export_monitoring_data"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 51,
      "line_count": 67
    },
    {
      "name": "ProtocolMCPRegistry",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_registry.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_registry",
      "line_number": 36,
      "methods": [
        "config() -> ProtocolMCPRegistryConfig",
        "async register_subsystem(subsystem_metadata: ProtocolMCPSubsystemMetadata, tools: list[ProtocolMCPToolDefinition], api_key: str, configuration: dict[str, ContextValue] | None) -> str",
        "async unregister_subsystem(registration_id: str) -> bool",
        "async update_subsystem_heartbeat(registration_id: str, health_status: str | None, metadata: dict[str, ContextValue] | None) -> bool",
        "async get_subsystem_registration(registration_id: str) -> ProtocolMCPSubsystemRegistration | None",
        "async get_all_subsystems(subsystem_type: LiteralMCPSubsystemType | None, status_filter: LiteralOperationStatus | None) -> list[ProtocolMCPSubsystemRegistration]",
        "async discover_tools(tool_type: LiteralMCPToolType | None, tags: list[str] | None, subsystem_id: str | None) -> list[ProtocolMCPToolDefinition]",
        "async get_tool_definition(tool_name: str) -> ProtocolMCPToolDefinition | None",
        "async get_all_tool_implementations(tool_name: str) -> list[ProtocolMCPToolDefinition]",
        "async execute_tool(tool_name: str, parameters: dict[str, ContextValue], correlation_id: UUID, timeout_seconds: int | None, preferred_subsystem: str | None) -> dict[str, ContextValue]",
        "async get_tool_execution(execution_id: str) -> ProtocolMCPToolExecution | None",
        "async get_tool_executions(tool_name: str | None, subsystem_id: str | None, correlation_id: UUID | None, limit: int) -> list[ProtocolMCPToolExecution]",
        "async cancel_tool_execution(execution_id: str) -> bool",
        "async validate_subsystem_registration(subsystem_metadata: ProtocolMCPSubsystemMetadata, tools: list[ProtocolMCPToolDefinition]) -> ProtocolMCPValidationResult",
        "async validate_tool_parameters(tool_name: str, parameters: dict[str, 'ContextValue']) -> ProtocolValidationResult",
        "async perform_health_check(registration_id: str) -> ProtocolMCPHealthCheck",
        "async get_subsystem_health(registration_id: str) -> ProtocolMCPHealthCheck | None",
        "async cleanup_expired_registrations() -> int",
        "async update_subsystem_configuration(registration_id: str, configuration: dict[str, ContextValue]) -> bool",
        "async get_registry_status() -> ProtocolMCPRegistryStatus",
        "async get_registry_metrics() -> ProtocolMCPRegistryMetrics"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "register_subsystem",
        "unregister_subsystem",
        "update_subsystem_heartbeat",
        "get_subsystem_registration",
        "get_all_subsystems",
        "discover_tools",
        "get_tool_definition",
        "get_all_tool_implementations",
        "execute_tool",
        "get_tool_execution",
        "get_tool_executions",
        "cancel_tool_execution",
        "validate_subsystem_registration",
        "validate_tool_parameters",
        "perform_health_check",
        "get_subsystem_health",
        "cleanup_expired_registrations",
        "update_subsystem_configuration",
        "get_registry_status",
        "get_registry_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 82,
      "line_count": 112
    },
    {
      "name": "ProtocolMCPRegistryAdmin",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_registry.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_registry",
      "line_number": 151,
      "methods": [
        "async set_maintenance_mode(enabled: bool) -> bool",
        "async force_subsystem_cleanup(registration_id: str) -> bool",
        "async update_registry_configuration(configuration: dict[str, ContextValue]) -> bool",
        "async export_registry_state() -> dict[str, ContextValue]",
        "async import_registry_state(state_data: dict[str, ContextValue]) -> bool",
        "async get_system_diagnostics() -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "set_maintenance_mode",
        "force_subsystem_cleanup",
        "update_registry_configuration",
        "export_registry_state",
        "import_registry_state",
        "get_system_diagnostics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 18,
      "line_count": 23
    },
    {
      "name": "ProtocolMCPRegistryMetricsOperations",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_registry.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_registry",
      "line_number": 177,
      "methods": [
        "async get_execution_metrics(time_range_hours: int, tool_name: str | None, subsystem_id: str | None) -> dict[str, ContextValue]",
        "async get_performance_trends(metric_name: str, time_range_hours: int) -> dict[str, ContextValue]",
        "async get_error_analysis(time_range_hours: int) -> dict[str, ContextValue]",
        "async get_capacity_metrics() -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_execution_metrics",
        "get_performance_trends",
        "get_error_analysis",
        "get_capacity_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 18,
      "line_count": 21
    },
    {
      "name": "ProtocolMCPSubsystemConfig",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_subsystem_client.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_subsystem_client",
      "line_number": 29,
      "methods": [],
      "properties": [
        "subsystem_metadata",
        "registry_url",
        "api_key",
        "heartbeat_interval",
        "tool_definitions",
        "auto_register",
        "retry_count",
        "timeout_seconds",
        "health_check_endpoint",
        "configuration"
      ],
      "signature_hash": "304c104a8a7c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolMCPSubsystemClient",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_subsystem_client.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_subsystem_client",
      "line_number": 45,
      "methods": [
        "config() -> ProtocolMCPSubsystemConfig",
        "registration_id() -> str | None",
        "lifecycle_state() -> LiteralMCPLifecycleState",
        "async connection_status() -> LiteralMCPConnectionStatus",
        "async register_subsystem() -> str",
        "async unregister_subsystem() -> bool",
        "async start_heartbeat(interval: int | None) -> bool",
        "async stop_heartbeat() -> bool",
        "async send_heartbeat(health_status: str | None, metadata: dict[str, ContextValue] | None) -> bool",
        "async register_tool_handler(tool_name: str, handler: Callable[[dict[str, ContextValue]], dict[str, ContextValue]]) -> bool",
        "async unregister_tool_handler(tool_name: str) -> bool",
        "async get_registered_tools() -> list[str]",
        "async execute_tool_locally(tool_name: str, parameters: dict[str, ContextValue], execution_id: str, correlation_id: UUID) -> dict[str, ContextValue]",
        "async validate_configuration() -> ProtocolValidationResult",
        "async validate_tool_parameters(tool_name: str, parameters: dict[str, ContextValue]) -> ProtocolValidationResult",
        "async perform_local_health_check() -> ProtocolMCPHealthCheck",
        "async get_subsystem_status() -> dict[str, ContextValue]",
        "async update_configuration(configuration: dict[str, 'ContextValue']) -> bool",
        "async get_registration_info() -> ProtocolMCPSubsystemRegistration | None",
        "async test_registry_connection() -> bool",
        "async get_tool_execution_history(tool_name: str | None, limit: int) -> list[ProtocolMCPToolExecution]",
        "async shutdown_gracefully(timeout_seconds: int) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "connection_status",
        "register_subsystem",
        "unregister_subsystem",
        "start_heartbeat",
        "stop_heartbeat",
        "send_heartbeat",
        "register_tool_handler",
        "unregister_tool_handler",
        "get_registered_tools",
        "execute_tool_locally",
        "validate_configuration",
        "validate_tool_parameters",
        "perform_local_health_check",
        "get_subsystem_status",
        "update_configuration",
        "get_registration_info",
        "test_registry_connection",
        "get_tool_execution_history",
        "shutdown_gracefully"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 64,
      "line_count": 83
    },
    {
      "name": "ProtocolMCPToolRouter",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_tool_proxy.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_tool_proxy",
      "line_number": 23,
      "methods": [
        "async select_tool_implementation(tool_name: str, parameters: dict[str, ContextValue], routing_policy: str | None) -> ProtocolMCPToolDefinition | None",
        "async get_available_implementations(tool_name: str) -> list[ProtocolMCPToolDefinition]",
        "async check_implementation_health(tool_def: 'ProtocolMCPToolDefinition') -> bool",
        "async get_routing_statistics() -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "select_tool_implementation",
        "get_available_implementations",
        "check_implementation_health",
        "get_routing_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 15,
      "line_count": 25
    },
    {
      "name": "ProtocolMCPToolExecutor",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_tool_proxy.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_tool_proxy",
      "line_number": 51,
      "methods": [
        "async execute_tool(tool_def: ProtocolMCPToolDefinition, subsystem: ProtocolMCPSubsystemRegistration, parameters: dict[str, ContextValue], execution_id: str, correlation_id: UUID, timeout_seconds: int | None) -> dict[str, ContextValue]",
        "async execute_with_retry(tool_def: ProtocolMCPToolDefinition, subsystem: ProtocolMCPSubsystemRegistration, parameters: dict[str, ContextValue], execution_id: str, correlation_id: UUID, max_retries: int | None) -> dict[str, ContextValue]",
        "async cancel_execution(execution_id: str) -> bool",
        "async get_execution_status(execution_id: str) -> LiteralMCPExecutionStatus | None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute_tool",
        "execute_with_retry",
        "cancel_execution",
        "get_execution_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 24,
      "line_count": 33
    },
    {
      "name": "ProtocolMCPToolProxy",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_tool_proxy.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_tool_proxy",
      "line_number": 87,
      "methods": [
        "router() -> ProtocolMCPToolRouter",
        "executor() -> ProtocolMCPToolExecutor",
        "async proxy_tool_execution(tool_name: str, parameters: dict[str, ContextValue], correlation_id: UUID, timeout_seconds: int | None, routing_policy: str | None, preferred_subsystem: str | None) -> dict[str, ContextValue]",
        "async proxy_batch_execution(requests: list[dict[str, ContextValue]], correlation_id: UUID, max_parallel: int) -> list[dict[str, ContextValue]]",
        "async get_active_executions(tool_name: str | None) -> list[ProtocolMCPToolExecution]",
        "async get_execution_history(tool_name: str | None, subsystem_id: str | None, correlation_id: UUID | None, limit: int) -> list[ProtocolMCPToolExecution]",
        "async cancel_execution(execution_id: str) -> bool",
        "async cancel_all_executions(tool_name: str | None, subsystem_id: str | None) -> int",
        "async get_execution_metrics(time_range_hours: int, tool_name: str | None) -> dict[str, ContextValue]",
        "async get_load_balancing_stats() -> dict[str, ContextValue]",
        "async configure_caching(tool_name: str, cache_ttl_seconds: int, cache_key_fields: list[str]) -> bool",
        "async clear_cache(tool_name: str | None) -> int",
        "async validate_proxy_configuration() -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "proxy_tool_execution",
        "proxy_batch_execution",
        "get_active_executions",
        "get_execution_history",
        "cancel_execution",
        "cancel_all_executions",
        "get_execution_metrics",
        "get_load_balancing_stats",
        "configure_caching",
        "clear_cache",
        "validate_proxy_configuration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 57,
      "line_count": 71
    },
    {
      "name": "ProtocolMCPToolValidator",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_validator.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_validator",
      "line_number": 25,
      "methods": [
        "async validate_tool_definition(tool_def: ProtocolMCPToolDefinition) -> ProtocolMCPValidationResult",
        "async validate_tool_parameters(tool_def: ProtocolMCPToolDefinition, parameters: dict[str, ContextValue]) -> ProtocolValidationResult",
        "async validate_parameter_schema(schema: dict[str, ContextValue]) -> ProtocolMCPValidationResult",
        "async sanitize_parameters(tool_def: ProtocolMCPToolDefinition, parameters: dict[str, ContextValue]) -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_tool_definition",
        "validate_tool_parameters",
        "validate_parameter_schema",
        "sanitize_parameters"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 15,
      "line_count": 23
    },
    {
      "name": "ProtocolMCPValidator",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_mcp_validator.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_mcp_validator",
      "line_number": 51,
      "methods": [
        "tool_validator() -> ProtocolMCPToolValidator",
        "async validate_subsystem_registration(subsystem_metadata: ProtocolMCPSubsystemMetadata, tools: list[ProtocolMCPToolDefinition], api_key: str) -> ProtocolMCPValidationResult",
        "async validate_execution_request(tool_name: str, parameters: dict[str, ContextValue], subsystem_id: str | None) -> ProtocolValidationResult",
        "async validate_api_key(api_key: str, subsystem_id: str | None) -> bool",
        "async validate_configuration(configuration: dict[str, ContextValue]) -> ProtocolMCPValidationResult",
        "async validate_network_access(base_url: str, endpoints: list[str]) -> ProtocolMCPValidationResult",
        "async sanitize_subsystem_metadata(metadata: ProtocolMCPSubsystemMetadata) -> ProtocolMCPSubsystemMetadata",
        "async detect_security_issues(parameters: dict[str, ContextValue], tool_definition: ProtocolMCPToolDefinition | None) -> list[ProtocolMCPValidationError]",
        "async validate_compatibility(subsystem_version: str, registry_version: str, tools: list[ProtocolMCPToolDefinition]) -> ProtocolMCPValidationResult",
        "async validate_performance_constraints(tools: list[ProtocolMCPToolDefinition], expected_load: dict[str, ContextValue] | None) -> ProtocolMCPValidationResult",
        "async get_validation_rules() -> dict[str, ContextValue]",
        "async update_validation_rules(rules: dict[str, ContextValue]) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_subsystem_registration",
        "validate_execution_request",
        "validate_api_key",
        "validate_configuration",
        "validate_network_access",
        "sanitize_subsystem_metadata",
        "detect_security_issues",
        "validate_compatibility",
        "validate_performance_constraints",
        "get_validation_rules",
        "update_validation_rules"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 46,
      "line_count": 72
    },
    {
      "name": "ProtocolToolDiscoveryService",
      "file_path": "src/omnibase_spi/protocols/mcp/protocol_tool_discovery_service.py",
      "module_path": "omnibase_spi.protocols.mcp.protocol_tool_discovery_service",
      "line_number": 18,
      "methods": [
        "resolve_tool_from_contract(metadata: ProtocolMetadata, registry: object, contract_path: str) -> ProtocolToolInstance",
        "async discover_tool_class_from_module(module_path: str, tool_class_name: str) -> ProtocolToolClass",
        "instantiate_tool_with_container(tool_class: ProtocolToolClass, container: object) -> ProtocolToolInstance",
        "resolve_tool_from_registry(registry: object, tool_class_name: str) -> ProtocolToolInstance | None",
        "async build_module_path_from_contract(contract_path: str) -> str",
        "async validate_module_path(module_path: str) -> bool",
        "async convert_class_name_to_registry_key(class_name: str) -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "discover_tool_class_from_module",
        "build_module_path_from_contract",
        "validate_module_path",
        "convert_class_name_to_registry_key"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "mcp",
      "complexity_score": 26,
      "line_count": 59
    },
    {
      "name": "ProtocolKeyValueStore",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 40,
      "methods": [
        "keys() -> list[str]",
        "async get_value(key: str) -> str | None",
        "has_key(key: str) -> bool",
        "async validate_store() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_value",
        "validate_store"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 11,
      "line_count": 11
    },
    {
      "name": "ProtocolMemoryMetadata",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 54,
      "methods": [
        "metadata_keys() -> list[str]",
        "async get_metadata_value(key: str) -> str | None",
        "has_metadata_key(key: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_metadata_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 9
    },
    {
      "name": "ProtocolWorkflowConfiguration",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 66,
      "methods": [
        "configuration_keys() -> list[str]",
        "async get_configuration_value(key: str) -> str | None",
        "async validate_configuration() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_configuration_value",
        "validate_configuration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 9
    },
    {
      "name": "ProtocolAnalysisParameters",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 78,
      "methods": [
        "parameter_keys() -> list[str]",
        "async get_parameter_value(key: str) -> str | None",
        "async validate_parameters() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_parameter_value",
        "validate_parameters"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 9
    },
    {
      "name": "ProtocolAggregationCriteria",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 90,
      "methods": [
        "criteria_keys() -> list[str]",
        "async get_criteria_value(key: str) -> str | None",
        "async validate_criteria() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_criteria_value",
        "validate_criteria"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 9
    },
    {
      "name": "ProtocolCoordinationMetadata",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 102,
      "methods": [
        "metadata_keys() -> list[str]",
        "async get_metadata_value(key: str) -> str | None",
        "async validate_metadata() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_metadata_value",
        "validate_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 9
    },
    {
      "name": "ProtocolAnalysisResults",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 114,
      "methods": [
        "result_keys() -> list[str]",
        "async get_result_value(key: str) -> str | None",
        "has_result_key(key: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_result_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 9
    },
    {
      "name": "ProtocolAggregatedData",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 126,
      "methods": [
        "data_keys() -> list[str]",
        "async get_data_value(key: str) -> str | None",
        "async validate_data() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_data_value",
        "validate_data"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 9
    },
    {
      "name": "ProtocolMemoryErrorContext",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 138,
      "methods": [
        "context_keys() -> list[str]",
        "async get_context_value(key: str) -> str | None",
        "add_context(key: str, value: str) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_context_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 9
    },
    {
      "name": "ProtocolPageInfo",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 150,
      "methods": [
        "info_keys() -> list[str]",
        "async get_info_value(key: str) -> str | None",
        "has_next_page() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_info_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 9
    },
    {
      "name": "ProtocolCustomMetrics",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 162,
      "methods": [
        "metric_names() -> list[str]",
        "async get_metric_value(name: str) -> float | None",
        "has_metric(name: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_metric_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 9
    },
    {
      "name": "ProtocolAggregationSummary",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 174,
      "methods": [
        "summary_keys() -> list[str]",
        "async get_summary_value(key: str) -> float | None",
        "calculate_total() -> float",
        "async validate_record_data() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_summary_value",
        "validate_record_data"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 11
    },
    {
      "name": "ProtocolMemoryRecord",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 188,
      "methods": [
        "embedding() -> list[float] | None",
        "related_memories() -> list[UUID]"
      ],
      "properties": [
        "memory_id",
        "content",
        "content_type",
        "created_at",
        "updated_at",
        "access_level",
        "source_agent",
        "expires_at"
      ],
      "signature_hash": "0a9d8594a089",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 14,
      "line_count": 17
    },
    {
      "name": "ProtocolSearchResult",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 208,
      "methods": [
        "highlighted_content() -> str | None"
      ],
      "properties": [
        "memory_record",
        "relevance_score",
        "match_type"
      ],
      "signature_hash": "5a0a093c6009",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolSearchFilters",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 220,
      "methods": [
        "tags() -> list[str] | None"
      ],
      "properties": [
        "content_types",
        "access_levels",
        "source_agents",
        "date_range_start",
        "date_range_end"
      ],
      "signature_hash": "3e46710a2a9e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolAgentStatusMap",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 234,
      "methods": [
        "agent_ids() -> list[UUID]",
        "async get_agent_status(agent_id: UUID) -> str | None",
        "async set_agent_status(agent_id: UUID, status: str) -> None",
        "responding_agents() -> list[UUID]",
        "add_agent_response(agent_id: UUID, response: str) -> None",
        "async get_all_statuses() -> dict[UUID, str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_agent_status",
        "set_agent_status",
        "get_all_statuses"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 20,
      "line_count": 16
    },
    {
      "name": "ProtocolAgentResponseMap",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 253,
      "methods": [
        "responding_agents() -> list[UUID]",
        "async get_agent_response(agent_id: UUID) -> str | None",
        "add_agent_response(agent_id: UUID, response: str) -> None",
        "async get_all_responses() -> dict[UUID, str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_agent_response",
        "get_all_responses"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 13,
      "line_count": 11
    },
    {
      "name": "ProtocolErrorCategoryMap",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_base.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_base",
      "line_number": 267,
      "methods": [
        "category_names() -> list[str]",
        "async get_category_count(category: str) -> int",
        "increment_category(category: str) -> None",
        "async get_all_counts() -> dict[str, int]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_category_count",
        "get_all_counts"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 12,
      "line_count": 11
    },
    {
      "name": "ProtocolWorkflowManager",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_composable",
      "line_number": 29,
      "methods": [
        "async execute_workflow(request: 'ProtocolWorkflowExecutionRequest', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolWorkflowExecutionResponse'",
        "async pause_workflow(workflow_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async resume_workflow(workflow_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async cancel_workflow(workflow_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async get_workflow_status(workflow_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute_workflow",
        "pause_workflow",
        "resume_workflow",
        "cancel_workflow",
        "get_workflow_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 25,
      "line_count": 42
    },
    {
      "name": "ProtocolAgentCoordinator",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_composable",
      "line_number": 74,
      "methods": [
        "async coordinate_agents(request: 'ProtocolAgentCoordinationRequest', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolAgentCoordinationResponse'",
        "async register_agent(agent_id: UUID, agent_capabilities: list[str], agent_metadata: 'ProtocolMemoryMetadata', security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async unregister_agent(agent_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async get_agent_status(agent_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async list_available_agents(capability_filter: list[str] | None, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "coordinate_agents",
        "register_agent",
        "unregister_agent",
        "get_agent_status",
        "list_available_agents"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 27,
      "line_count": 44
    },
    {
      "name": "ProtocolClusterCoordinator",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_composable",
      "line_number": 121,
      "methods": [
        "async broadcast_update(update_type: str, update_data: 'ProtocolMemoryMetadata', target_nodes: list[UUID] | None, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async synchronize_state(node_ids: list[UUID], synchronization_scope: 'ProtocolMemoryMetadata', security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async get_cluster_status(include_node_details: bool, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async perform_cluster_maintenance(maintenance_type: str, maintenance_parameters: 'ProtocolMemoryMetadata', security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "broadcast_update",
        "synchronize_state",
        "get_cluster_status",
        "perform_cluster_maintenance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 26,
      "line_count": 41
    },
    {
      "name": "ProtocolLifecycleManager",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_composable",
      "line_number": 165,
      "methods": [
        "async apply_retention_policies(policy_scope: 'ProtocolMemoryMetadata', dry_run: bool, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async archive_memories(memory_ids: list[UUID], archive_destination: str, archive_format: str, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async cleanup_expired_memories(cleanup_scope: 'ProtocolMemoryMetadata', safety_threshold_hours: int, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async restore_archived_memories(archive_reference: str, restore_destination: str | None, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "apply_retention_policies",
        "archive_memories",
        "cleanup_expired_memories",
        "restore_archived_memories"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 29,
      "line_count": 44
    },
    {
      "name": "ProtocolMemoryOrchestrator",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_composable",
      "line_number": 212,
      "methods": [
        "async health_check(check_scope: str, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [
        "workflow_manager",
        "agent_coordinator",
        "cluster_coordinator",
        "lifecycle_manager"
      ],
      "signature_hash": "19db0abd8302",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "health_check"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 19
    },
    {
      "name": "ProtocolComputeNodeComposite",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_composable.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_composable",
      "line_number": 234,
      "methods": [
        "async process_semantics(content: str, processing_options: 'ProtocolMemoryMetadata', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async analyze_patterns(data_source: 'ProtocolMemoryMetadata', analysis_type: str, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async generate_embeddings(content_items: list[str], embedding_model: str | None, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "process_semantics",
        "analyze_patterns",
        "generate_embeddings"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 18,
      "line_count": 31
    },
    {
      "name": "ProtocolErrorCategory",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_error_handling",
      "line_number": 20,
      "methods": [
        "error_type() -> str",
        "error_severity() -> str",
        "is_retryable() -> bool",
        "default_retry_count() -> int",
        "async classify_error(error: Exception) -> str",
        "async get_recovery_strategy() -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "classify_error",
        "get_recovery_strategy"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 13,
      "line_count": 23
    },
    {
      "name": "ProtocolMemoryRetryPolicy",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_error_handling",
      "line_number": 46,
      "methods": [
        "max_attempts() -> int",
        "base_delay_ms() -> int",
        "max_delay_ms() -> int",
        "backoff_multiplier() -> float",
        "jitter_enabled() -> bool",
        "async should_retry(error: Exception, attempt: int) -> bool",
        "async calculate_delay(attempt: int) -> int",
        "async reset_policy() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "should_retry",
        "calculate_delay",
        "reset_policy"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 19,
      "line_count": 28
    },
    {
      "name": "ProtocolMemoryCompensationAction",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_error_handling",
      "line_number": 77,
      "methods": [
        "action_id() -> UUID",
        "operation_id() -> UUID",
        "compensation_type() -> str",
        "is_idempotent() -> bool",
        "async execute_compensation() -> bool",
        "async validate_compensation() -> bool",
        "async get_compensation_metadata() -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute_compensation",
        "validate_compensation",
        "get_compensation_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 14,
      "line_count": 25
    },
    {
      "name": "ProtocolOperationContext",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_error_handling",
      "line_number": 105,
      "methods": [
        "operation_id() -> UUID",
        "operation_type() -> str",
        "start_time() -> 'datetime'",
        "timeout_ms() -> int",
        "correlation_id() -> UUID | None",
        "user_context() -> dict[str, str] | None",
        "retry_count() -> int",
        "has_timed_out() -> bool",
        "async get_elapsed_time_ms() -> int",
        "increment_retry_count() -> None",
        "add_context_data(key: str, value: str) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_elapsed_time_ms"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 25,
      "line_count": 36
    },
    {
      "name": "ProtocolMemoryErrorHandler",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_error_handling",
      "line_number": 144,
      "methods": [
        "error_categories() -> list['ProtocolErrorCategory']",
        "retry_policies() -> dict[str, 'ProtocolMemoryRetryPolicy']",
        "compensation_actions() -> list['ProtocolMemoryCompensationAction']",
        "async handle_error(error: Exception, context: 'ProtocolOperationContext') -> bool",
        "async classify_error(error: Exception) -> 'ProtocolErrorCategory'",
        "async should_retry_operation(error: Exception, context: 'ProtocolOperationContext') -> bool",
        "async execute_retry(operation_func: Callable[..., Any], context: 'ProtocolOperationContext', retry_policy: 'ProtocolMemoryRetryPolicy') -> Any",
        "async execute_compensation(context: 'ProtocolOperationContext') -> bool",
        "async log_error(error: Exception, context: 'ProtocolOperationContext', recovery_action: str) -> None",
        "async get_error_statistics() -> dict[str, int]",
        "async reset_error_statistics() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "handle_error",
        "classify_error",
        "should_retry_operation",
        "execute_retry",
        "execute_compensation",
        "log_error",
        "get_error_statistics",
        "reset_error_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 38,
      "line_count": 48
    },
    {
      "name": "ProtocolMemoryHealthMonitor",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_error_handling.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_error_handling",
      "line_number": 195,
      "methods": [
        "health_status() -> str",
        "error_rate_threshold() -> float",
        "response_time_threshold_ms() -> int",
        "monitoring_window_minutes() -> int",
        "async record_operation(operation_type: str, duration_ms: int, success: bool) -> None",
        "async record_error(error_category: str, error_severity: str) -> None",
        "async get_current_error_rate() -> float",
        "async get_average_response_time_ms() -> float",
        "async get_health_metrics() -> dict[str, float]",
        "async check_health_thresholds() -> bool",
        "async get_health_recommendations() -> list[str]",
        "async reset_health_metrics() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "record_operation",
        "record_error",
        "get_current_error_rate",
        "get_average_response_time_ms",
        "get_health_metrics",
        "check_health_thresholds",
        "get_health_recommendations",
        "reset_health_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 31,
      "line_count": 37
    },
    {
      "name": "ProtocolMemoryError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 35,
      "methods": [
        "error_context() -> 'ProtocolMemoryErrorContext'",
        "recoverable() -> bool",
        "retry_strategy() -> str | None"
      ],
      "properties": [
        "error_code",
        "error_message",
        "error_timestamp",
        "correlation_id",
        "error_category"
      ],
      "signature_hash": "a1b719aa00c0",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 11,
      "line_count": 17
    },
    {
      "name": "ProtocolMemoryErrorResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 55,
      "methods": [
        "error_message() -> str | None",
        "retry_after_seconds() -> int | None"
      ],
      "properties": [
        "correlation_id",
        "response_timestamp",
        "success",
        "error",
        "suggested_action"
      ],
      "signature_hash": "0122083dd0d5",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 14
    },
    {
      "name": "ProtocolMemoryValidationError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 72,
      "methods": [
        "invalid_fields() -> list[str]"
      ],
      "properties": [
        "validation_failures"
      ],
      "signature_hash": "bb52af1f981d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolMemoryAuthorizationError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 82,
      "methods": [
        "missing_permissions() -> list[str]"
      ],
      "properties": [
        "required_permissions",
        "user_permissions"
      ],
      "signature_hash": "4a71f73fa2ca",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolMemoryNotFoundError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 93,
      "methods": [
        "async get_search_suggestions() -> list[str]"
      ],
      "properties": [
        "requested_memory_id",
        "suggested_alternatives"
      ],
      "signature_hash": "5d8567a7f36a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_search_suggestions"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 7
    },
    {
      "name": "ProtocolMemoryTimeoutError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 103,
      "methods": [
        "progress_percentage() -> float | None"
      ],
      "properties": [
        "timeout_seconds",
        "operation_type",
        "partial_results"
      ],
      "signature_hash": "fbfd3ee6a1ad",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolMemoryCapacityError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 115,
      "methods": [
        "usage_percentage() -> float"
      ],
      "properties": [
        "resource_type",
        "current_usage",
        "maximum_capacity"
      ],
      "signature_hash": "1b5dff5eb515",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolMemoryCorruptionError",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 127,
      "methods": [
        "async is_backup_available() -> bool"
      ],
      "properties": [
        "corruption_type",
        "affected_memory_ids",
        "recovery_possible"
      ],
      "signature_hash": "fe176cb06679",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "is_backup_available"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolErrorRecoveryStrategy",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 138,
      "methods": [
        "success_probability() -> float",
        "async execute_recovery() -> bool"
      ],
      "properties": [
        "strategy_type",
        "recovery_steps",
        "estimated_recovery_time"
      ],
      "signature_hash": "e0ef65c43669",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute_recovery"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 11
    },
    {
      "name": "ProtocolMemoryErrorRecoveryResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 152,
      "methods": [
        "error_message() -> str | None",
        "recovery_details() -> str | None"
      ],
      "properties": [
        "correlation_id",
        "response_timestamp",
        "success",
        "recovery_attempted",
        "recovery_successful",
        "recovery_strategy"
      ],
      "signature_hash": "aae38515ffeb",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 15
    },
    {
      "name": "ProtocolBatchErrorSummary",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 170,
      "methods": [
        "failure_rate() -> float",
        "most_common_error() -> str | None"
      ],
      "properties": [
        "total_operations",
        "failed_operations",
        "error_categories"
      ],
      "signature_hash": "3cda3d78ea91",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 12
    },
    {
      "name": "ProtocolBatchErrorResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_errors.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_errors",
      "line_number": 185,
      "methods": [
        "error_message() -> str | None",
        "retry_after_seconds() -> int | None",
        "partial_success_recovery() -> 'ProtocolErrorRecoveryStrategy | None'"
      ],
      "properties": [
        "correlation_id",
        "response_timestamp",
        "success",
        "error",
        "suggested_action",
        "batch_summary",
        "individual_errors"
      ],
      "signature_hash": "91369ed453ee",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 13,
      "line_count": 19
    },
    {
      "name": "ProtocolMemoryEffectNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_operations",
      "line_number": 59,
      "methods": [
        "async store_memory(request: 'ProtocolMemoryStoreRequest', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryStoreResponse'",
        "async retrieve_memory(request: 'ProtocolMemoryRetrieveRequest', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryRetrieveResponse'",
        "async update_memory(memory_id: UUID, updates: 'ProtocolMemoryMetadata', security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async delete_memory(memory_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async list_memories(request: 'ProtocolMemoryListRequest', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryListResponse'",
        "async batch_store_memories(request: 'ProtocolBatchMemoryStoreRequest', security_context: 'ProtocolMemorySecurityContext | None', rate_limit_config: 'ProtocolRateLimitConfig | None', timeout_seconds: float | None) -> 'ProtocolBatchMemoryStoreResponse'",
        "async batch_retrieve_memories(request: 'ProtocolBatchMemoryRetrieveRequest', security_context: 'ProtocolMemorySecurityContext | None', rate_limit_config: 'ProtocolRateLimitConfig | None', timeout_seconds: float | None) -> 'ProtocolBatchMemoryRetrieveResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "store_memory",
        "retrieve_memory",
        "update_memory",
        "delete_memory",
        "list_memories",
        "batch_store_memories",
        "batch_retrieve_memories"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 40,
      "line_count": 61
    },
    {
      "name": "ProtocolMemoryComputeNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_operations",
      "line_number": 123,
      "methods": [
        "async semantic_search(request: 'ProtocolSemanticSearchRequest') -> 'ProtocolSemanticSearchResponse'",
        "async generate_embedding(text: str, model: str | None, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async analyze_patterns(request: 'ProtocolPatternAnalysisRequest', timeout_seconds: float | None) -> 'ProtocolPatternAnalysisResponse'",
        "async extract_insights(memory_ids: list[UUID], analysis_type: 'LiteralAnalysisType', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async compare_semantics(content_a: str, content_b: str, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "semantic_search",
        "generate_embedding",
        "analyze_patterns",
        "extract_insights",
        "compare_semantics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 25,
      "line_count": 41
    },
    {
      "name": "ProtocolMemoryReducerNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_operations",
      "line_number": 167,
      "methods": [
        "async consolidate_memories(request: 'ProtocolConsolidationRequest', timeout_seconds: float | None) -> 'ProtocolConsolidationResponse'",
        "async deduplicate_memories(memory_scope: 'ProtocolMemoryMetadata', similarity_threshold: float, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async aggregate_data(aggregation_criteria: 'ProtocolAggregationCriteria', time_window_start: str | None, time_window_end: str | None, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async compress_memories(memory_ids: list[UUID], compression_algorithm: 'LiteralCompressionAlgorithm', quality_threshold: float, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async optimize_storage(optimization_strategy: str, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "consolidate_memories",
        "deduplicate_memories",
        "aggregate_data",
        "compress_memories",
        "optimize_storage"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 29,
      "line_count": 46
    },
    {
      "name": "ProtocolMemoryOrchestratorNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_operations",
      "line_number": 216,
      "methods": [
        "async execute_workflow(request: 'ProtocolWorkflowExecutionRequest', timeout_seconds: float | None) -> 'ProtocolWorkflowExecutionResponse'",
        "async coordinate_agents(request: 'ProtocolAgentCoordinationRequest', timeout_seconds: float | None) -> 'ProtocolAgentCoordinationResponse'",
        "async broadcast_update(update_type: str, update_data: 'ProtocolMemoryMetadata', target_agents: list[UUID] | None, correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async synchronize_state(agent_ids: list[UUID], synchronization_scope: 'ProtocolMemoryMetadata', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'",
        "async manage_lifecycle(lifecycle_policies: 'ProtocolMemoryMetadata', correlation_id: UUID | None, timeout_seconds: float | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute_workflow",
        "coordinate_agents",
        "broadcast_update",
        "synchronize_state",
        "manage_lifecycle"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 26,
      "line_count": 43
    },
    {
      "name": "ProtocolMemoryHealthNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_operations.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_operations",
      "line_number": 262,
      "methods": [
        "async check_health(correlation_id: UUID | None) -> 'ProtocolMemoryResponse'",
        "async collect_metrics(request: 'ProtocolMemoryMetricsRequest') -> 'ProtocolMemoryMetricsResponse'",
        "async get_status(include_detailed: bool, correlation_id: UUID | None) -> 'ProtocolMemoryResponse'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "check_health",
        "collect_metrics",
        "get_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 19
    },
    {
      "name": "ProtocolMemoryRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 39,
      "methods": [
        "operation_type() -> str"
      ],
      "properties": [
        "correlation_id",
        "request_timestamp"
      ],
      "signature_hash": "3a9909665b4e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 8
    },
    {
      "name": "ProtocolMemoryStoreRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 49,
      "methods": [
        "async metadata() -> 'ProtocolMemoryMetadata | None'"
      ],
      "properties": [
        "content",
        "content_type",
        "access_level",
        "source_agent",
        "expires_at"
      ],
      "signature_hash": "b095e562a81a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolMemoryRetrieveRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 61,
      "methods": [
        "related_depth() -> int"
      ],
      "properties": [
        "memory_id",
        "include_related",
        "timeout_seconds"
      ],
      "signature_hash": "8392eb262d03",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolMemoryListRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 72,
      "methods": [
        "include_content() -> bool"
      ],
      "properties": [
        "pagination",
        "filters",
        "timeout_seconds"
      ],
      "signature_hash": "a2671f5bea46",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolBatchMemoryStoreRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 83,
      "methods": [
        "transaction_isolation() -> str",
        "parallel_execution() -> bool"
      ],
      "properties": [
        "memory_records",
        "batch_size",
        "fail_on_first_error",
        "timeout_seconds"
      ],
      "signature_hash": "40e766984e32",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 13
    },
    {
      "name": "ProtocolBatchMemoryRetrieveRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 98,
      "methods": [
        "related_depth() -> int"
      ],
      "properties": [
        "memory_ids",
        "include_related",
        "fail_on_missing",
        "timeout_seconds"
      ],
      "signature_hash": "5f5256b0b1f2",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 6,
      "line_count": 10
    },
    {
      "name": "ProtocolSemanticSearchRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 110,
      "methods": [
        "embedding_model() -> str | None"
      ],
      "properties": [
        "query",
        "limit",
        "similarity_threshold",
        "filters",
        "timeout_seconds"
      ],
      "signature_hash": "54927be69aa6",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 11
    },
    {
      "name": "ProtocolPatternAnalysisRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 123,
      "methods": [
        "analysis_parameters() -> 'ProtocolAnalysisParameters'"
      ],
      "properties": [
        "data_source",
        "analysis_type",
        "timeout_seconds"
      ],
      "signature_hash": "76bf99ae2c61",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolEmbeddingRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 134,
      "methods": [],
      "properties": [
        "text",
        "algorithm",
        "timeout_seconds"
      ],
      "signature_hash": "85ce22b4f928",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolConsolidationRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 142,
      "methods": [],
      "properties": [
        "memory_ids",
        "consolidation_strategy",
        "timeout_seconds"
      ],
      "signature_hash": "cf8e29c37926",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolAggregationRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 150,
      "methods": [],
      "properties": [
        "aggregation_criteria",
        "time_window_start",
        "time_window_end",
        "timeout_seconds"
      ],
      "signature_hash": "d36636d5c799",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolWorkflowExecutionRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 159,
      "methods": [
        "async get_target_agents() -> list[UUID]"
      ],
      "properties": [
        "workflow_type",
        "workflow_configuration",
        "timeout_seconds"
      ],
      "signature_hash": "80d47f8440d9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_target_agents"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 6,
      "line_count": 8
    },
    {
      "name": "ProtocolAgentCoordinationRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 169,
      "methods": [
        "async coordination_metadata() -> 'ProtocolCoordinationMetadata'"
      ],
      "properties": [
        "agent_ids",
        "coordination_task",
        "timeout_seconds"
      ],
      "signature_hash": "f8608c30983d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "coordination_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolPaginationRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 179,
      "methods": [
        "sort_by() -> str | None",
        "sort_order() -> str"
      ],
      "properties": [
        "limit",
        "offset",
        "cursor"
      ],
      "signature_hash": "f74f97bc14a5",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 12
    },
    {
      "name": "ProtocolMemoryMetricsRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 193,
      "methods": [
        "include_detailed_breakdown() -> bool"
      ],
      "properties": [
        "metric_types",
        "time_window_start",
        "time_window_end",
        "aggregation_level",
        "timeout_seconds"
      ],
      "signature_hash": "bf432a91c7db",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 11
    },
    {
      "name": "ProtocolStreamingMemoryRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 206,
      "methods": [
        "compression_enabled() -> bool"
      ],
      "properties": [
        "stream_type",
        "chunk_size",
        "timeout_seconds"
      ],
      "signature_hash": "a5bcc8fe047c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolStreamingRetrieveRequest",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_requests.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_requests",
      "line_number": 217,
      "methods": [
        "max_content_size() -> int | None"
      ],
      "properties": [
        "memory_ids",
        "include_metadata"
      ],
      "signature_hash": "09bbd69d8dfa",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 8
    },
    {
      "name": "ProtocolMemoryResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 45,
      "methods": [
        "error_message() -> str | None"
      ],
      "properties": [
        "correlation_id",
        "response_timestamp",
        "success"
      ],
      "signature_hash": "2ac6762c0019",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 9
    },
    {
      "name": "ProtocolMemoryStoreResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 57,
      "methods": [],
      "properties": [
        "memory_id",
        "storage_location"
      ],
      "signature_hash": "a5e733ad32e2",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 2,
      "line_count": 5
    },
    {
      "name": "ProtocolMemoryRetrieveResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 65,
      "methods": [
        "related_memories() -> list['ProtocolMemoryRecord']"
      ],
      "properties": [
        "memory"
      ],
      "signature_hash": "bc4357b1ae1d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolMemoryListResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 75,
      "methods": [],
      "properties": [
        "memories",
        "pagination"
      ],
      "signature_hash": "e9df2b35c7f4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 2,
      "line_count": 5
    },
    {
      "name": "ProtocolBatchOperationResult",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 83,
      "methods": [
        "execution_time_ms() -> int"
      ],
      "properties": [
        "operation_index",
        "success",
        "result_id",
        "error"
      ],
      "signature_hash": "9ffbaa041319",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 6,
      "line_count": 10
    },
    {
      "name": "ProtocolBatchMemoryStoreResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 96,
      "methods": [
        "partial_success() -> bool"
      ],
      "properties": [
        "results",
        "total_processed",
        "successful_count",
        "failed_count",
        "batch_execution_time_ms"
      ],
      "signature_hash": "277a467804f9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 11
    },
    {
      "name": "ProtocolBatchMemoryRetrieveResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 110,
      "methods": [],
      "properties": [
        "results",
        "memories",
        "missing_ids",
        "batch_execution_time_ms"
      ],
      "signature_hash": "2f94e19d53a8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolSemanticSearchResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 120,
      "methods": [
        "async get_query_embedding() -> list[float] | None"
      ],
      "properties": [
        "results",
        "total_matches",
        "search_time_ms"
      ],
      "signature_hash": "e1f994e751a8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_query_embedding"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 6,
      "line_count": 8
    },
    {
      "name": "ProtocolPatternAnalysisResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 131,
      "methods": [
        "confidence_scores() -> list[float]"
      ],
      "properties": [
        "patterns_found",
        "analysis_results"
      ],
      "signature_hash": "df4ecce886bd",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolEmbeddingResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 142,
      "methods": [],
      "properties": [
        "embedding",
        "algorithm_used",
        "dimensions"
      ],
      "signature_hash": "4afe45054e72",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolConsolidationResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 151,
      "methods": [],
      "properties": [
        "consolidated_memory_id",
        "source_memory_ids"
      ],
      "signature_hash": "15acd4e03c80",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 2,
      "line_count": 5
    },
    {
      "name": "ProtocolAggregationResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 159,
      "methods": [],
      "properties": [
        "aggregated_data",
        "aggregation_metadata"
      ],
      "signature_hash": "930dcbce59ee",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 2,
      "line_count": 5
    },
    {
      "name": "ProtocolWorkflowExecutionResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 167,
      "methods": [
        "agent_statuses() -> 'ProtocolAgentStatusMap'"
      ],
      "properties": [
        "workflow_id",
        "execution_status"
      ],
      "signature_hash": "1149b55ef926",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 8
    },
    {
      "name": "ProtocolAgentCoordinationResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 178,
      "methods": [
        "async agent_responses() -> 'ProtocolAgentResponseMap'"
      ],
      "properties": [
        "coordination_id",
        "coordination_status"
      ],
      "signature_hash": "641d15d6e609",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "agent_responses"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolPaginationResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 188,
      "methods": [
        "page_info() -> 'ProtocolPageInfo'"
      ],
      "properties": [
        "total_count",
        "has_next_page",
        "has_previous_page",
        "next_cursor",
        "previous_cursor"
      ],
      "signature_hash": "49f7a478e861",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 11
    },
    {
      "name": "ProtocolMemoryMetrics",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 202,
      "methods": [
        "async throughput_ops_per_second() -> float",
        "error_rate_percent() -> float",
        "custom_metrics() -> 'ProtocolCustomMetrics'"
      ],
      "properties": [
        "operation_type",
        "execution_time_ms",
        "memory_usage_mb",
        "timestamp"
      ],
      "signature_hash": "d6e7750b848d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "throughput_ops_per_second"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 15
    },
    {
      "name": "ProtocolMemoryMetricsResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 220,
      "methods": [],
      "properties": [
        "metrics",
        "aggregation_summary",
        "collection_timestamp"
      ],
      "signature_hash": "0a89befade25",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolStreamingMemoryResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 229,
      "methods": [
        "async stream_content() -> AsyncIterator[bytes]",
        "compression_ratio() -> float | None"
      ],
      "properties": [
        "stream_id",
        "chunk_count",
        "total_size_bytes"
      ],
      "signature_hash": "dc3789c6bf51",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "stream_content"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolStreamingRetrieveResponse",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_responses.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_responses",
      "line_number": 243,
      "methods": [
        "async stream_memory_content(memory_id: UUID) -> AsyncIterator[bytes]"
      ],
      "properties": [
        "memory_metadata"
      ],
      "signature_hash": "d48846875719",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "stream_memory_content"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 6
    },
    {
      "name": "ProtocolMemorySecurityContext",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_security",
      "line_number": 19,
      "methods": [
        "user_id() -> UUID | None",
        "session_id() -> UUID | None",
        "permissions() -> list[str]",
        "access_level() -> str",
        "audit_enabled() -> bool",
        "rate_limit_key() -> str | None",
        "pii_detection_enabled() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 15,
      "line_count": 28
    },
    {
      "name": "ProtocolAuditTrail",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_security",
      "line_number": 49,
      "methods": [
        "operation_id() -> UUID",
        "operation_type() -> str",
        "resource_id() -> UUID | None",
        "user_id() -> UUID | None",
        "timestamp() -> 'datetime'",
        "source_ip() -> str | None",
        "user_agent() -> str | None",
        "async operation_metadata() -> 'ProtocolMemoryMetadata'",
        "compliance_tags() -> list[str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "operation_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 19,
      "line_count": 33
    },
    {
      "name": "ProtocolRateLimitConfig",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_security",
      "line_number": 84,
      "methods": [
        "requests_per_minute() -> int",
        "requests_per_hour() -> int",
        "burst_limit() -> int",
        "batch_size_limit() -> int",
        "data_size_limit_mb() -> float",
        "concurrent_operations_limit() -> int"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 12,
      "line_count": 25
    },
    {
      "name": "ProtocolInputValidation",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_security",
      "line_number": 111,
      "methods": [
        "max_content_length() -> int",
        "allowed_content_types() -> list[str]",
        "forbidden_patterns() -> list[str]",
        "require_sanitization() -> bool",
        "pii_detection_threshold() -> float",
        "encoding_requirements() -> list[str]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 15,
      "line_count": 25
    },
    {
      "name": "ProtocolMemorySecurityNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_security",
      "line_number": 138,
      "methods": [
        "async validate_access(security_context: 'ProtocolMemorySecurityContext', operation_type: str, resource_id: UUID | None, correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async detect_pii(content: str, detection_threshold: float, correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async validate_input(input_data: 'ProtocolMemoryMetadata', validation_config: 'ProtocolInputValidation', correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async check_rate_limits(security_context: 'ProtocolMemorySecurityContext', operation_type: str, rate_limit_config: 'ProtocolRateLimitConfig', correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async create_audit_trail(audit_info: 'ProtocolAuditTrail', security_context: 'ProtocolMemorySecurityContext', correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async encrypt_sensitive_data(data: 'ProtocolMemoryMetadata', encryption_level: str, correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async decrypt_sensitive_data(encrypted_data: 'ProtocolMemoryMetadata', security_context: 'ProtocolMemorySecurityContext', correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_access",
        "detect_pii",
        "validate_input",
        "check_rate_limits",
        "create_audit_trail",
        "encrypt_sensitive_data",
        "decrypt_sensitive_data"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 37,
      "line_count": 58
    },
    {
      "name": "ProtocolMemoryComplianceNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_security.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_security",
      "line_number": 198,
      "methods": [
        "async validate_gdpr_compliance(operation_type: str, data_subject_id: UUID | None, legal_basis: str, correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async validate_hipaa_compliance(operation_type: str, phi_categories: list[str], covered_entity_id: UUID, correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async generate_compliance_report(report_type: str, time_period_start: 'datetime', time_period_end: 'datetime', compliance_frameworks: list[str], correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'",
        "async handle_data_subject_request(request_type: str, data_subject_id: UUID, request_details: 'ProtocolMemoryMetadata', correlation_id: UUID | None) -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_gdpr_compliance",
        "validate_hipaa_compliance",
        "generate_compliance_report",
        "handle_data_subject_request"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 25,
      "line_count": 40
    },
    {
      "name": "ProtocolStreamingChunk",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_streaming",
      "line_number": 19,
      "methods": [
        "chunk_id() -> UUID",
        "stream_id() -> UUID",
        "sequence_number() -> int",
        "total_chunks() -> int | None",
        "chunk_data() -> bytes",
        "chunk_size() -> int",
        "is_final_chunk() -> bool",
        "checksum() -> str",
        "compression_type() -> str | None",
        "async chunk_metadata() -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "chunk_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 20,
      "line_count": 36
    },
    {
      "name": "ProtocolStreamingConfig",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_streaming",
      "line_number": 58,
      "methods": [
        "chunk_size_bytes() -> int",
        "max_concurrent_chunks() -> int",
        "buffer_size_mb() -> float",
        "compression_enabled() -> bool",
        "compression_level() -> int",
        "timeout_per_chunk_seconds() -> float",
        "retry_failed_chunks() -> bool",
        "max_retries_per_chunk() -> int",
        "enable_checksum_validation() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 18,
      "line_count": 34
    },
    {
      "name": "ProtocolCursorPagination",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_streaming",
      "line_number": 95,
      "methods": [
        "cursor() -> str | None",
        "limit() -> int",
        "sort_field() -> str",
        "sort_direction() -> str",
        "async filters() -> 'ProtocolMemoryMetadata'",
        "include_total_count() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "filters"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 12,
      "line_count": 24
    },
    {
      "name": "ProtocolStreamingMemoryNode",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_streaming",
      "line_number": 122,
      "methods": [
        "async stream_memory_content(memory_id: UUID, streaming_config: 'ProtocolStreamingConfig', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> AsyncGenerator['ProtocolStreamingChunk', None]",
        "async upload_memory_stream(content_stream: AsyncGenerator['ProtocolStreamingChunk', None], target_memory_id: UUID, streaming_config: 'ProtocolStreamingConfig', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async paginate_memories_cursor(pagination_config: 'ProtocolCursorPagination', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async stream_search_results(search_query: str, streaming_config: 'ProtocolStreamingConfig', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> AsyncGenerator['ProtocolMemoryMetadata', None]",
        "async compress_memory_content(memory_id: UUID, compression_algorithm: str, compression_level: int, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async decompress_memory_content(memory_id: UUID, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async stream_embedding_vectors(memory_ids: list[UUID], vector_chunk_size: int, compression_enabled: bool, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> AsyncGenerator['ProtocolStreamingChunk', None]",
        "async batch_upload_embedding_vectors(vector_stream: AsyncGenerator['ProtocolStreamingChunk', None], target_memory_ids: list[UUID], vector_dimensions: int, streaming_config: 'ProtocolStreamingConfig', security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "stream_memory_content",
        "upload_memory_stream",
        "paginate_memories_cursor",
        "stream_search_results",
        "compress_memory_content",
        "decompress_memory_content",
        "stream_embedding_vectors",
        "batch_upload_embedding_vectors"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 54,
      "line_count": 74
    },
    {
      "name": "ProtocolMemoryCache",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_streaming",
      "line_number": 199,
      "methods": [
        "async cache_memory(memory_id: UUID, cache_ttl_seconds: int, cache_level: str, security_context: 'ProtocolMemorySecurityContext | None') -> 'ProtocolMemoryMetadata'",
        "async invalidate_cache(memory_id: UUID, invalidation_scope: str, security_context: 'ProtocolMemorySecurityContext | None') -> 'ProtocolMemoryMetadata'",
        "async warm_cache(memory_ids: list[UUID], warming_strategy: str, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async get_cache_stats(cache_scope: str, security_context: 'ProtocolMemorySecurityContext | None') -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "cache_memory",
        "invalidate_cache",
        "warm_cache",
        "get_cache_stats"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 21,
      "line_count": 36
    },
    {
      "name": "ProtocolPerformanceOptimization",
      "file_path": "src/omnibase_spi/protocols/memory/protocol_memory_streaming.py",
      "module_path": "omnibase_spi.protocols.memory.protocol_memory_streaming",
      "line_number": 238,
      "methods": [
        "async analyze_performance_patterns(operation_types: list[str], time_window_hours: int, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async optimize_memory_access_patterns(memory_ids: list[UUID], optimization_strategy: str, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'",
        "async create_performance_baseline(operation_type: str, baseline_duration_hours: int, security_context: 'ProtocolMemorySecurityContext | None', timeout_seconds: float | None) -> 'ProtocolMemoryMetadata'"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "analyze_performance_patterns",
        "optimize_memory_access_patterns",
        "create_performance_baseline"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 18,
      "line_count": 31
    },
    {
      "name": "ProtocolContainer",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 20,
      "methods": [
        "register(service_key: str, service_instance: Callable[..., Any]) -> None",
        "async get_service(service_key: str) -> object",
        "has_service(service_key: str) -> bool",
        "dispose() -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_service"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 12
    },
    {
      "name": "ProtocolDependencySpec",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 35,
      "methods": [],
      "properties": [
        "service_key",
        "module_path",
        "class_name",
        "lifecycle",
        "scope",
        "configuration"
      ],
      "signature_hash": "bba46b41626a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolContainerServiceInstance",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 47,
      "methods": [
        "async validate_service_instance() -> bool"
      ],
      "properties": [
        "service_key",
        "instance_type",
        "lifecycle",
        "is_initialized"
      ],
      "signature_hash": "32c5e10eca5a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_service_instance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolRegistryWrapper",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 59,
      "methods": [
        "async get_service(service_key: str) -> object",
        "async get_node_version() -> ProtocolSemVer"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_service",
        "get_node_version"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 6
    },
    {
      "name": "ProtocolContainerResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 68,
      "methods": [],
      "properties": [
        "container",
        "registry",
        "status",
        "error_message",
        "services_registered"
      ],
      "signature_hash": "4807f9cc6bac",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolContainerToolInstance",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 79,
      "methods": [
        "async process(input_data: dict[str, 'ContextValue']) -> dict[str, 'ContextValue']"
      ],
      "properties": [
        "tool_name",
        "tool_version",
        "is_initialized"
      ],
      "signature_hash": "dc840a53249b",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "process"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolContainerFactory",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 92,
      "methods": [
        "async create_container() -> ProtocolContainer",
        "async create_registry_wrapper(container: 'ProtocolContainer') -> ProtocolRegistryWrapper"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_container",
        "create_registry_wrapper"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolContainerServiceFactory",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 103,
      "methods": [
        "async create_service(dependency_spec: 'ProtocolDependencySpec') -> ProtocolContainerServiceInstance",
        "async validate_dependency(dependency_spec: 'ProtocolDependencySpec') -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "create_service",
        "validate_dependency"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 10
    },
    {
      "name": "ProtocolContainerConfiguration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_container_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_container_types",
      "line_number": 116,
      "methods": [],
      "properties": [
        "auto_registration",
        "lazy_loading",
        "validation_enabled",
        "cache_services",
        "configuration_overrides"
      ],
      "signature_hash": "397515c9e157",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolSemVer",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 16,
      "methods": [
        "__str__() -> str"
      ],
      "properties": [
        "major",
        "minor",
        "patch"
      ],
      "signature_hash": "71cd795d0880",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 26
    },
    {
      "name": "ProtocolContextValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 66,
      "methods": [
        "async validate_for_context() -> bool",
        "serialize_for_context() -> dict[str, object]",
        "async get_context_type_hint() -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_for_context",
        "get_context_type_hint"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 8
    },
    {
      "name": "ProtocolContextStringValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 77,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolContextNumericValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 84,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolContextBooleanValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 91,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolContextStringListValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 98,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolContextStringDictValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 105,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolSupportedMetadataType",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 115,
      "methods": [
        "__str__() -> str",
        "async validate_for_metadata() -> bool"
      ],
      "properties": [
        "__omnibase_metadata_type_marker__"
      ],
      "signature_hash": "04ab594e6324",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_for_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 24
    },
    {
      "name": "ProtocolConfigValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 142,
      "methods": [
        "async validate_config_value() -> bool",
        "has_valid_default() -> bool"
      ],
      "properties": [
        "key",
        "value",
        "config_type",
        "default_value"
      ],
      "signature_hash": "eb316c70fba8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_config_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 31
    },
    {
      "name": "ProtocolLogContext",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 176,
      "methods": [
        "to_dict() -> dict[str, 'ContextValue']"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 3,
      "line_count": 20
    },
    {
      "name": "ProtocolLogEntry",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 199,
      "methods": [
        "async validate_log_entry() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "level",
        "message",
        "correlation_id",
        "timestamp",
        "context"
      ],
      "signature_hash": "79611370cf0a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_log_entry"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 32
    },
    {
      "name": "ProtocolSerializationResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 234,
      "methods": [
        "async validate_serialization() -> bool",
        "has_data() -> bool"
      ],
      "properties": [
        "success",
        "data",
        "error_message"
      ],
      "signature_hash": "ab8441627cd4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_serialization"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 29
    },
    {
      "name": "ProtocolNodeMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 266,
      "methods": [
        "async validate_node_metadata() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "node_id",
        "node_type",
        "metadata"
      ],
      "signature_hash": "740fe1b7b15f",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_node_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 27
    },
    {
      "name": "ProtocolCacheStatistics",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 296,
      "methods": [
        "async validate_statistics() -> bool",
        "is_current() -> bool"
      ],
      "properties": [
        "hit_count",
        "miss_count",
        "total_requests",
        "hit_ratio",
        "memory_usage_bytes",
        "entry_count",
        "eviction_count",
        "last_accessed",
        "cache_size_limit"
      ],
      "signature_hash": "b9f7e79f1f45",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_statistics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 43
    },
    {
      "name": "ProtocolMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 356,
      "methods": [
        "async validate_metadata() -> bool",
        "is_up_to_date() -> bool"
      ],
      "properties": [
        "data",
        "version",
        "created_at",
        "updated_at"
      ],
      "signature_hash": "28b9f5e54ef2",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolMetadataOperations",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 370,
      "methods": [
        "async get_value(key: str) -> ContextValue",
        "has_key(key: str) -> bool",
        "keys() -> list[str]",
        "async update_value(key: str, value: ContextValue) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_value",
        "update_value"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 10
    },
    {
      "name": "ProtocolActionPayload",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 383,
      "methods": [
        "async validate_payload() -> bool",
        "has_valid_parameters() -> bool"
      ],
      "properties": [
        "target_id",
        "operation",
        "parameters"
      ],
      "signature_hash": "4f94a610370d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_payload"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolAction",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 396,
      "methods": [
        "async validate_action() -> bool",
        "is_executable() -> bool"
      ],
      "properties": [
        "type",
        "payload",
        "timestamp"
      ],
      "signature_hash": "6854c19f7fb7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_action"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolState",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 409,
      "methods": [
        "async validate_state() -> bool",
        "is_consistent() -> bool"
      ],
      "properties": [
        "metadata",
        "version",
        "last_updated"
      ],
      "signature_hash": "21d36f5abd89",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_state"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolNodeMetadataBlock",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 422,
      "methods": [
        "async validate_metadata_block() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "uuid",
        "name",
        "description",
        "version",
        "metadata_version",
        "namespace",
        "created_at",
        "last_modified_at",
        "lifecycle",
        "protocol_version"
      ],
      "signature_hash": "6c5a9d7e9475",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metadata_block"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 14,
      "line_count": 17
    },
    {
      "name": "ProtocolSchemaObject",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 442,
      "methods": [
        "async validate_schema() -> bool",
        "is_valid_schema() -> bool"
      ],
      "properties": [
        "schema_id",
        "schema_type",
        "schema_data",
        "version",
        "is_valid"
      ],
      "signature_hash": "f63e55002a1e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_schema"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolErrorInfo",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 457,
      "methods": [
        "async validate_error_info() -> bool",
        "is_retryable() -> bool"
      ],
      "properties": [
        "error_type",
        "message",
        "trace",
        "retryable",
        "backoff_strategy",
        "max_attempts"
      ],
      "signature_hash": "7e5aeeee8462",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_error_info"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 38
    },
    {
      "name": "ProtocolSystemEvent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 498,
      "methods": [
        "async validate_system_event() -> bool",
        "is_well_formed() -> bool"
      ],
      "properties": [
        "type",
        "payload",
        "timestamp",
        "source"
      ],
      "signature_hash": "2c122d41d3df",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_system_event"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolNodeResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 512,
      "methods": [
        "async validate_result() -> bool",
        "is_successful() -> bool"
      ],
      "properties": [
        "value",
        "is_success",
        "is_failure",
        "error",
        "trust_score",
        "provenance",
        "metadata",
        "events",
        "state_delta"
      ],
      "signature_hash": "522d25f15e64",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 47
    },
    {
      "name": "ProtocolServiceMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 562,
      "methods": [
        "async validate_service_metadata() -> bool",
        "has_capabilities() -> bool"
      ],
      "properties": [
        "data",
        "version",
        "capabilities",
        "tags"
      ],
      "signature_hash": "1b9020a25237",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_service_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolServiceInstance",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 576,
      "methods": [
        "async validate_service_instance() -> bool",
        "is_available() -> bool"
      ],
      "properties": [
        "service_id",
        "service_name",
        "host",
        "port",
        "metadata",
        "health_status",
        "last_seen"
      ],
      "signature_hash": "cc820a161335",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_service_instance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolServiceHealthStatus",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 593,
      "methods": [
        "async validate_health_status() -> bool",
        "is_healthy() -> bool"
      ],
      "properties": [
        "service_id",
        "status",
        "last_check",
        "details"
      ],
      "signature_hash": "4cde4ebfafb6",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_health_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolCheckpointData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 607,
      "methods": [
        "async validate_checkpoint() -> bool",
        "is_restorable() -> bool"
      ],
      "properties": [
        "checkpoint_id",
        "workflow_id",
        "data",
        "timestamp",
        "metadata"
      ],
      "signature_hash": "b44fc912405e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_checkpoint"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolStorageCredentials",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 622,
      "methods": [
        "async validate_credentials() -> bool",
        "is_secure() -> bool"
      ],
      "properties": [
        "credential_type",
        "data"
      ],
      "signature_hash": "646017c42a6d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_credentials"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolStorageConfiguration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 634,
      "methods": [
        "async validate_configuration() -> bool",
        "async is_connectable() -> bool"
      ],
      "properties": [
        "backend_type",
        "connection_string",
        "options",
        "timeout_seconds"
      ],
      "signature_hash": "a26c41bcdb81",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_configuration",
        "is_connectable"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolStorageResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 648,
      "methods": [
        "async validate_storage_result() -> bool",
        "is_successful() -> bool"
      ],
      "properties": [
        "success",
        "data",
        "error_message",
        "operation_id"
      ],
      "signature_hash": "bc8d14685f30",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_storage_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolStorageListResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 662,
      "methods": [
        "async validate_list_result() -> bool",
        "has_items() -> bool"
      ],
      "properties": [
        "success",
        "items",
        "total_count",
        "has_more",
        "error_message"
      ],
      "signature_hash": "aec68ee27746",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_list_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolStorageHealthStatus",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 677,
      "methods": [
        "async validate_health_status() -> bool",
        "is_available() -> bool"
      ],
      "properties": [
        "is_healthy",
        "status_details",
        "capacity_info",
        "last_check"
      ],
      "signature_hash": "993fdb632ff3",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_health_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolErrorContext",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 697,
      "methods": [
        "async validate_error_context() -> bool",
        "has_trace() -> bool"
      ],
      "properties": [
        "correlation_id",
        "operation_name",
        "timestamp",
        "context_data",
        "stack_trace"
      ],
      "signature_hash": "5c8cc4f5168f",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_error_context"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolRecoveryAction",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 712,
      "methods": [
        "async validate_recovery_action() -> bool",
        "is_applicable() -> bool"
      ],
      "properties": [
        "action_type",
        "max_attempts",
        "backoff_multiplier",
        "timeout_seconds",
        "fallback_value"
      ],
      "signature_hash": "1b9852bbe9e3",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_recovery_action"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolErrorResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 727,
      "methods": [
        "async validate_error() -> bool",
        "is_retryable() -> bool"
      ],
      "properties": [
        "error_id",
        "error_type",
        "message",
        "severity",
        "retryable",
        "recovery_action",
        "context"
      ],
      "signature_hash": "619d96d835d9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_error"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolVersionInfo",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 744,
      "methods": [
        "async validate_version_info() -> bool",
        "is_compatible() -> bool"
      ],
      "properties": [
        "protocol_name",
        "version",
        "compatibility_version",
        "retirement_date",
        "migration_guide_url"
      ],
      "signature_hash": "44801d6730c9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_version_info"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolCompatibilityCheck",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 759,
      "methods": [
        "async validate_compatibility() -> bool"
      ],
      "properties": [
        "is_compatible",
        "required_version",
        "current_version",
        "breaking_changes",
        "migration_required"
      ],
      "signature_hash": "fe42e27b0b58",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_compatibility"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolNodeInfoLike",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 780,
      "methods": [],
      "properties": [
        "__omnibase_node_info_marker__"
      ],
      "signature_hash": "d0d45a9afd9c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 25
    },
    {
      "name": "ProtocolSupportedPropertyValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 808,
      "methods": [
        "async validate_for_property() -> bool"
      ],
      "properties": [
        "__omnibase_property_value_marker__"
      ],
      "signature_hash": "bede7d80bfe3",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_for_property"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 3,
      "line_count": 28
    },
    {
      "name": "ProtocolHealthMetrics",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 839,
      "methods": [
        "async validate_metrics() -> bool",
        "is_within_thresholds() -> bool"
      ],
      "properties": [
        "response_time_ms",
        "cpu_usage_percent",
        "memory_usage_percent",
        "disk_usage_percent",
        "connection_count",
        "error_rate_percent",
        "throughput_per_second"
      ],
      "signature_hash": "5154b50207b2",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolHealthCheck",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 856,
      "methods": [
        "async validate_health_check() -> bool",
        "is_passing() -> bool"
      ],
      "properties": [
        "service_name",
        "check_level",
        "dimensions_checked",
        "overall_status",
        "individual_checks",
        "metrics",
        "check_duration_ms",
        "timestamp",
        "recommendations"
      ],
      "signature_hash": "8e7606f14727",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_health_check"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 16
    },
    {
      "name": "ProtocolHealthMonitoring",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 875,
      "methods": [
        "async validate_monitoring_config() -> bool",
        "is_reasonable() -> bool"
      ],
      "properties": [
        "check_interval_seconds",
        "timeout_seconds",
        "failure_threshold",
        "recovery_threshold",
        "alert_on_status",
        "escalation_rules"
      ],
      "signature_hash": "3d53c4b76b21",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_monitoring_config"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolMetricsPoint",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 891,
      "methods": [
        "async validate_metrics_point() -> bool",
        "is_valid_measurement() -> bool"
      ],
      "properties": [
        "metric_name",
        "value",
        "unit",
        "timestamp",
        "tags",
        "dimensions"
      ],
      "signature_hash": "9db3cd0cfd67",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metrics_point"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolTraceSpan",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 907,
      "methods": [
        "async validate_trace_span() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "span_id",
        "trace_id",
        "parent_span_id",
        "operation_name",
        "start_time",
        "end_time",
        "status",
        "tags",
        "logs"
      ],
      "signature_hash": "cb27f72c3956",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_trace_span"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 16
    },
    {
      "name": "ProtocolAuditEvent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 926,
      "methods": [
        "async validate_audit_event() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "event_id",
        "event_type",
        "actor",
        "resource",
        "action",
        "timestamp",
        "outcome",
        "metadata",
        "sensitivity_level"
      ],
      "signature_hash": "ea93d4d1d865",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_audit_event"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 16
    },
    {
      "name": "ProtocolSerializable",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 945,
      "methods": [
        "model_dump() -> dict[str, str | int | float | bool | list[str | int | float | bool] | dict[str, str | int | float | bool]]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 40
    },
    {
      "name": "ProtocolIdentifiable",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 988,
      "methods": [
        "id() -> str"
      ],
      "properties": [
        "__omnibase_identifiable_marker__"
      ],
      "signature_hash": "0e1ab7ede29a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 3,
      "line_count": 7
    },
    {
      "name": "ProtocolNameable",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 998,
      "methods": [
        "name() -> str"
      ],
      "properties": [
        "__omnibase_nameable_marker__"
      ],
      "signature_hash": "76db9416a787",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 3,
      "line_count": 7
    },
    {
      "name": "ProtocolConfigurable",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1008,
      "methods": [
        "configure() -> None"
      ],
      "properties": [
        "__omnibase_configurable_marker__"
      ],
      "signature_hash": "c021675ffad7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolExecutable",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1017,
      "methods": [
        "async execute() -> object"
      ],
      "properties": [
        "__omnibase_executable_marker__"
      ],
      "signature_hash": "7c3e4c29379a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 3,
      "line_count": 6
    },
    {
      "name": "ProtocolMetadataProvider",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1026,
      "methods": [
        "async get_metadata() -> dict[str, str | int | bool | float]"
      ],
      "properties": [
        "__omnibase_metadata_provider_marker__"
      ],
      "signature_hash": "65f2e52ef7d7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 4,
      "line_count": 6
    },
    {
      "name": "ProtocolRetryConfig",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1043,
      "methods": [
        "async validate_retry_config() -> bool",
        "is_reasonable() -> bool"
      ],
      "properties": [
        "max_attempts",
        "backoff_strategy",
        "base_delay_ms",
        "max_delay_ms",
        "timeout_ms",
        "jitter_factor"
      ],
      "signature_hash": "43a678a4e8a4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_retry_config"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolRetryPolicy",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1059,
      "methods": [
        "async validate_retry_policy() -> bool",
        "is_applicable() -> bool"
      ],
      "properties": [
        "default_config",
        "error_specific_configs",
        "retry_conditions",
        "retry_budget_limit",
        "budget_window_seconds"
      ],
      "signature_hash": "8786e51f6c6d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_retry_policy"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolRetryAttempt",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1074,
      "methods": [
        "async validate_retry_attempt() -> bool",
        "is_valid_attempt() -> bool"
      ],
      "properties": [
        "attempt_number",
        "timestamp",
        "duration_ms",
        "error_type",
        "success",
        "backoff_applied_ms"
      ],
      "signature_hash": "e8a8f2f86bb0",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_retry_attempt"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolRetryResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1090,
      "methods": [
        "async validate_retry_result() -> bool",
        "is_final() -> bool"
      ],
      "properties": [
        "success",
        "final_attempt_number",
        "total_duration_ms",
        "result",
        "final_error",
        "attempts"
      ],
      "signature_hash": "50ca0a5af4c4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_retry_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolTimeBased",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1109,
      "methods": [
        "async validate_time_based() -> bool",
        "is_valid_timing() -> bool"
      ],
      "properties": [
        "type",
        "start_time",
        "end_time",
        "duration_ms",
        "is_active",
        "has_expired"
      ],
      "signature_hash": "17e9d9b9215b",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_time_based"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolTimeout",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1125,
      "methods": [
        "async validate_timeout() -> bool",
        "is_reasonable() -> bool"
      ],
      "properties": [
        "timeout_ms",
        "start_time",
        "warning_threshold_ms",
        "is_expired",
        "time_remaining_ms"
      ],
      "signature_hash": "03768712e520",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_timeout"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolDuration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1140,
      "methods": [
        "async validate_duration() -> bool",
        "is_measurable() -> bool"
      ],
      "properties": [
        "start_time",
        "end_time",
        "duration_ms",
        "is_completed",
        "can_measure"
      ],
      "signature_hash": "acf6698c2e40",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_duration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolAnalyticsMetric",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1161,
      "methods": [
        "async validate_metric() -> bool",
        "is_valid_measurement() -> bool"
      ],
      "properties": [
        "name",
        "type",
        "value",
        "unit",
        "timestamp",
        "tags",
        "metadata"
      ],
      "signature_hash": "68ef7d86445a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metric"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolAnalyticsProvider",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1178,
      "methods": [
        "async validate_provider() -> bool",
        "is_available() -> bool"
      ],
      "properties": [
        "provider_id",
        "provider_type",
        "data_sources",
        "supported_metrics",
        "time_windows",
        "last_updated"
      ],
      "signature_hash": "d9649e4c3324",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_provider"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolAnalyticsSummary",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1194,
      "methods": [
        "async validate_summary() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "time_window",
        "start_time",
        "end_time",
        "metrics",
        "insights",
        "recommendations",
        "confidence_score"
      ],
      "signature_hash": "1277dfd49f09",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolPerformanceMetric",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1216,
      "methods": [
        "async validate_performance_metric() -> bool",
        "is_valid() -> bool"
      ],
      "properties": [
        "metric_name",
        "category",
        "value",
        "unit",
        "timestamp",
        "source",
        "threshold_warning",
        "threshold_critical"
      ],
      "signature_hash": "0f50a3800bab",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_performance_metric"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolPerformanceMetrics",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1234,
      "methods": [
        "async validate_performance_metrics() -> bool",
        "is_healthy() -> bool"
      ],
      "properties": [
        "service_name",
        "collection_timestamp",
        "metrics",
        "overall_health_score",
        "performance_trends",
        "recommendations"
      ],
      "signature_hash": "b44dd4d57138",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_performance_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolConnectionConfig",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1255,
      "methods": [
        "async validate_connection_config() -> bool",
        "async is_connectable() -> bool"
      ],
      "properties": [
        "host",
        "port",
        "timeout_ms",
        "max_retries",
        "ssl_enabled",
        "connection_pool_size",
        "keep_alive_interval_ms"
      ],
      "signature_hash": "1587ce07a502",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_connection_config",
        "is_connectable"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolConnectionStatus",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1272,
      "methods": [
        "async validate_connection_status() -> bool",
        "async is_connected() -> bool"
      ],
      "properties": [
        "state",
        "connected_at",
        "last_activity",
        "error_count",
        "bytes_sent",
        "bytes_received"
      ],
      "signature_hash": "4ecd59d0efcb",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_connection_status",
        "is_connected"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolValidatable",
      "file_path": "src/omnibase_spi/protocols/types/protocol_core_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_core_types",
      "line_number": 1294,
      "methods": [
        "async get_validation_context() -> dict[str, 'ContextValue']",
        "async get_validation_id() -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_validation_context",
        "get_validation_id"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 29
    },
    {
      "name": "ProtocolCapabilityValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 20,
      "methods": [
        "async validate_for_capability() -> bool",
        "serialize_for_capability() -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_for_capability"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 6
    },
    {
      "name": "ProtocolCapabilityStringValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 29,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolCapabilityNumericValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 36,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolCapabilityBooleanValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 43,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolCapabilityStringListValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 50,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolHandlerCapability",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 60,
      "methods": [],
      "properties": [
        "capability_name",
        "capability_value",
        "is_required",
        "version"
      ],
      "signature_hash": "900d13879d28",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolDiscoveryNodeInfo",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 70,
      "methods": [],
      "properties": [
        "node_id",
        "node_name",
        "node_type",
        "status",
        "capabilities",
        "metadata"
      ],
      "signature_hash": "8dd46a597e13",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolDiscoveryQuery",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 82,
      "methods": [],
      "properties": [
        "query_id",
        "target_type",
        "required_capabilities",
        "filters",
        "timeout_seconds"
      ],
      "signature_hash": "8ff4160d0573",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolDiscoveryResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 93,
      "methods": [],
      "properties": [
        "query_id",
        "status",
        "nodes_found",
        "discovery_time",
        "error_message"
      ],
      "signature_hash": "141e8e3c60e8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolHandlerRegistration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_discovery_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_discovery_types",
      "line_number": 104,
      "methods": [],
      "properties": [
        "node_id",
        "registration_data",
        "registration_time",
        "expires_at",
        "is_active"
      ],
      "signature_hash": "f273cae83d64",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolEventData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 21,
      "methods": [
        "async validate_for_transport() -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_for_transport"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 2,
      "line_count": 4
    },
    {
      "name": "ProtocolEventStringData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 28,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolEventStringListData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 35,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolEventStringDictData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 42,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolEvent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 55,
      "methods": [
        "async validate_event() -> bool"
      ],
      "properties": [
        "event_type",
        "event_data",
        "correlation_id",
        "timestamp",
        "source"
      ],
      "signature_hash": "b37ee492a485",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_event"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolEventResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 68,
      "methods": [
        "async validate_result() -> bool"
      ],
      "properties": [
        "success",
        "event_id",
        "processing_time",
        "error_message"
      ],
      "signature_hash": "d93d331ae656",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolSecurityContext",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 80,
      "methods": [
        "async validate_security_context() -> bool"
      ],
      "properties": [
        "user_id",
        "permissions",
        "auth_status",
        "token_expires_at"
      ],
      "signature_hash": "7456d403aa39",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_security_context"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolEventSubscription",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 92,
      "methods": [
        "async validate_subscription() -> bool"
      ],
      "properties": [
        "event_type",
        "subscriber_id",
        "filter_criteria",
        "is_active"
      ],
      "signature_hash": "10b36b3c3523",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_subscription"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolOnexEvent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 104,
      "methods": [
        "async validate_onex_event() -> bool"
      ],
      "properties": [
        "event_id",
        "event_type",
        "timestamp",
        "source",
        "payload",
        "correlation_id",
        "metadata"
      ],
      "signature_hash": "0194dbdc069a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_onex_event"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolEventBusConnectionCredentials",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 119,
      "methods": [],
      "properties": [
        "username",
        "password",
        "host",
        "port",
        "virtual_host",
        "connection_timeout",
        "heartbeat"
      ],
      "signature_hash": "834d93058672",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolEventHeaders",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 132,
      "methods": [
        "async validate_headers() -> bool"
      ],
      "properties": [
        "content_type",
        "correlation_id",
        "message_id",
        "timestamp",
        "source",
        "event_type",
        "schema_version",
        "destination",
        "trace_id",
        "span_id",
        "parent_span_id",
        "operation_name",
        "priority",
        "routing_key",
        "partition_key",
        "retry_count",
        "max_retries",
        "ttl_seconds"
      ],
      "signature_hash": "e10f73085a2d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_headers"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 20,
      "line_count": 28
    },
    {
      "name": "ProtocolEventMessage",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 166,
      "methods": [
        "async ack() -> None"
      ],
      "properties": [
        "topic",
        "key",
        "value",
        "headers",
        "offset",
        "partition"
      ],
      "signature_hash": "7616dcb0e1ff",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "ack"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 16
    },
    {
      "name": "ProtocolCompletionData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_event_bus_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_event_bus_types",
      "line_number": 185,
      "methods": [
        "to_event_kwargs() -> dict[str, str | bool | int | list[str]]"
      ],
      "properties": [
        "message",
        "success",
        "code",
        "tags"
      ],
      "signature_hash": "dc5d9dd94fe1",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 14
    },
    {
      "name": "ProtocolFileContent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 22,
      "methods": [
        "async validate_for_file() -> bool",
        "serialize_for_file() -> dict[str, object]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_for_file"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 6
    },
    {
      "name": "ProtocolStringFileContent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 31,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolBinaryFileContent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 38,
      "methods": [],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 1,
      "line_count": 4
    },
    {
      "name": "ProtocolFileMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 48,
      "methods": [],
      "properties": [
        "size",
        "mime_type",
        "encoding",
        "created_at",
        "modified_at"
      ],
      "signature_hash": "a8117ee873fb",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolFileInfo",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 59,
      "methods": [],
      "properties": [
        "file_path",
        "file_size",
        "file_type",
        "mime_type",
        "last_modified",
        "status"
      ],
      "signature_hash": "028aa70e93e4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolFileContentObject",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 71,
      "methods": [],
      "properties": [
        "file_path",
        "content",
        "encoding",
        "content_hash",
        "is_binary"
      ],
      "signature_hash": "f92da3e48d8d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolProcessingResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 82,
      "methods": [],
      "properties": [
        "file_path",
        "operation",
        "status",
        "processing_time",
        "error_message",
        "file_metadata"
      ],
      "signature_hash": "05661197d2ab",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolFileFilter",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 94,
      "methods": [],
      "properties": [
        "include_extensions",
        "exclude_extensions",
        "min_size",
        "max_size",
        "modified_after",
        "modified_before"
      ],
      "signature_hash": "dfdf2068acb7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolFileTypeResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 106,
      "methods": [],
      "properties": [
        "file_path",
        "detected_type",
        "confidence",
        "mime_type",
        "is_supported",
        "error_message"
      ],
      "signature_hash": "b934e66d0ec4",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolHandlerMatch",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 118,
      "methods": [],
      "properties": [
        "node_id",
        "node_name",
        "match_confidence",
        "can_handle",
        "required_capabilities"
      ],
      "signature_hash": "04d7b1be5f55",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolCanHandleResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 129,
      "methods": [],
      "properties": [
        "can_handle",
        "confidence",
        "reason",
        "file_metadata"
      ],
      "signature_hash": "efce0181b577",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolHandlerMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 139,
      "methods": [],
      "properties": [
        "name",
        "version",
        "author",
        "description",
        "supported_extensions",
        "supported_filenames",
        "priority",
        "requires_content_analysis"
      ],
      "signature_hash": "0a276259429b",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolExtractedBlock",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 153,
      "methods": [],
      "properties": [
        "content",
        "file_metadata",
        "block_type",
        "start_line",
        "end_line",
        "path"
      ],
      "signature_hash": "3d0e3cd05d81",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolSerializedBlock",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 165,
      "methods": [],
      "properties": [
        "serialized_data",
        "format",
        "version",
        "file_metadata"
      ],
      "signature_hash": "f97c21ccddad",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolResultData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 175,
      "methods": [],
      "properties": [
        "output_path",
        "processed_files",
        "metrics",
        "warnings"
      ],
      "signature_hash": "fe6705825dcf",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolOnexResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 185,
      "methods": [],
      "properties": [
        "success",
        "message",
        "result_data",
        "error_code",
        "timestamp"
      ],
      "signature_hash": "3938b7baed30",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolFileMetadataOperations",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 196,
      "methods": [
        "async validate_metadata(metadata: 'ProtocolFileMetadata') -> bool",
        "async serialize_metadata(metadata: 'ProtocolFileMetadata') -> str",
        "async compare_metadata(meta1: 'ProtocolFileMetadata', meta2: 'ProtocolFileMetadata') -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metadata",
        "serialize_metadata",
        "compare_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 10
    },
    {
      "name": "ProtocolResultOperations",
      "file_path": "src/omnibase_spi/protocols/types/protocol_file_handling_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_file_handling_types",
      "line_number": 209,
      "methods": [
        "format_result(result: 'ProtocolOnexResult') -> str",
        "async merge_results(results: list['ProtocolOnexResult']) -> ProtocolOnexResult",
        "async validate_result(result: 'ProtocolOnexResult') -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "merge_results",
        "validate_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 10
    },
    {
      "name": "ProtocolMCPToolParameter",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 37,
      "methods": [
        "async validate_parameter() -> bool",
        "is_required_parameter() -> bool"
      ],
      "properties": [
        "name",
        "parameter_type",
        "description",
        "required",
        "default_value",
        "schema",
        "constraints",
        "examples"
      ],
      "signature_hash": "7362fa6a948d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_parameter"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolMCPToolDefinition",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 55,
      "methods": [
        "async validate_tool_definition() -> bool"
      ],
      "properties": [
        "name",
        "tool_type",
        "description",
        "version",
        "parameters",
        "return_schema",
        "execution_endpoint",
        "timeout_seconds",
        "retry_count",
        "requires_auth",
        "tags",
        "metadata"
      ],
      "signature_hash": "9ab673bdea34",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_tool_definition"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 14,
      "line_count": 17
    },
    {
      "name": "ProtocolMCPSubsystemMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 75,
      "methods": [
        "async validate_metadata() -> bool"
      ],
      "properties": [
        "subsystem_id",
        "name",
        "subsystem_type",
        "version",
        "description",
        "base_url",
        "health_endpoint",
        "documentation_url",
        "repository_url",
        "maintainer",
        "tags",
        "capabilities",
        "dependencies",
        "metadata"
      ],
      "signature_hash": "47ec1afe1401",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 16,
      "line_count": 19
    },
    {
      "name": "ProtocolMCPSubsystemRegistration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 97,
      "methods": [
        "async validate_registration() -> bool"
      ],
      "properties": [
        "registration_id",
        "subsystem_metadata",
        "tools",
        "api_key",
        "registration_status",
        "lifecycle_state",
        "connection_status",
        "health_status",
        "registered_at",
        "last_heartbeat",
        "heartbeat_interval_seconds",
        "ttl_seconds",
        "access_count",
        "error_count",
        "last_error",
        "configuration"
      ],
      "signature_hash": "063527164490",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_registration"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 18,
      "line_count": 21
    },
    {
      "name": "ProtocolMCPToolExecution",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 121,
      "methods": [
        "async validate_execution() -> bool"
      ],
      "properties": [
        "execution_id",
        "tool_name",
        "subsystem_id",
        "parameters",
        "execution_status",
        "started_at",
        "completed_at",
        "duration_ms",
        "result",
        "error_message",
        "retry_count",
        "correlation_id",
        "metadata"
      ],
      "signature_hash": "85526e11b25c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_execution"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 15,
      "line_count": 18
    },
    {
      "name": "ProtocolMCPRegistryMetrics",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 142,
      "methods": [
        "async validate_metrics() -> bool"
      ],
      "properties": [
        "total_subsystems",
        "active_subsystems",
        "failed_subsystems",
        "total_tools",
        "active_tools",
        "total_executions",
        "successful_executions",
        "failed_executions",
        "average_execution_time_ms",
        "peak_concurrent_executions",
        "registry_uptime_seconds",
        "last_cleanup_at",
        "subsystem_type_distribution",
        "tool_type_distribution",
        "health_status_distribution",
        "metadata"
      ],
      "signature_hash": "f6595c636e28",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 18,
      "line_count": 21
    },
    {
      "name": "ProtocolMCPRegistryStatus",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 166,
      "methods": [
        "async validate_status() -> bool"
      ],
      "properties": [
        "registry_id",
        "status",
        "message",
        "version",
        "started_at",
        "last_updated",
        "metrics",
        "active_connections",
        "configuration",
        "features_enabled",
        "maintenance_mode"
      ],
      "signature_hash": "35f3191db199",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 16
    },
    {
      "name": "ProtocolMCPRegistryConfig",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 185,
      "methods": [
        "async validate_config() -> bool"
      ],
      "properties": [
        "registry_name",
        "max_subsystems",
        "max_tools_per_subsystem",
        "default_heartbeat_interval",
        "default_ttl_seconds",
        "cleanup_interval_seconds",
        "max_concurrent_executions",
        "tool_execution_timeout",
        "health_check_timeout",
        "require_api_key",
        "enable_metrics",
        "enable_tracing",
        "log_level",
        "maintenance_mode",
        "configuration"
      ],
      "signature_hash": "f0707847bad2",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_config"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 17,
      "line_count": 20
    },
    {
      "name": "ProtocolMCPHealthCheck",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 208,
      "methods": [
        "async validate_health_check() -> bool"
      ],
      "properties": [
        "subsystem_id",
        "check_time",
        "health_status",
        "response_time_ms",
        "status_code",
        "status_message",
        "checks",
        "metadata"
      ],
      "signature_hash": "da6ab0b52fa1",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_health_check"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolMCPDiscoveryInfo",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 224,
      "methods": [
        "async validate_discovery_info() -> bool"
      ],
      "properties": [
        "service_name",
        "service_url",
        "service_type",
        "available_tools",
        "health_status",
        "last_seen",
        "metadata"
      ],
      "signature_hash": "3eb60cedddec",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_discovery_info"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolMCPValidationError",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 239,
      "methods": [
        "async validate_error() -> bool"
      ],
      "properties": [
        "error_type",
        "field_name",
        "error_message",
        "invalid_value",
        "suggested_fix",
        "severity"
      ],
      "signature_hash": "5aa5ac4b1b51",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_error"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolMCPValidationResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 253,
      "methods": [
        "async validate_validation_result() -> bool"
      ],
      "properties": [
        "is_valid",
        "errors",
        "warnings",
        "validation_time",
        "validation_version"
      ],
      "signature_hash": "ddc41d9fd8fe",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_validation_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolToolClass",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 266,
      "methods": [
        "__call__() -> 'ProtocolToolInstance'"
      ],
      "properties": [
        "__name__",
        "__module__"
      ],
      "signature_hash": "b636f4ad764f",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 4,
      "line_count": 7
    },
    {
      "name": "ProtocolToolInstance",
      "file_path": "src/omnibase_spi/protocols/types/protocol_mcp_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_mcp_types",
      "line_number": 276,
      "methods": [
        "async execute(parameters: dict[str, ContextValue]) -> dict[str, ContextValue]",
        "async validate_parameters(parameters: dict[str, ContextValue]) -> ProtocolMCPValidationResult",
        "async health_check() -> dict[str, ContextValue]"
      ],
      "properties": [
        "tool_name",
        "tool_version",
        "tool_type",
        "is_initialized"
      ],
      "signature_hash": "fc2801cc248a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "execute",
        "validate_parameters",
        "health_check"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 14,
      "line_count": 17
    },
    {
      "name": "ProtocolWorkflowValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 22,
      "methods": [
        "serialize() -> dict[str, object]",
        "async validate() -> bool",
        "async get_type_info() -> str"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate",
        "get_type_info"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 8
    },
    {
      "name": "ProtocolWorkflowStringValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 33,
      "methods": [
        "async get_string_length() -> int",
        "is_empty_string() -> bool"
      ],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_string_length"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolWorkflowStringListValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 44,
      "methods": [
        "async get_list_length() -> int",
        "is_empty_list() -> bool"
      ],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_list_length"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolWorkflowStringDictValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 55,
      "methods": [
        "async get_dict_keys() -> list[str]",
        "has_key(key: str) -> bool"
      ],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_dict_keys"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 7,
      "line_count": 8
    },
    {
      "name": "ProtocolWorkflowNumericValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 66,
      "methods": [
        "is_integer() -> bool",
        "is_positive() -> bool"
      ],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolWorkflowStructuredValue",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 77,
      "methods": [
        "async get_structure_depth() -> int",
        "flatten_structure() -> dict[str, 'ContextValue']"
      ],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_structure_depth"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 8
    },
    {
      "name": "ProtocolTypedWorkflowData",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 91,
      "methods": [
        "async get_type_name() -> str",
        "serialize_typed() -> dict[str, ContextValue]"
      ],
      "properties": [
        "value"
      ],
      "signature_hash": "3fcaba773583",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_type_name"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 6,
      "line_count": 8
    },
    {
      "name": "ProtocolWorkflowMetadata",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 159,
      "methods": [
        "async validate_metadata() -> bool",
        "is_complete() -> bool"
      ],
      "properties": [
        "workflow_type",
        "instance_id",
        "correlation_id",
        "created_by",
        "environment",
        "group",
        "version",
        "tags",
        "metadata"
      ],
      "signature_hash": "1c48022d830d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_metadata"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 13,
      "line_count": 16
    },
    {
      "name": "ProtocolRetryConfiguration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 178,
      "methods": [
        "async validate_retry_config() -> bool",
        "is_valid_policy() -> bool"
      ],
      "properties": [
        "policy",
        "max_attempts",
        "initial_delay_seconds",
        "max_delay_seconds",
        "backoff_multiplier",
        "jitter_enabled",
        "retryable_errors",
        "non_retryable_errors"
      ],
      "signature_hash": "189a7eb1966f",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_retry_config"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolTimeoutConfiguration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 196,
      "methods": [
        "async validate_timeout_config() -> bool",
        "is_reasonable() -> bool"
      ],
      "properties": [
        "timeout_type",
        "timeout_seconds",
        "warning_seconds",
        "grace_period_seconds",
        "escalation_policy"
      ],
      "signature_hash": "6d51e30215a3",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_timeout_config"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 9,
      "line_count": 12
    },
    {
      "name": "ProtocolTaskDependency",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 211,
      "methods": [
        "async validate_dependency() -> bool",
        "is_conditional() -> bool"
      ],
      "properties": [
        "task_id",
        "dependency_type",
        "condition",
        "timeout_seconds"
      ],
      "signature_hash": "f2a5f7b88097",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_dependency"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolWorkflowContext",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 225,
      "methods": [
        "async validate_context() -> bool",
        "has_required_data() -> bool"
      ],
      "properties": [
        "workflow_type",
        "instance_id",
        "correlation_id",
        "isolation_level",
        "data",
        "secrets",
        "capabilities",
        "resource_limits"
      ],
      "signature_hash": "f96e52d0ba9c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_context"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolTaskConfiguration",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 243,
      "methods": [
        "async validate_task() -> bool",
        "has_valid_dependencies() -> bool"
      ],
      "properties": [
        "task_id",
        "task_name",
        "task_type",
        "node_type",
        "execution_semantics",
        "priority",
        "dependencies",
        "retry_config",
        "timeout_config",
        "resource_requirements",
        "annotations"
      ],
      "signature_hash": "0dbc565b2c48",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_task"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 15,
      "line_count": 18
    },
    {
      "name": "ProtocolWorkflowEvent",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 264,
      "methods": [
        "async validate_event() -> bool",
        "is_valid_sequence() -> bool"
      ],
      "properties": [
        "event_id",
        "event_type",
        "workflow_type",
        "instance_id",
        "correlation_id",
        "sequence_number",
        "timestamp",
        "source",
        "idempotency_key",
        "payload",
        "metadata",
        "causation_id",
        "correlation_chain"
      ],
      "signature_hash": "179f901572f1",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_event"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 17,
      "line_count": 20
    },
    {
      "name": "ProtocolWorkflowSnapshot",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 287,
      "methods": [
        "async validate_snapshot() -> bool",
        "is_consistent() -> bool"
      ],
      "properties": [
        "workflow_type",
        "instance_id",
        "sequence_number",
        "state",
        "context",
        "tasks",
        "created_at",
        "metadata"
      ],
      "signature_hash": "a75c5f911110",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_snapshot"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolTaskResult",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 305,
      "methods": [
        "async validate_result() -> bool",
        "is_success() -> bool"
      ],
      "properties": [
        "task_id",
        "execution_id",
        "state",
        "result_data",
        "error_message",
        "error_code",
        "retry_count",
        "execution_time_seconds",
        "resource_usage",
        "output_artifacts",
        "events_emitted"
      ],
      "signature_hash": "3d4cb8f68be9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_result"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 15,
      "line_count": 18
    },
    {
      "name": "ProtocolCompensationAction",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 326,
      "methods": [
        "async validate_compensation() -> bool",
        "async can_execute() -> bool"
      ],
      "properties": [
        "compensation_id",
        "task_id",
        "action_type",
        "action_data",
        "timeout_seconds",
        "retry_config"
      ],
      "signature_hash": "852fa2a262c0",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_compensation",
        "can_execute"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolWorkflowDefinition",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 342,
      "methods": [
        "async validate_definition() -> bool",
        "is_valid_schema() -> bool"
      ],
      "properties": [
        "workflow_type",
        "version",
        "name",
        "description",
        "tasks",
        "default_retry_config",
        "default_timeout_config",
        "compensation_actions",
        "validation_rules",
        "schema"
      ],
      "signature_hash": "34783bc2ca9a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_definition"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 14,
      "line_count": 17
    },
    {
      "name": "ProtocolNodeCapability",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 362,
      "methods": [
        "async validate_capability() -> bool",
        "is_supported() -> bool"
      ],
      "properties": [
        "capability_name",
        "version",
        "node_types",
        "resource_requirements",
        "configuration_schema",
        "supported_task_types"
      ],
      "signature_hash": "bee07ee253f7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_capability"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolWorkflowServiceInstance",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 378,
      "methods": [
        "async validate_service_instance() -> bool",
        "is_healthy() -> bool"
      ],
      "properties": [
        "service_name",
        "service_type",
        "endpoint",
        "health_check_url",
        "metadata",
        "capabilities",
        "last_heartbeat"
      ],
      "signature_hash": "bc45c5fbf346",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_service_instance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolRecoveryPoint",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 395,
      "methods": [
        "async validate_recovery_point() -> bool",
        "is_restorable() -> bool"
      ],
      "properties": [
        "recovery_id",
        "workflow_type",
        "instance_id",
        "sequence_number",
        "state",
        "recovery_type",
        "created_at",
        "metadata"
      ],
      "signature_hash": "98c3c31593f7",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_recovery_point"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolReplayStrategy",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 413,
      "methods": [
        "async validate_replay_strategy() -> bool",
        "is_executable() -> bool"
      ],
      "properties": [
        "strategy_type",
        "start_sequence",
        "end_sequence",
        "event_filters",
        "skip_failed_events",
        "validate_state"
      ],
      "signature_hash": "02bb9c6f38e1",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_replay_strategy"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolEventStream",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 429,
      "methods": [
        "async validate_stream() -> bool",
        "async is_complete_stream() -> bool"
      ],
      "properties": [
        "stream_id",
        "workflow_type",
        "instance_id",
        "start_sequence",
        "end_sequence",
        "events",
        "is_complete",
        "next_token"
      ],
      "signature_hash": "42003c57020a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_stream",
        "is_complete_stream"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 12,
      "line_count": 15
    },
    {
      "name": "ProtocolEventProjection",
      "file_path": "src/omnibase_spi/protocols/types/protocol_workflow_orchestration_types.py",
      "module_path": "omnibase_spi.protocols.types.protocol_workflow_orchestration_types",
      "line_number": 447,
      "methods": [
        "async validate_projection() -> bool",
        "is_up_to_date() -> bool"
      ],
      "properties": [
        "projection_name",
        "workflow_type",
        "last_processed_sequence",
        "projection_data",
        "created_at",
        "updated_at"
      ],
      "signature_hash": "012fbb519859",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_projection"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "types",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolComplianceRule",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_compliance_validator",
      "line_number": 15,
      "methods": [
        "async check_compliance(content: str, context: str) -> bool",
        "async get_fix_suggestion() -> str"
      ],
      "properties": [
        "rule_id",
        "rule_name",
        "category",
        "severity",
        "description",
        "required_pattern",
        "violation_message"
      ],
      "signature_hash": "d0f713ef95a0",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "check_compliance",
        "get_fix_suggestion"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 13,
      "line_count": 14
    },
    {
      "name": "ProtocolComplianceViolation",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_compliance_validator",
      "line_number": 32,
      "methods": [
        "async get_violation_summary() -> str",
        "async get_compliance_impact() -> str"
      ],
      "properties": [
        "rule",
        "file_path",
        "line_number",
        "violation_text",
        "severity",
        "fix_suggestion",
        "auto_fixable"
      ],
      "signature_hash": "7a602bb5a23a",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_violation_summary",
        "get_compliance_impact"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 11,
      "line_count": 14
    },
    {
      "name": "ProtocolONEXStandards",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_compliance_validator",
      "line_number": 49,
      "methods": [
        "async validate_enum_naming(name: str) -> bool",
        "async validate_model_naming(name: str) -> bool",
        "async validate_protocol_naming(name: str) -> bool",
        "async validate_node_naming(name: str) -> bool"
      ],
      "properties": [
        "enum_naming_pattern",
        "model_naming_pattern",
        "protocol_naming_pattern",
        "node_naming_pattern",
        "required_directories",
        "forbidden_patterns"
      ],
      "signature_hash": "84de95722b83",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_enum_naming",
        "validate_model_naming",
        "validate_protocol_naming",
        "validate_node_naming"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 18,
      "line_count": 17
    },
    {
      "name": "ProtocolArchitectureCompliance",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_compliance_validator",
      "line_number": 69,
      "methods": [
        "async check_dependency_compliance(imports: List[str]) -> List[str]",
        "async validate_layer_separation(file_path: str, imports: List[str]) -> List[str]"
      ],
      "properties": [
        "allowed_dependencies",
        "forbidden_dependencies",
        "required_patterns",
        "layer_violations"
      ],
      "signature_hash": "199aa501302d",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "check_dependency_compliance",
        "validate_layer_separation"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 13,
      "line_count": 13
    },
    {
      "name": "ProtocolComplianceReport",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_compliance_validator",
      "line_number": 85,
      "methods": [
        "async get_compliance_summary() -> str",
        "async get_priority_fixes() -> List[ProtocolComplianceViolation]"
      ],
      "properties": [
        "file_path",
        "violations",
        "onex_compliance_score",
        "architecture_compliance_score",
        "overall_compliance",
        "critical_violations",
        "recommendations"
      ],
      "signature_hash": "ce4ffb8ecb18",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_compliance_summary",
        "get_priority_fixes"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 12,
      "line_count": 14
    },
    {
      "name": "ProtocolComplianceValidator",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_compliance_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_compliance_validator",
      "line_number": 102,
      "methods": [
        "async validate_file_compliance(file_path: str, content: str | None) -> ProtocolComplianceReport",
        "async validate_repository_compliance(repository_path: str, file_patterns: List[str] | None) -> List[ProtocolComplianceReport]",
        "async validate_onex_naming(file_path: str, content: str | None) -> List[ProtocolComplianceViolation]",
        "async validate_architecture_compliance(file_path: str, content: str | None) -> List[ProtocolComplianceViolation]",
        "async validate_directory_structure(repository_path: str) -> List[ProtocolComplianceViolation]",
        "async validate_dependency_compliance(file_path: str, imports: List[str]) -> List[ProtocolComplianceViolation]",
        "async aggregate_compliance_results(reports: List['ProtocolComplianceReport']) -> ProtocolValidationResult",
        "add_custom_rule(rule: 'ProtocolComplianceRule') -> None",
        "configure_onex_standards(standards: 'ProtocolONEXStandards') -> None",
        "async get_compliance_summary(reports: List[ProtocolComplianceReport]) -> str"
      ],
      "properties": [
        "onex_standards",
        "architecture_rules",
        "custom_rules",
        "strict_mode"
      ],
      "signature_hash": "781e37863fc0",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_file_compliance",
        "validate_repository_compliance",
        "validate_onex_naming",
        "validate_architecture_compliance",
        "validate_directory_structure",
        "validate_dependency_compliance",
        "aggregate_compliance_results",
        "get_compliance_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 44,
      "line_count": 49
    },
    {
      "name": "ProtocolImportValidationConfig",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_import_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_import_validator",
      "line_number": 15,
      "methods": [
        "async is_import_allowed(import_path: str) -> bool",
        "async is_import_item_allowed(import_item: str) -> bool"
      ],
      "properties": [
        "allowed_imports",
        "allowed_import_items",
        "repository_type",
        "validation_mode"
      ],
      "signature_hash": "3b3e4d51e9eb",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "is_import_allowed",
        "is_import_item_allowed"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 11
    },
    {
      "name": "ProtocolImportAnalysis",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_import_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_import_validator",
      "line_number": 29,
      "methods": [
        "async get_risk_summary() -> str",
        "async get_recommendations() -> list[str]"
      ],
      "properties": [
        "import_path",
        "import_items",
        "is_valid",
        "security_risk",
        "dependency_level",
        "analysis_details"
      ],
      "signature_hash": "f3465440ea25",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_risk_summary",
        "get_recommendations"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 11,
      "line_count": 13
    },
    {
      "name": "ProtocolImportValidator",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_import_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_import_validator",
      "line_number": 45,
      "methods": [
        "async validate_import(import_path: str, description: str, context: dict[str, Any] | None) -> ProtocolValidationResult",
        "async validate_from_import(from_path: str, import_items: str, description: str, context: dict[str, Any] | None) -> ProtocolValidationResult",
        "async validate_import_security(import_path: str, context: dict[str, Any] | None) -> ProtocolImportAnalysis",
        "async validate_dependency_chain(import_path: str, max_depth: int) -> list[ProtocolImportAnalysis]",
        "async validate_repository_imports(repository_path: str, patterns: list[str] | None) -> list[ProtocolValidationResult]",
        "async get_validation_summary() -> dict[str, Any]",
        "async configure_validation(config: 'ProtocolImportValidationConfig') -> None",
        "async reset_validation_state() -> None"
      ],
      "properties": [
        "validation_config",
        "security_scanning_enabled",
        "dependency_analysis_enabled"
      ],
      "signature_hash": "ce5a4cb669c8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_import",
        "validate_from_import",
        "validate_import_security",
        "validate_dependency_chain",
        "validate_repository_imports",
        "get_validation_summary",
        "configure_validation",
        "reset_validation_state"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 36,
      "line_count": 44
    },
    {
      "name": "ProtocolQualityMetrics",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_quality_validator",
      "line_number": 15,
      "methods": [
        "async get_complexity_rating() -> str"
      ],
      "properties": [
        "cyclomatic_complexity",
        "maintainability_index",
        "lines_of_code",
        "code_duplication_percentage",
        "test_coverage_percentage",
        "technical_debt_score"
      ],
      "signature_hash": "12377cd65536",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_complexity_rating"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolQualityIssue",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_quality_validator",
      "line_number": 29,
      "methods": [
        "async get_issue_summary() -> str"
      ],
      "properties": [
        "issue_type",
        "severity",
        "file_path",
        "line_number",
        "column_number",
        "message",
        "rule_id",
        "suggested_fix"
      ],
      "signature_hash": "b3dfe7d9bd23",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_issue_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 13
    },
    {
      "name": "ProtocolQualityStandards",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_quality_validator",
      "line_number": 45,
      "methods": [
        "async check_complexity_compliance(complexity: int) -> bool",
        "async check_maintainability_compliance(score: float) -> bool"
      ],
      "properties": [
        "max_complexity",
        "min_maintainability_score",
        "max_line_length",
        "max_function_length",
        "max_class_length",
        "naming_conventions",
        "required_patterns"
      ],
      "signature_hash": "db0f6464a295",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "check_complexity_compliance",
        "check_maintainability_compliance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 13,
      "line_count": 14
    },
    {
      "name": "ProtocolQualityReport",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_quality_validator",
      "line_number": 62,
      "methods": [
        "async get_critical_issues() -> list[ProtocolQualityIssue]"
      ],
      "properties": [
        "file_path",
        "metrics",
        "issues",
        "standards_compliance",
        "overall_score",
        "recommendations"
      ],
      "signature_hash": "7b00f5379aa3",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_critical_issues"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 11
    },
    {
      "name": "ProtocolQualityValidator",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_quality_validator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_quality_validator",
      "line_number": 76,
      "methods": [
        "async validate_file_quality(file_path: str, content: str | None) -> ProtocolQualityReport",
        "async validate_directory_quality(directory_path: str, file_patterns: list[str] | None) -> list[ProtocolQualityReport]",
        "calculate_quality_metrics(file_path: str, content: str | None) -> ProtocolQualityMetrics",
        "detect_code_smells(file_path: str, content: str | None) -> list[ProtocolQualityIssue]",
        "async check_naming_conventions(file_path: str, content: str | None) -> list[ProtocolQualityIssue]",
        "async analyze_complexity(file_path: str, content: str | None) -> list[ProtocolQualityIssue]",
        "async validate_documentation(file_path: str, content: str | None) -> list[ProtocolQualityIssue]",
        "suggest_refactoring(file_path: str, content: str | None) -> list[str]",
        "configure_standards(standards: 'ProtocolQualityStandards') -> None",
        "async get_validation_summary(reports: list[ProtocolQualityReport]) -> ProtocolValidationResult"
      ],
      "properties": [
        "standards",
        "enable_complexity_analysis",
        "enable_duplication_detection",
        "enable_style_checking"
      ],
      "signature_hash": "a4313f091473",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_file_quality",
        "validate_directory_quality",
        "check_naming_conventions",
        "analyze_complexity",
        "validate_documentation",
        "get_validation_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 48,
      "line_count": 51
    },
    {
      "name": "ProtocolValidationError",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation",
      "line_number": 18,
      "methods": [
        "__str__() -> str"
      ],
      "properties": [
        "error_type",
        "message",
        "context",
        "severity"
      ],
      "signature_hash": "a8c511ab88c2",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 6,
      "line_count": 9
    },
    {
      "name": "ProtocolValidationResult",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation",
      "line_number": 30,
      "methods": [
        "add_error(error_type: str, message: str, context: dict[str, ContextValue] | None, severity: str) -> None",
        "add_warning(error_type: str, message: str, context: dict[str, ContextValue] | None) -> None",
        "async get_summary() -> str"
      ],
      "properties": [
        "is_valid",
        "protocol_name",
        "implementation_name",
        "errors",
        "warnings"
      ],
      "signature_hash": "a3b9d7036b97",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 18,
      "line_count": 25
    },
    {
      "name": "ProtocolValidator",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation",
      "line_number": 58,
      "methods": [
        "async validate_implementation(implementation: T, protocol: type[P]) -> ProtocolValidationResult"
      ],
      "properties": [
        "strict_mode"
      ],
      "signature_hash": "24b68c6b3e40",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_implementation"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 5,
      "line_count": 8
    },
    {
      "name": "ProtocolValidationDecorator",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation",
      "line_number": 69,
      "methods": [
        "async validate_protocol_implementation(implementation: T, protocol: type[P], strict: bool) -> ProtocolValidationResult",
        "validation_decorator(protocol: type[P]) -> object"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_protocol_implementation"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 8
    },
    {
      "name": "ProtocolValidationScope",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation_orchestrator",
      "line_number": 15,
      "methods": [
        "async should_validate_file(file_path: str) -> bool",
        "async get_repository_name() -> str"
      ],
      "properties": [
        "repository_path",
        "validation_types",
        "file_patterns",
        "exclusion_patterns",
        "validation_depth"
      ],
      "signature_hash": "6cb314f34e19",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "should_validate_file",
        "get_repository_name"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 10,
      "line_count": 12
    },
    {
      "name": "ProtocolValidationWorkflow",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation_orchestrator",
      "line_number": 30,
      "methods": [
        "async get_execution_order() -> List[str]"
      ],
      "properties": [
        "workflow_id",
        "workflow_name",
        "validation_steps",
        "dependencies",
        "parallel_execution",
        "timeout_seconds"
      ],
      "signature_hash": "342a88bf6736",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_execution_order"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 9,
      "line_count": 11
    },
    {
      "name": "ProtocolValidationMetrics",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation_orchestrator",
      "line_number": 44,
      "methods": [
        "async get_performance_summary() -> str"
      ],
      "properties": [
        "total_files_processed",
        "validation_duration_seconds",
        "memory_usage_mb",
        "parallel_executions",
        "cache_hit_rate"
      ],
      "signature_hash": "45a58bd0762e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_performance_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 7,
      "line_count": 10
    },
    {
      "name": "ProtocolValidationSummary",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation_orchestrator",
      "line_number": 57,
      "methods": [
        "async get_overall_status() -> str"
      ],
      "properties": [
        "total_validations",
        "passed_validations",
        "failed_validations",
        "warning_count",
        "critical_issues",
        "success_rate"
      ],
      "signature_hash": "ef3ea879d7f1",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_overall_status"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 8,
      "line_count": 11
    },
    {
      "name": "ProtocolValidationReport",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation_orchestrator",
      "line_number": 71,
      "methods": [
        "async get_critical_issues() -> List[ProtocolValidationResult]"
      ],
      "properties": [
        "validation_id",
        "repository_name",
        "scope",
        "workflow",
        "results",
        "summary",
        "metrics",
        "recommendations"
      ],
      "signature_hash": "1e050834c84c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "get_critical_issues"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 11,
      "line_count": 13
    },
    {
      "name": "ProtocolValidationOrchestrator",
      "file_path": "src/omnibase_spi/protocols/validation/protocol_validation_orchestrator.py",
      "module_path": "omnibase_spi.protocols.validation.protocol_validation_orchestrator",
      "line_number": 87,
      "methods": [
        "orchestrate_validation(scope: 'ProtocolValidationScope', workflow: 'ProtocolValidationWorkflow | None') -> ProtocolValidationReport",
        "async validate_imports(scope: 'ProtocolValidationScope') -> List[ProtocolValidationResult]",
        "async validate_quality(scope: 'ProtocolValidationScope') -> List[ProtocolValidationResult]",
        "async validate_compliance(scope: 'ProtocolValidationScope') -> List[ProtocolValidationResult]",
        "async create_validation_workflow(workflow_name: str, validation_steps: List[str], dependencies: List[str], parallel_execution: bool) -> ProtocolValidationWorkflow",
        "async create_validation_scope(repository_path: str, validation_types: List[str] | None, file_patterns: List[str] | None, exclusion_patterns: List[str] | None) -> ProtocolValidationScope",
        "async get_orchestration_metrics() -> ProtocolValidationMetrics"
      ],
      "properties": [
        "orchestration_id",
        "default_scope"
      ],
      "signature_hash": "f1b3906ffb24",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "validate_imports",
        "validate_quality",
        "validate_compliance",
        "create_validation_workflow",
        "create_validation_scope",
        "get_orchestration_metrics"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "unknown",
      "complexity_score": 32,
      "line_count": 47
    },
    {
      "name": "ProtocolWorkQueue",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_work_queue.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_work_queue",
      "line_number": 27,
      "methods": [
        "async connect_to_work_system() -> bool",
        "async fetch_pending_tickets(limit: Union[int, None]) -> list[Any]",
        "async subscribe_to_ticket_updates() -> AsyncIterator[Any]",
        "async assign_ticket_to_agent(ticket_id: str, agent_id: str) -> Any",
        "async update_ticket_status(ticket_id: str, status: str, message: Union[str, None]) -> bool",
        "async update_ticket_progress(ticket_id: str, progress_percent: float) -> bool",
        "async complete_ticket(ticket_id: str, result_data: dict[str, 'ContextValue']) -> bool",
        "async fail_ticket(ticket_id: str, error_message: str) -> bool",
        "async get_ticket_by_id(ticket_id: str) -> Union[Any, None]",
        "async get_tickets_by_priority(priority: LiteralWorkQueuePriority) -> list[Any]",
        "async get_tickets_by_agent(agent_id: str) -> list[Any]",
        "async get_available_tickets(agent_capabilities: Union[list[str], None], max_priority: Union['LiteralWorkQueuePriority', None]) -> list[Any]",
        "async reserve_ticket(ticket_id: str, agent_id: str, duration_minutes: int) -> bool",
        "async release_ticket_reservation(ticket_id: str, agent_id: str) -> bool",
        "async get_queue_statistics() -> dict[str, int]",
        "async get_ticket_dependencies(ticket_id: str) -> list[str]",
        "async add_ticket_dependency(ticket_id: str, dependency_ticket_id: str) -> bool",
        "async remove_ticket_dependency(ticket_id: str, dependency_ticket_id: str) -> bool",
        "async get_blocked_tickets() -> list[Any]",
        "async get_ready_tickets() -> list[Any]",
        "async set_assignment_strategy(strategy: LiteralAssignmentStrategy) -> bool",
        "async get_assignment_strategy() -> 'LiteralAssignmentStrategy'",
        "async requeue_ticket(ticket_id: str, reason: str) -> bool",
        "async estimate_completion_time(ticket_id: str) -> Any",
        "async get_ticket_metrics(ticket_id: str) -> dict[str, float]",
        "async create_ticket_checkpoint(ticket_id: str, checkpoint_data: dict[str, 'ContextValue']) -> str",
        "async restore_ticket_checkpoint(ticket_id: str, checkpoint_id: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "connect_to_work_system",
        "fetch_pending_tickets",
        "subscribe_to_ticket_updates",
        "assign_ticket_to_agent",
        "update_ticket_status",
        "update_ticket_progress",
        "complete_ticket",
        "fail_ticket",
        "get_ticket_by_id",
        "get_tickets_by_priority",
        "get_tickets_by_agent",
        "get_available_tickets",
        "reserve_ticket",
        "release_ticket_reservation",
        "get_queue_statistics",
        "get_ticket_dependencies",
        "add_ticket_dependency",
        "remove_ticket_dependency",
        "get_blocked_tickets",
        "get_ready_tickets",
        "set_assignment_strategy",
        "get_assignment_strategy",
        "requeue_ticket",
        "estimate_completion_time",
        "get_ticket_metrics",
        "create_ticket_checkpoint",
        "restore_ticket_checkpoint"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 101,
      "line_count": 84
    },
    {
      "name": "ProtocolWorkflowEventMessage",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_event_bus.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_event_bus",
      "line_number": 22,
      "methods": [
        "async ack() -> None",
        "async get_workflow_event() -> ProtocolWorkflowEvent"
      ],
      "properties": [
        "topic",
        "key",
        "value",
        "headers",
        "offset",
        "partition",
        "workflow_type",
        "instance_id",
        "correlation_id",
        "sequence_number",
        "event_type",
        "idempotency_key"
      ],
      "signature_hash": "226f765161f8",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "ack",
        "get_workflow_event"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 16,
      "line_count": 24
    },
    {
      "name": "ProtocolWorkflowEventHandler",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_event_bus.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_event_bus",
      "line_number": 49,
      "methods": [
        "async __call__(event: 'ProtocolWorkflowEvent', context: dict[str, ContextValue]) -> None"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "__call__"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 4,
      "line_count": 11
    },
    {
      "name": "ProtocolLiteralWorkflowStateProjection",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_event_bus.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_event_bus",
      "line_number": 63,
      "methods": [
        "async apply_event(event: 'ProtocolWorkflowEvent', current_state: dict[str, ContextValue]) -> dict[str, ContextValue]",
        "async get_state(workflow_type: str, instance_id: UUID) -> dict[str, ContextValue]"
      ],
      "properties": [
        "projection_name"
      ],
      "signature_hash": "2dd01dcd1504",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "apply_event",
        "get_state"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 11,
      "line_count": 17
    },
    {
      "name": "ProtocolWorkflowEventBus",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_event_bus.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_event_bus",
      "line_number": 83,
      "methods": [
        "base_event_bus() -> 'ProtocolEventBus'",
        "async publish_workflow_event(event: 'ProtocolWorkflowEvent', target_topic: Union[str, None], partition_key: Union[str, None]) -> None",
        "async subscribe_to_workflow_events(workflow_type: str, event_types: Union[list[LiteralWorkflowEventType], None], handler: Union['ProtocolWorkflowEventHandler', None]) -> str",
        "async unsubscribe_from_workflow_events(subscription_id: str) -> None",
        "async replay_workflow_events(workflow_type: str, instance_id: UUID, from_sequence: int, to_sequence: Union[int, None], handler: Union['ProtocolWorkflowEventHandler', None]) -> list['ProtocolWorkflowEvent']",
        "async register_projection(projection: 'ProtocolLiteralWorkflowStateProjection') -> None",
        "async unregister_projection(projection_name: str) -> None",
        "async get_projection_state(projection_name: str, workflow_type: str, instance_id: UUID) -> dict[str, ContextValue]",
        "async create_workflow_topic(workflow_type: str, partition_count: int) -> bool",
        "async delete_workflow_topic(workflow_type: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "publish_workflow_event",
        "subscribe_to_workflow_events",
        "unsubscribe_from_workflow_events",
        "replay_workflow_events",
        "register_projection",
        "unregister_projection",
        "get_projection_state",
        "create_workflow_topic",
        "delete_workflow_topic"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 42,
      "line_count": 55
    },
    {
      "name": "ProtocolWorkflowNodeCapability",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_node_registry.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_node_registry",
      "line_number": 27,
      "methods": [],
      "properties": [
        "capability_id",
        "capability_name",
        "capability_version",
        "supported_task_types",
        "supported_node_types",
        "resource_requirements",
        "configuration_schema",
        "performance_characteristics",
        "availability_constraints"
      ],
      "signature_hash": "911c743f5ce5",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 9,
      "line_count": 17
    },
    {
      "name": "ProtocolWorkflowNodeInfo",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_node_registry.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_node_registry",
      "line_number": 47,
      "methods": [],
      "properties": [
        "node_id",
        "node_type",
        "node_name",
        "environment",
        "group",
        "version",
        "health_status",
        "endpoint",
        "metadata",
        "workflow_capabilities",
        "current_workload",
        "max_concurrent_tasks",
        "current_task_count",
        "supported_workflow_types",
        "task_execution_history",
        "resource_utilization",
        "scheduling_preferences"
      ],
      "signature_hash": "c9e59ab5c29e",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 17,
      "line_count": 25
    },
    {
      "name": "ProtocolTaskSchedulingCriteria",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_node_registry.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_node_registry",
      "line_number": 75,
      "methods": [],
      "properties": [
        "task_type",
        "node_type",
        "required_capabilities",
        "preferred_capabilities",
        "resource_requirements",
        "affinity_rules",
        "anti_affinity_rules",
        "geographic_constraints",
        "priority",
        "timeout_tolerance"
      ],
      "signature_hash": "52a262276a69",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 10,
      "line_count": 18
    },
    {
      "name": "ProtocolNodeSchedulingResult",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_node_registry.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_node_registry",
      "line_number": 96,
      "methods": [],
      "properties": [
        "selected_nodes",
        "scheduling_score",
        "scheduling_rationale",
        "fallback_nodes",
        "resource_allocation",
        "estimated_completion_time",
        "constraints_satisfied"
      ],
      "signature_hash": "acb070953387",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 7,
      "line_count": 15
    },
    {
      "name": "ProtocolWorkflowNodeRegistry",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_node_registry.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_node_registry",
      "line_number": 114,
      "methods": [
        "base_registry() -> 'ProtocolNodeRegistry'",
        "async discover_nodes_for_task(task_config: 'ProtocolTaskConfiguration', scheduling_criteria: 'ProtocolTaskSchedulingCriteria') -> ProtocolNodeSchedulingResult",
        "async discover_nodes_by_capability(capability_name: str, capability_version: Union[str, None], min_availability: Union[float, None]) -> list['ProtocolWorkflowNodeInfo']",
        "async discover_nodes_for_workflow_type(workflow_type: str, required_node_types: Union[list[LiteralNodeType], None]) -> list['ProtocolWorkflowNodeInfo']",
        "async get_workflow_node_info(node_id: str) -> Union[ProtocolWorkflowNodeInfo, None]",
        "async register_workflow_capability(node_id: str, capability: 'ProtocolWorkflowNodeCapability') -> bool",
        "async unregister_workflow_capability(node_id: str, capability_id: str) -> bool",
        "async get_node_capabilities(node_id: str) -> list['ProtocolWorkflowNodeCapability']",
        "async update_node_workload(node_id: str, task_id: UUID, workload_change: str) -> None",
        "async get_node_workload(node_id: str) -> dict[str, ContextValue]",
        "async get_resource_utilization(node_id: str) -> dict[str, float]",
        "async calculate_scheduling_score(node_info: 'ProtocolWorkflowNodeInfo', task_config: 'ProtocolTaskConfiguration', criteria: 'ProtocolTaskSchedulingCriteria') -> float",
        "async reserve_resources(node_id: str, task_id: UUID, resource_requirements: dict[str, ContextValue], timeout_seconds: int) -> bool",
        "async release_resources(node_id: str, task_id: UUID) -> bool",
        "async record_task_execution_metrics(node_id: str, task_id: UUID, execution_metrics: dict[str, ContextValue]) -> None",
        "async get_node_performance_history(node_id: str, task_type: Union['LiteralTaskType', None], time_window_seconds: int) -> dict[str, ContextValue]",
        "async update_node_availability(node_id: str, availability_status: str, metadata: Union[dict[str, ContextValue], None]) -> bool",
        "async get_cluster_health_summary(workflow_type: Union[str, None], node_group: Union[str, None]) -> dict[str, ContextValue]"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "discover_nodes_for_task",
        "discover_nodes_by_capability",
        "discover_nodes_for_workflow_type",
        "get_workflow_node_info",
        "register_workflow_capability",
        "unregister_workflow_capability",
        "get_node_capabilities",
        "update_node_workload",
        "get_node_workload",
        "get_resource_utilization",
        "calculate_scheduling_score",
        "reserve_resources",
        "release_resources",
        "record_task_execution_metrics",
        "get_node_performance_history",
        "update_node_availability",
        "get_cluster_health_summary"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 82,
      "line_count": 96
    },
    {
      "name": "ProtocolEventStoreTransaction",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_persistence",
      "line_number": 24,
      "methods": [
        "async commit() -> bool",
        "async rollback() -> None"
      ],
      "properties": [
        "transaction_id",
        "is_active"
      ],
      "signature_hash": "73e585c6d785",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "commit",
        "rollback"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 6,
      "line_count": 14
    },
    {
      "name": "ProtocolEventQueryOptions",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_persistence",
      "line_number": 41,
      "methods": [],
      "properties": [
        "workflow_type",
        "instance_id",
        "event_types",
        "from_sequence",
        "to_sequence",
        "from_timestamp",
        "to_timestamp",
        "limit",
        "offset",
        "order_by"
      ],
      "signature_hash": "169ecd36f39c",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 10,
      "line_count": 18
    },
    {
      "name": "ProtocolEventStoreResult",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_persistence",
      "line_number": 62,
      "methods": [],
      "properties": [
        "success",
        "events_processed",
        "sequence_numbers",
        "error_message",
        "operation_time_ms",
        "storage_size_bytes"
      ],
      "signature_hash": "9bf02acfa60f",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 6,
      "line_count": 14
    },
    {
      "name": "ProtocolEventStore",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_persistence",
      "line_number": 79,
      "methods": [
        "async append_events(events: list['ProtocolWorkflowEvent'], expected_sequence: Union[int, None], transaction: Union['ProtocolEventStoreTransaction', None]) -> ProtocolEventStoreResult",
        "async read_events(query_options: 'ProtocolEventQueryOptions', transaction: Union['ProtocolEventStoreTransaction', None]) -> list['ProtocolWorkflowEvent']",
        "async get_event_stream(workflow_type: str, instance_id: UUID, from_sequence: int, to_sequence: Union[int, None]) -> list['ProtocolWorkflowEvent']",
        "async get_last_sequence_number(workflow_type: str, instance_id: UUID) -> int",
        "async begin_transaction() -> ProtocolEventStoreTransaction",
        "async delete_event_stream(workflow_type: str, instance_id: UUID) -> ProtocolEventStoreResult",
        "async archive_old_events(before_timestamp: 'ProtocolDateTime', batch_size: int) -> ProtocolEventStoreResult"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "append_events",
        "read_events",
        "get_event_stream",
        "get_last_sequence_number",
        "begin_transaction",
        "delete_event_stream",
        "archive_old_events"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 31,
      "line_count": 46
    },
    {
      "name": "ProtocolSnapshotStore",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_persistence",
      "line_number": 128,
      "methods": [
        "async save_snapshot(snapshot: 'ProtocolWorkflowSnapshot', transaction: Union['ProtocolEventStoreTransaction', None]) -> bool",
        "async load_snapshot(workflow_type: str, instance_id: UUID, sequence_number: Union[int, None]) -> Union[ProtocolWorkflowSnapshot, None]",
        "async list_snapshots(workflow_type: str, instance_id: UUID, limit: int) -> list[dict[str, ContextValue]]",
        "async delete_snapshot(workflow_type: str, instance_id: UUID, sequence_number: int) -> bool",
        "async cleanup_old_snapshots(workflow_type: str, instance_id: UUID, keep_count: int) -> int"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "save_snapshot",
        "load_snapshot",
        "list_snapshots",
        "delete_snapshot",
        "cleanup_old_snapshots"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 27,
      "line_count": 32
    },
    {
      "name": "ProtocolLiteralWorkflowStateStore",
      "file_path": "src/omnibase_spi/protocols/workflow_orchestration/protocol_workflow_persistence.py",
      "module_path": "omnibase_spi.protocols.workflow_orchestration.protocol_workflow_persistence",
      "line_number": 163,
      "methods": [
        "async save_workflow_instance(workflow_instance: 'ProtocolWorkflowSnapshot') -> bool",
        "async load_workflow_instance(workflow_type: str, instance_id: UUID) -> Union[ProtocolWorkflowSnapshot, None]",
        "async query_workflow_instances(workflow_type: Union[str, None], state: Union['LiteralWorkflowState', None], correlation_id: Union[UUID, None], limit: int, offset: int) -> list['ProtocolWorkflowSnapshot']",
        "async delete_workflow_instance(workflow_type: str, instance_id: UUID) -> bool",
        "async lock_workflow_instance(workflow_type: str, instance_id: UUID, lock_owner: str, timeout_seconds: int) -> bool",
        "async unlock_workflow_instance(workflow_type: str, instance_id: UUID, lock_owner: str) -> bool"
      ],
      "properties": [],
      "signature_hash": "281a46a42ec9",
      "is_runtime_checkable": true,
      "has_init": false,
      "async_methods": [
        "save_workflow_instance",
        "load_workflow_instance",
        "query_workflow_instances",
        "delete_workflow_instance",
        "lock_workflow_instance",
        "unlock_workflow_instance"
      ],
      "sync_io_methods": [],
      "imports": [],
      "forward_references": [],
      "protocol_dependencies": [],
      "domain": "workflow",
      "complexity_score": 31,
      "line_count": 43
    }
  ],
  "performance_metrics": {
    "files_per_second": 818.144974947592,
    "protocols_per_second": 4140.010716602273,
    "average_protocols_per_file": 5.0602409638554215,
    "violation_density": 6.180722891566265
  },
  "recommendations": [
    "Fix 299 critical errors before merging code"
  ],
  "metadata": {
    "generated_at": "2025-09-29 11:40:58 UTC",
    "validator_version": "2.0.0",
    "config_rules": 16,
    "format_version": "1.0"
  }
}
